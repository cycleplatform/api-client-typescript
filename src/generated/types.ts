/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Account
         * @description Gets the Account associated with the authenticated bearer token.
         */
        get: operations["getAccount"];
        put?: never;
        post?: never;
        /**
         * Delete Account
         * @description Puts the Account into a `deleted` state. This will fail if the Account is the current `OWNER` of an active Hub.
         */
        delete: operations["deleteAccount"];
        options?: never;
        head?: never;
        /**
         * Update Account
         * @description Updates the Account.
         */
        patch: operations["updateAccount"];
        trace?: never;
    };
    "/v1/account/logins": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Account Logins
         * @description Lists logins associated with a given account.
         */
        get: operations["getAccountLogins"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/account/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Change Password
         * @description Change the password on the Account. Requires the current password of the Account to be submitted.
         */
        patch: operations["changePassword"];
        trace?: never;
    };
    "/v1/account/reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reset Password
         * @description Initiate a password reset for the Account. A confirmation email will be sent to the email associated with the Account, and the token in the email must be passed in a second call to this endpoint.
         */
        post: operations["resetPassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/account/invites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Account Invites
         * @description Lists the pending Hub Memberships (also known as Invites) associated with the Account.
         */
        get: operations["getAccountInvites"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/account/invites/{inviteId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Accept or Reject an Invite
         * @description Accept/reject a pending Invite to join a Hub.
         */
        patch: operations["updateAccountInvite"];
        trace?: never;
    };
    "/v1/account/memberships": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Account Memberships
         * @description Lists the Hub Memberships for a given account.
         */
        get: operations["getAccountMemberships"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/account/2fa/setup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Two-Factor Auth Setup
         * @description Gets the barcode and secret required for setting up two-factor authentication for the Account.
         */
        get: operations["getTwoFactorAuthSetup"];
        put?: never;
        /**
         * Enable Two-Factor Auth
         * @description Enables two-factor auth for the Account. Retrieve the token from an authenticator app using the secret from `getTwoFactorAuthSetup`.
         */
        post: operations["enableTwoFactorAuth"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/account/2fa/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable Two-Factor Auth
         * @description Disables two-factor auth for the account.
         */
        post: operations["disableTwoFactorAuth"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/account/2fa/recover": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Recover Two-Factor Auth
         * @description Returns a new two-factor auth setup to reset the Account's two-factor auth.
         */
        post: operations["recoverTwoFactorAuth"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/announcements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Announcements
         * @description Lists any important updates posted by the Cycle team.
         */
        get: operations["getAnnouncements"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/billing/credits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Billing Credits
         * @description Lists the Billing Credits associated with the current Hub.
         *
         *     Requires the `billing-credits-view` capability.
         *
         */
        get: operations["getCredits"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/billing/credits/{creditsId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Billing Credit
         * @description Requires the `billing-credits-view` capability.
         */
        get: operations["getCredit"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/billing/invoices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Billing Invoices
         * @description List the Invoices assoicated with the Hub.
         *
         *     Requires the `billing-invoices-view` capability.
         *
         */
        get: operations["getInvoices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/billing/invoices/{invoiceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Billing Invoice
         * @description Requires the `billing-invoices-view` capability.
         */
        get: operations["getInvoice"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/billing/invoices/{invoiceId}/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Invoice Job
         * @description Creates a new job for an Invoice. Generally used to make a payment on an invoice.
         *
         *     Requires the `billing-invoices-pay` capability.
         *
         */
        post: operations["createInvoiceJob"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/billing/methods": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Billing Methods
         * @description Lists the Billing Methods associated with the Hub defined in X-Hub-ID.
         *
         *     Requires the `billing-methods-manage` capability.
         *
         */
        get: operations["getBillingMethods"];
        put?: never;
        /**
         * Create Billing Method
         * @description Requires the `billing-methods-manage` capability.
         */
        post: operations["createBillingMethod"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/billing/methods/{methodId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Billing Method
         * @description Requires the `billing-methods-manage` capability.
         */
        get: operations["getBillingMethod"];
        put?: never;
        post?: never;
        /**
         * Delete Biilling Method
         * @description Deletes the Billing Method. However, the primary payment method may not be deleted.
         *     Requires the `billing-methods-manage` capability.
         *
         */
        delete: operations["deleteBillingMethod"];
        options?: never;
        head?: never;
        /**
         * Update Billing Invoice
         * @description Requires the `billing-methods-manage` capability.
         */
        patch: operations["updateBillingMethod"];
        trace?: never;
    };
    "/v1/billing/methods/{methodId}/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Billing Method Job
         * @description Creates a new job for a billing method. Generally used to verify a payment method.
         *
         *     Requires the `billing-methods-manage` capability.
         *
         */
        post: operations["createBillingMethodJob"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/billing/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Billing Orders
         * @description Requires the `billing-services-manage` capability.
         */
        get: operations["getOrders"];
        put?: never;
        /**
         * Create Billing Order
         * @description Requires the `billing-orders-manage` capability.
         */
        post: operations["createOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/billing/orders/{orderId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Billing Order
         * @description Requires the `billing-services-manage` capability.
         */
        get: operations["getBillingOrder"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Billing Order
         * @description Requires the `billing-services-manage` capability.
         */
        patch: operations["updateBillingOrder"];
        trace?: never;
    };
    "/v1/billing/orders/{orderId}/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Billing Order Job
         * @description Used to confirm a Billing Order.
         *
         *     Requires the `billing-services-manage` capability.
         *
         */
        post: operations["createOrderJob"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/billing/plans/support": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Support Plans
         * @deprecated
         */
        get: operations["getBillingSupportPlans"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/billing/plans/tiers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Billing Tiers
         * @description Returns list of availiable Billing Tiers.
         */
        get: operations["getBillingTiers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/billing/services": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Billing Services
         * @description Requries the `billing-services-view` capability.
         */
        get: operations["getBillingServices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/billing/services/{servicesId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Billing Service
         * @description Requries the `billing-services-view` capability.
         */
        get: operations["getBillingService"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/billing/services/overages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Billing Overages */
        get: operations["getBillingOverages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/containers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Containers
         * @description Requires the `containers-view` capability.
         */
        get: operations["getContainers"];
        put?: never;
        /**
         * Create Container
         * @description Requires the `containers-deploy` capability.
         */
        post: operations["createContainer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/containers/{containerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Container
         * @description Gets a Container.
         *
         *     Requires the `containers-view` capability.
         *
         */
        get: operations["getContainer"];
        put?: never;
        post?: never;
        /**
         * Delete Container
         * @description Requires the `containers-manage` capability.
         */
        delete: operations["deleteContainer"];
        options?: never;
        head?: never;
        /**
         * Update Container
         * @description Updates the specified Container.
         *
         *     Requires the `containers-manage` capability.
         *
         */
        patch: operations["updateContainer"];
        trace?: never;
    };
    "/v1/containers/{containerId}/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Container Summary
         * @description Requires the `containers-view` capability.
         */
        get: operations["getContainerSummary"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/containers/{containerId}/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Container Job
         * @description Used to perform different actions on a given Container.
         *
         *     Requires the following capabilities based on the task:
         *     `start`: `containers-manage`
         *     `stop`: `containers-manage`
         *     `reconfigure`: `containers-manage`
         *     `volumes.reconfigure`: `containers-volumes-manage`
         *     `reimage`: `containers-manage`
         *     `scale`: `containers-manage`
         *
         */
        post: operations["createContainerJob"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/containers/{containerId}/servers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Container Servers
         * @description Lists all Servers that currently have an Instance of this Container deployed to them.
         *
         *     Requires the `containers-view` capability.
         *
         */
        get: operations["getContainerServers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/containers/{containerId}/servers/usable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Compatible Servers
         * @description Gets a list of servers that are compatible with the specified Container and its restrictions (tags, etc).
         *
         *     Requires the `containers-view` capability.
         *
         */
        get: operations["getCompatibleServers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/containers/{containerId}/compatible-images": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Compatible Images
         * @description Returns a list of Images that are compatible with the specified Container.
         *     Used to quickly find Images that can be used for reimaging the Container.
         *
         *     Requires the `containers-view` capability.
         *
         */
        get: operations["getCompatibleImages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/containers/{containerId}/instances": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Instances
         * @description Requires the `containers-view` capability.
         */
        get: operations["getInstances"];
        put?: never;
        /**
         * Create Instances
         * @description Manually create Instances of a Container.
         *
         *     Requires the `containers-update` capability.
         *
         */
        post: operations["createInstances"];
        /**
         * Delete Container Instance(s)
         * @description Manually delete Instances of a Container.
         *
         *     Requires the `containers-update` capability.
         *
         */
        delete: operations["deleteContainerInstances"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/containers/{containerId}/instances/{instanceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Instance
         * @description Requires the `containers-view` capability.
         */
        get: operations["getInstance"];
        put?: never;
        post?: never;
        /**
         * Delete Container Instance
         * @description Requires the `containers-update` capability.
         */
        delete: operations["deleteInstance"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/containers/{containerId}/instances/{instanceId}/ssh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Generate Instance SSH Credentials
         * @description Generates credentials for connecting to an Instance via SSH. The generated endpoint/secret can be used to log in via SSH
         *     into the Instance without exposing ports on the container or host.
         *
         *     Requires the `containers-ssh` capability.
         *
         */
        get: operations["generateInstanceSSHCredentials"];
        put?: never;
        post?: never;
        /**
         * Expire SSH Credentials
         * @description Instantly expires any SSH credentials generated for this Instance.
         *
         *     Requires the `containers-ssh` capability.
         *
         */
        delete: operations["expireInstanceSSHCredentials"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/containers/{containerId}/instances/{instanceId}/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Instance Job
         * @description Used to perform different actions on a given Container Instance. Can be used to migrate or undo a migration of a Container Instance.
         *
         *     Requires the `containers-instance-migrate` capability.
         *
         */
        post: operations["createInstanceJob"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/containers/{containerId}/instances/{instanceId}/volumes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Instance Volumes
         * @description Requires the `containers-view` capability.
         */
        get: operations["getInstanceVolumes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/containers/{containerId}/instances/{instanceId}/telemetry/resources/report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Instance Telemetry Report
         * @description Retrieves a point-in-time report of an Instance's resource usage (CPU, RAM, Network, Storage, etc).
         *
         *     Requires the `containers-view` capability.
         *
         */
        get: operations["getInstanceTelemetryReport"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/containers/{containerId}/instances/{instanceId}/telemetry/resources/stream": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Instance Telemetry Stream Authorization
         * @description Retrieves an access token and URL to open a websocket to for streaming instance telemetry live.
         *     This connects directly to the compute layer on the server the instance is hosted on, and streams telemetry in real time.
         *
         *     Requires the `containers-view` capability.
         *
         */
        get: operations["getInstanceTelemetryStreamAuth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/containers/{containerId}/instances/{instanceId}/console": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Instance Console Stream Authorization
         * @description Returns the authorization information necessary to connect to a Container Instance's console.
         *     To connect via WebSocket, use the returned address, and append the returned token as a URL parameter: `<address>?token=<token>`.
         *
         *     Requires the `containers-console` capability.
         *
         */
        get: operations["getInstanceConsoleStreamAuth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/containers/{containerId}/functions/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Function Job
         * @description Used to perform different actions on a given Function Container.
         *
         *     Requires the `containers-functions-trigger` capability.
         *
         */
        post: operations["createFunctionJob"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/containers/{containerId}/backups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Container Backups
         * @description Requires the `containers-backups-view` capability.
         */
        get: operations["getContainerBackups"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/containers/{containerId}/backups/{backupId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a specific Container Backup
         * @description Gets the specified Container Backup.
         *
         *     Requires the `containers-backups-view` capability.
         *
         */
        get: operations["getContainerBackup"];
        put?: never;
        post?: never;
        /**
         * Delete Container Backup
         * @description Requires the `containers-backups-manage` capability.
         */
        delete: operations["deleteContainerBackup"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/containers/{containerId}/backups/{backupId}/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Container Backup Job
         * @description Creates a Container Backup Job.
         *     Can be used to restore a Container Backup for a given Container Instance.
         *
         *     Requires the `containers-backups-manage` capability.
         *
         */
        post: operations["createContainerBackupJob"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/containers/{containerId}/backups/{backupId}/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Container Backup Logs
         * @description Requires the `containers-backups-view` capability.
         */
        get: operations["getContainerBackupLogs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/dns/zones": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List DNS Zones
         * @description Requires the `dns-view` capability.
         */
        get: operations["getDNSZones"];
        put?: never;
        /**
         * Create DNS Zone
         * @description Requires the `dns-manage` capability.
         */
        post: operations["createDNSZone"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/dns/zones/{zoneId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get DNS Zone
         * @description Requires the `dns-view` capability.
         */
        get: operations["getDNSZone"];
        put?: never;
        post?: never;
        /**
         * Delete DNS Zone
         * @description Requires the `dns-manage` capability.
         */
        delete: operations["deleteDNSZone"];
        options?: never;
        head?: never;
        /**
         * Update DNS Zone
         * @description Requires the `dns-manage` capability.
         */
        patch: operations["updateDNSZone"];
        trace?: never;
    };
    "/v1/dns/zones/{zoneId}/access": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update DNS Zone Access
         * @description Requires the `dns-manage` capability, and if an ACL is present, the `manage` privilege.
         */
        patch: operations["updateDNSZoneAccess"];
        trace?: never;
    };
    "/v1/dns/zones/{zoneId}/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create DNS Zone Job
         * @description Used to perform different actions on a given DNS zone.
         *
         *     Requires the `dns-manage` capability.
         *
         */
        post: operations["createDNSZoneJob"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/dns/zones/{zoneId}/records": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List DNS Zone Records
         * @description Requires the `dns-view` capability.
         */
        get: operations["getDNSZoneRecords"];
        put?: never;
        /**
         * Create DNS Zone Record
         * @description Requires the `dns-manage` capability.
         */
        post: operations["createDNSZoneRecord"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/dns/zones/{zoneId}/records/{recordId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete DNS Zone Record
         * @description Requires the `dns-manage` capability.
         */
        delete: operations["deleteDNSZoneRecord"];
        options?: never;
        head?: never;
        /**
         * Update DNS Zone Record
         * @description Requires the `dns-manage` capability.
         */
        patch: operations["updateDNSZoneRecord"];
        trace?: never;
    };
    "/v1/dns/zones/{zoneId}/records/{recordId}/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a DNS Zone Record Job
         * @description Used to perform different actions on a given DNS Zone record.
         *
         *     Requires the `dns-manage` capability.
         *
         */
        post: operations["createDNSZoneRecordJob"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/dns/tls/attempts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List TLS Generation Attempts
         * @description Requires the `dns-view` capability.
         */
        get: operations["getTLSGenerationAttempts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/dns/tls/certificates/lookup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Lookup TLS Certificate
         * @description Lookup and retrieve a TLS certificate bundle for a specified domain.
         *
         *     Requires the `dns-view` capability.
         *
         */
        get: operations["lookupTLSCertificate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/dns/tls/certificates/user-supplied": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List User Supplied TLS Certificates
         * @description Retrieve a list of TLS certificates that were uploaded to Cycle.
         *
         *     Requires the `dns-certs-view` capability.
         *
         */
        get: operations["getUserSuppliedCertificates"];
        put?: never;
        /**
         * Upload User Supplied TLS Certificate
         * @description Upload a user-supplied TLS certificate to the hub. This TLS certificate can be utilized by **LINKED** records matching the specified domains.
         *
         *     Requires the `dns-manage` capability.
         *
         */
        post: operations["uploadUserSuppliedCertificate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/dns/tls/certificates/user-supplied/{certificateId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Supplied TLS Certificate
         * @description Gets a list of custom TLS certificates uploaded to the hub.
         *
         *     Requires the `dns-certs-view` capability.
         *
         */
        get: operations["getUserSuppliedCertificate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/dns/tls/certificates/user-supplied/{certificateId}/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create User Supplied TLS Certificate Job
         * @description Used to perform different actions on a given user supplied TLS certificate.
         *
         *     Requires the `dns-manage` capability.
         *
         */
        post: operations["createUserSuppliedCertificateJob"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/environments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Environments
         * @description Requires the `environments-view` capability.
         */
        get: operations["getEnvironments"];
        put?: never;
        /**
         * Create Environment
         * @description Requires the `environments-create` capability.
         */
        post: operations["createEnvironment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/environments/monitoring-tiers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Environment Monitoring Tiers
         * @description Gets all the available monitoring tiers that can be enabled for an environment.
         *
         */
        get: operations["getEnvironmentMonitoringTiers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/environments/{environmentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Environment
         * @description Requires the `environments-view` capability.
         */
        get: operations["getEnvironment"];
        put?: never;
        post?: never;
        /**
         * Delete Environment
         * @description Requires the `environments-manage` capability.
         */
        delete: operations["deleteEnvironment"];
        options?: never;
        head?: never;
        /**
         * Update Environment
         * @description Updates the specificed Environment.
         *
         *     Requires the `environments-manage` capability.
         *
         */
        patch: operations["updateEnvironment"];
        trace?: never;
    };
    "/v1/environments/{environmentId}/access": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Environment Access
         * @description Updates the specificed Environment.
         *
         *     Requires the `environments-manage` capability. If an ACL is present, requires the `manage` privilege.
         *
         */
        patch: operations["updateEnvironmentAccess"];
        trace?: never;
    };
    "/v1/environments/{environmentId}/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Environment Job
         * @description Create a job for an Environment, such as 'start' or 'stop'.
         *
         *     Requires the `environments-manage` capability.
         *
         */
        post: operations["createEnvironmentJob"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/environments/{environmentId}/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Environment Summary
         * @description Gets the summary of an Environment. Contains useful and relevant data/statistics that would otherwise be several separate API calls.
         *
         *     Requires the `environments-view` capability.
         *
         */
        get: operations["getEnvironmentSummary"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/environments/{environmentId}/deployments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Environment Deployments
         * @description Gets a list of all deployments in the specified Environment.
         *
         *     Requires the `environments-view` capability.
         *
         */
        get: operations["getEnvironmentDeployments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/environments/{environmentId}/export/stack": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Export As Stack
         * @description Exports an environment as a stack file for reuse.
         *
         *     Requires the `environments-manage` capability. You must also have management permissions on the target environment ACL.
         *
         */
        post: operations["exportStack"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/environments/{environmentId}/scoped-variables": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Scoped Variables
         * @description Requires the `scoped-variables-view` capability.
         */
        get: operations["getScopedVariables"];
        put?: never;
        /**
         * Create Scoped Variable
         * @description Requires the `scoped-variables-manage` capability.
         */
        post: operations["createScopedVariable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/environments/{environmentId}/scoped-variables/{scopedVariableId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Scoped Variable
         * @description Requires the `scoped-variables-view` capability.
         */
        get: operations["getScopedVariable"];
        put?: never;
        post?: never;
        /**
         * Delete Scoped Variable
         * @description Requires the `scoped-variables-manage` capability.
         */
        delete: operations["deleteScopedVariable"];
        options?: never;
        head?: never;
        /**
         * Update Scoped Variable
         * @description Requires the `scoped-variables-manage` capability.
         */
        patch: operations["updateScopedVariable"];
        trace?: never;
    };
    "/v1/environments/{environmentId}/services/discovery/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Discovery Service Job
         * @description Creates a task that will update the discovery service's configuration.
         */
        post: operations["createDiscoveryServiceJob"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/environments/{environmentId}/services/gateway/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Gateway Service Job
         * @description Creates a task that will update the gateway service's configuration.
         */
        post: operations["createGatewayServiceJob"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/environments/{environmentId}/services/lb": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Load Balancer Service
         * @description Requires the `environments-view` capability.
         */
        get: operations["getLoadBalancerService"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/environments/{environmentId}/services/lb/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Load Balancer Service Job
         * @description Creates a task that will update the load balancer's configuration.
         */
        post: operations["createLoadBalancerServiceJob"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/environments/{environmentId}/services/lb/telemetry/report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Load Balancer Telemetry Report
         * @description Fetches a telemetry report for Cycle's native load balancer for the specified range.
         *
         *     ## Permissions
         *     Requires the `environments-view` capability. Also requires the user to have access specifically to the requested Environment.
         *
         */
        get: operations["getLoadBalancerTelemetryReport"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/environments/{environmentId}/services/lb/telemetry/latest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Latest Load Balancer Telemetry Report.
         * @description Fetches the latest telemetry report for Cycle's native load balancer. Provides detailed information on a per-instance basis.
         *
         *     ## Permissions
         *     Requires the `environments-view` capability. Also requires the user to have access specifically to the requested Environment.
         *
         */
        get: operations["getLoadBalancerLatestTelemetryReport"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/environments/{environmentId}/services/lb/telemetry/latest-controllers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Latest Load Balancer Controller Telemetry
         * @description Gets the controller information for the specified load balancer. Returns a similar struct to the 'latest' load balancer telemetry call, but does NOT return snapshots, just the controller information.
         *
         *     ## Permissions
         *     Requires the `environments-view` capability. Also requires the user to have access specifically to the requested Environment.
         *
         */
        get: operations["getLoadBalancerTelemetryLatestControllers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/environments/{environmentId}/services/scheduler/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Scheduler Service Job
         * @description Creates a task that will update the scheduler service's configuration.
         */
        post: operations["createSchedulerServiceJob"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/environments/{environmentId}/services/vpn": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get VPN Service
         * @description Requires the `environments-vpn` capability.
         */
        get: operations["getVPNService"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/environments/{environmentId}/services/vpn/logins": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get VPN Logins
         * @description Requires the `environments-vpn` capability.
         */
        get: operations["getVPNLogins"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/environments/{environmentId}/services/vpn/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List VPN Users
         * @description Requires the `environments-vpn-manage` capability.
         */
        get: operations["getVPNUsers"];
        put?: never;
        /**
         * Create VPN User
         * @description Requires the `environments-vpn-manage` capability.
         */
        post: operations["createVPNUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/environments/{environmentId}/services/vpn/users/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete VPN User
         * @description Requires the `environments-vpn-manage` capability.
         */
        delete: operations["deleteVPNUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/environments/{environmentId}/services/vpn/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create VPN Service Job
         * @description Used to reconfigure or reset the Environment VPN. Requires the `environments-vpn-manage` capability.
         */
        post: operations["createVPNServiceJob"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/hubs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Hubs
         * @description Lists all associated Hubs.
         */
        get: operations["getHubs"];
        put?: never;
        /**
         * Create Hub
         * @description Create a Hub.
         */
        post: operations["createHub"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/hubs/current": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Hub
         * @description Requires the `hubs-view` capability.
         */
        get: operations["getHub"];
        put?: never;
        post?: never;
        /**
         * Delete Hub
         * @description Requires the `hubs-delete` capability. This can only be aquired by being the hub owner.
         */
        delete: operations["deleteHub"];
        options?: never;
        head?: never;
        /**
         * Update Hub
         * @description Updates the specified hub, setting the values of the parameters passed.
         */
        patch: operations["updateHub"];
        trace?: never;
    };
    "/v1/hubs/capabilities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Hub Capabilities */
        get: operations["getHubCapabilities"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/hubs/current/usage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Hub Usage
         * @description Requires the `hubs-view` capability.
         */
        get: operations["getHubUsage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/hubs/current/activity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Hub Activity */
        get: operations["getHubActivity"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/hubs/current/api-keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List API Keys
         * @description Requires the `api-keys-manage` capability.
         */
        get: operations["getApiKeys"];
        put?: never;
        /**
         * Create API Key
         * @description Requires the `api-keys-manage` capability.
         */
        post: operations["createApiKey"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/hubs/current/api-keys/{apikeyId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get API Key
         * @description Requries the `api-keys-manage` capability.
         */
        get: operations["getAPIKey"];
        put?: never;
        post?: never;
        /**
         * Delete API Key
         * @description Requires the 'api-keys-manage' capability.
         */
        delete: operations["deleteAPIKey"];
        options?: never;
        head?: never;
        /**
         * Update API Key
         * @description Requires the `api-keys-manage` capability.
         */
        patch: operations["updateAPIKey"];
        trace?: never;
    };
    "/v1/hubs/current/integrations/{integrationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Integration
         * @description Retrieves details of a single integration associated with the current hub.
         *
         *     Requires the `hubs-integrations-view` capability.
         *
         */
        get: operations["getIntegration"];
        put?: never;
        post?: never;
        /**
         * Delete an Integration
         * @description Deletes the specified integration from the current hub, marking it as deleted and returning the updated integration.
         */
        delete: operations["deleteIntegration"];
        options?: never;
        head?: never;
        /**
         * Update Integration
         * @description Updates the specified integration within the current hub. If the integration definition specifies that it requires verification, then you must submit a verify task to enable it.
         */
        patch: operations["updateIntegration"];
        trace?: never;
    };
    "/v1/hubs/current/integrations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Integrations
         * @description Lists all integrations associated with the current Hub, with optional filtering.
         *
         *     Requires the `hubs-integrations-view` capability.
         *
         */
        get: operations["getIntegrations"];
        put?: never;
        /**
         * Create Integration
         * @description Create an integration resource within a hub. If the integration definition specifies that it requires verification, then you must submit a verify task to enable it.
         */
        post: operations["createIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/hubs/current/integrations/available": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Available Integrations
         * @description Returns a map of available integrations categorized by their type.
         */
        get: operations["getAvailableIntegrations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/hubs/current/integrations/{integrationId}/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new Hub Integration Job.
         * @description Creates a new Job targeted at the provided Hub Integration.
         *
         *     ## Required Permissions
         *       - Requires a valid hub membership to the target hub.
         *       - Requires the `hubs-integrations-manage` capability.
         *
         */
        post: operations["createIntegrationJob"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/hubs/current/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Hub Members
         * @description Requires the `hubs-members-view` capability.
         */
        get: operations["getHubMembers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/hubs/current/membership": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Hub Membership
         * @description Gets the Hub Membership for the requesting Account.
         */
        get: operations["getHubMembership"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/hubs/current/members/{memberId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Hub Member
         * @description Requires the `hubs-members-view` capability.
         */
        get: operations["getHubMember"];
        put?: never;
        post?: never;
        /**
         * Delete Hub Member
         * @description Requires the `hubs-members-manage` capability.
         */
        delete: operations["deleteHubMember"];
        options?: never;
        head?: never;
        /**
         * Update Hub Member
         * @description Requires the `hubs-members-manage` capability.
         */
        patch: operations["updateHubMember"];
        trace?: never;
    };
    "/v1/hubs/current/members/account/{accountId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Hub Member Account
         * @description Requires the `hubs-members-view` capability.
         */
        get: operations["getHubMemberAccount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/hubs/current/invites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Hub Invites
         * @description Requires the `hubs-invites-manage` capability.
         */
        get: operations["getHubInvites"];
        put?: never;
        /**
         * Create Hub Invite
         * @description Requires the `hubs-invites-send` capability.
         */
        post: operations["createHubInvite"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/hubs/current/invites/{inviteId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Hub Invite
         * @description Requires the `hub-invites-manage` capability.
         */
        delete: operations["deleteHubInvite"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/hubs/current/notifications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Hub Notification Pipeline Auth
         * @description Initializes authorization for the Hub notification pipeline. The Hub notification pipeline is a one-way streaming websocket that
         *     sends real-time 'notifications' as things are happening on the Hub. These notifications tell some basic information about an event,
         *     and it is up to the user to fetch additional details, if deemed necessary.
         *
         *     Requesting this endpoint without a `?token=<token>` URL parameter will result in receiving a short lived token in the response body. That
         *     token can then be applied to the URL parameter to the same endpoint to upgrade the connection to a WebSocket.
         *
         *     Requires the `apionly-notifications-listen` capability.
         *
         */
        get: operations["getHubNotificationSocketAuth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/hubs/current/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Hub Roles
         * @description Lists the Roles that have been created for this Hub.
         *
         *     Requires the `hubs-roles-manage` capability.
         *
         */
        get: operations["getRoles"];
        put?: never;
        /**
         * Create Hub Role
         * @description Creates a custom Role for a Hub.
         *
         *     Requires the `hubs-roles-manage` capability.
         *
         */
        post: operations["createRole"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/hubs/current/roles/{roleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Hub Role
         * @description Retrieves the specified Role.
         *
         *     Requries the `hubs-roles-manage` capability.
         *
         */
        get: operations["getRole"];
        put?: never;
        post?: never;
        /**
         * Delete Hub Role
         * @description Marks a Role as 'deleted'.
         *
         *     Requires the 'hubs-roles-manage' capability.
         *
         */
        delete: operations["deleteRole"];
        options?: never;
        head?: never;
        /**
         * Update Hub Role
         * @description Updates various properties of a specific Role.
         *
         *     Requires the `hubs-roles-manage` capability.
         *
         */
        patch: operations["updateRole"];
        trace?: never;
    };
    "/v1/hubs/current/roles/defaults": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Default Hub Roles */
        get: operations["getDefaultHubRoles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/images": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Images
         * @description Requires the `images-view` capability.
         */
        get: operations["getImages"];
        put?: never;
        /**
         * Create Image
         * @description Requires the `images-manage` capability.
         */
        post: operations["createImage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/images/{imageId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Image
         * @description Requires the `images-view` capability.
         */
        get: operations["getImage"];
        put?: never;
        post?: never;
        /**
         * Delete Image
         * @description Requires the `images-manage` capability.
         */
        delete: operations["deleteImage"];
        options?: never;
        head?: never;
        /**
         * Update Image
         * @description Requires the `images-manage` capability.
         */
        patch: operations["updateImage"];
        trace?: never;
    };
    "/v1/images/{imageId}/build-log": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Image Build Log
         * @description Requires the `images-view` capability.
         */
        get: operations["getImageBuildLog"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/images/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Prune Images
         * @description Used to perform different actions on a given image.
         *
         *     Requires the `images-manage` capability.
         *
         */
        post: operations["createImagesJob"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/images/{imageId}/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Image Job
         * @description Used to perform different actions on a given Image.
         *
         *     Requires the `images-import` capability.
         *
         */
        post: operations["createImageJob"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/images/sources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Image Sources
         * @description Requires the `images-sources-view` capability.
         */
        get: operations["getImageSources"];
        put?: never;
        /**
         * Create Image Source
         * @description Requires the `images-sources-manage` capability.
         */
        post: operations["createImageSource"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/images/sources/{sourceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Image Source
         * @description Requires the `images-sources-view` capability.
         */
        get: operations["getImageSource"];
        put?: never;
        post?: never;
        /**
         * Delete Image Source
         * @description Requires the `images-sources-manage` capability.
         */
        delete: operations["deleteImageSource"];
        options?: never;
        head?: never;
        /**
         * Update Image Source
         * @description Requires the `images-sources-manage` capability.
         */
        patch: operations["updateImageSource"];
        trace?: never;
    };
    "/v1/images/sources/{sourceId}/access": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Image Source Access
         * @description Requires the `images-sources-manage` capability. If an ACL is present, requires the `manage` privilege.
         */
        patch: operations["updateImageSourceAccess"];
        trace?: never;
    };
    "/v1/infrastructure/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Infrastructure Summary
         * @description Requires the `infrastructure-servers-view` capability.
         */
        get: operations["getInfrastructureSummary"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/infrastructure/deployment-strategies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Deployment Strategies
         * @description Gets the available deployment strategies that can be used to orchestrate containers.
         */
        get: operations["getDeploymentStrategies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/infrastructure/auto-scale/groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Auto-Scale Groups
         * @description Requires the `autoscale-groups-manage` capability.
         */
        get: operations["getAutoScaleGroups"];
        put?: never;
        /**
         * Create Auto-Scale Group
         * @description Requires the 'autoscale-groups-manage'
         */
        post: operations["createAutoScaleGroup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/infrastructure/auto-scale/groups/{groupId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Auto-Scale Group
         * @description Requires the `autoscale-groups-view` capability.
         */
        get: operations["getAutoScaleGroup"];
        put?: never;
        post?: never;
        /**
         * Delete Auto-Scale Group
         * @description Requires the `autoscale-group-manage` capability.
         */
        delete: operations["deleteAutoScaleGroup"];
        options?: never;
        head?: never;
        /**
         * Update Auto-Scale Group
         * @description Requires the `autoscale-groups-manage` capability.
         */
        patch: operations["updateAutoScaleGroup"];
        trace?: never;
    };
    "/v1/infrastructure/auto-scale/groups/{groupId}/access": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Auto-Scale Group Access
         * @description Requires the `autoscale-groups-manage` capability. If an ACL is present, requires the `manage` privilege.
         */
        patch: operations["updateAutoScaleGroupAccess"];
        trace?: never;
    };
    "/v1/infrastructure/providers/{providerVendor}/servers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Provider Servers */
        get: operations["getProviderServers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/infrastructure/providers/{providerVendor}/locations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Provider Locations */
        get: operations["getProviderLocations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/infrastructure/clusters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Clusters
         * @description Requires the `clusters-view` capability.
         */
        get: operations["getClusters"];
        put?: never;
        /**
         * Create Cluster
         * @description Requires the `clusters-manage` capability.
         */
        post: operations["createCluster"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/infrastructure/clusters/{clusterId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Cluster
         * @description Gets a Cluster.
         *     Requires the `clusters-view` capability.
         *
         */
        get: operations["getCluster"];
        put?: never;
        post?: never;
        /**
         * Delete Cluster
         * @description Requires the `clusters-manage` capability.
         */
        delete: operations["deleteCluster"];
        options?: never;
        head?: never;
        /**
         * Update Cluster
         * @description Requires the `clusters-manage` capability.
         */
        patch: operations["updateCluster"];
        trace?: never;
    };
    "/v1/infrastructure/clusters/{clusterId}/access": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Cluster Access
         * @description Requires the `clusters-manage` capability. If an ACL is present, requires the `manage` privilege.
         */
        patch: operations["updateClusterAccess"];
        trace?: never;
    };
    "/v1/infrastructure/servers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Servers
         * @description Requires the `servers-view` capability.
         */
        get: operations["getServers"];
        put?: never;
        /**
         * Create Server
         * @description Requires the `servers-provision` capability.
         */
        post: operations["createServer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/infrastructure/servers/{serverId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Server
         * @description Requires the `servers-view` capability.
         */
        get: operations["getServer"];
        put?: never;
        post?: never;
        /**
         * Delete Server
         * @description Requires the `servers-manage` capability.
         */
        delete: operations["deleteServer"];
        options?: never;
        head?: never;
        /**
         * Update Server
         * @description Requires the `servers-manage` capability.
         */
        patch: operations["updateServer"];
        trace?: never;
    };
    "/v1/infrastructure/servers/{serverId}/telemetry": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Server Telemetry
         * @description This call requires the filter query parameter to be used.
         *
         *     Requires the `servers-view` capability.
         *
         */
        get: operations["getServerTelemetry"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/infrastructure/servers/{serverId}/instances": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Server Instances
         * @description Requires the `containers-view` capability.
         */
        get: operations["getServerInstances"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/infrastructure/servers/{serverId}/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Server Job
         * @description Used to perform different actions on a given Server. Requires the `servers-manage` capability.
         */
        post: operations["createServerJob"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/infrastructure/servers/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Server Tags
         * @description Requires the `servers-view` capability.
         */
        get: operations["getServerTags"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/infrastructure/servers/{serverId}/usage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Server Usage
         * @description Requires the `servers-view` capability.
         */
        get: operations["GetServerUsage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/infrastructure/servers/{serverId}/console": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Server Console
         * @description Gets the authorization information required to connect to a Server console websocket.
         *
         *     Requires the `servers-console` capability.
         *
         */
        get: operations["GetServerConsole"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/infrastructure/ips/pools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List IP Pools
         * @description Requires the `infrastructure-ips-manage` capability.
         */
        get: operations["getInfrastructureIPPools"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/infrastructure/ips/pools/{poolId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get IP Pool
         * @description Requires the `infrastructure-ips-manage` capability.
         */
        get: operations["getIPPool"];
        put?: never;
        post?: never;
        /**
         * Delete IP Pool
         * @description Requires the `infrastructure-ips-manage` capability.
         */
        delete: operations["deleteIPPool"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/infrastructure/ips/pools/{poolId}/ips": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Pool IPs
         * @description Requires the `infrastructure-ips-manage` capability.
         */
        get: operations["getPoolIPs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/jobs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Jobs
         * @description Requires the `apionly-jobs-view` permission.
         */
        get: operations["getJobs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/jobs/{jobId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Job
         * @description Requires the `apionly-jobs-view` permission.
         */
        get: operations["getJob"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/jobs/latest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Latest Jobs
         * @description Requires the `apionly-jobs-view` permission.
         */
        get: operations["getLatestJobs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/monitoring/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Metrics
         * @description A basic query for retrieving metrics. For a more complex and granular report, see the `/v1/monitoring/metrics/aggregate` endpoint.
         *
         *     Requires the `monitor-view` capability.
         *
         */
        get: operations["getMetrics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/monitoring/metrics/aggregate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Aggregated Metrics
         * @description Generate a metric report using an aggregated pipeline query with Mongo. This endpoint provides ultimate
         *     flexibility in generating data for dashboards, charts, graphs, etc.
         *
         *     You should always provide a time range filter to this call, either through the filter parameter or in the critera body. The aggregate is limited to 25,000 input documents, so a time frame will give the best results.
         *
         *     Requires the `monitor-view` capability.
         *
         */
        post: operations["generateAggregatedMetrics"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/monitoring/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Events
         * @description A basic query for retrieving events. For a more complex and granular report, see the `/v1/monitoring/events/aggregate` endpoint.
         *
         *     Requires the `monitor-view` capability.
         *
         */
        get: operations["getEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/monitoring/events/aggregate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Aggregated Events
         * @description Generate an events report using an aggregated pipeline query with Mongo. This endpoint provides ultimate
         *     flexibility in generating data for dashboards, charts, graphs, etc.
         *
         *     You should always provide a time range filter to this call, either through the filter parameter or in the critera body. The aggregate is limited to 25,000 input documents, so a time frame will give the best results.
         *
         *     Requires the `monitor-view` capability.
         *
         */
        post: operations["generateAggregatedEvents"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/monitoring/logs/aggregate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Aggregate Logs
         * @description A query for retrieving container instance logs.
         *     Allows aggregate narrowing through filtering, searching, and scope parameters.
         *     If 'local' is set to true, only cached logs will be queried, and logs in object storage will be ignored.  This leads to much faster performance.
         *
         *     Requires the `monitor-view` capability.
         *
         */
        post: operations["aggregateLogs"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/monitoring/monitors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Monitoring Monitors
         * @description Returns location information about the monitors used for Cycle's external monitoring service.
         *     These monitors are used for determining the latency between the public internet and environment
         *     load balancers.
         *
         */
        get: operations["getMonitoringMonitors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/pipelines": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Pipelines
         * @description Requires the `pipelines-view` capability.
         */
        get: operations["getPipelines"];
        put?: never;
        /**
         * Create Pipeline
         * @description Requires the `pipelines-manage` capability.
         */
        post: operations["createPipeline"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/pipelines/{pipelineId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Pipeline
         * @description Requires the `pipelines-view` capability.
         */
        get: operations["getPipeline"];
        put?: never;
        post?: never;
        /**
         * Delete Pipeline
         * @description Requires the `pipelines-manage` capability.
         */
        delete: operations["deletePipeline"];
        options?: never;
        head?: never;
        /**
         * Update Pipeline
         * @description Requires the `pipelines-manage` capability.
         */
        patch: operations["updatePipeline"];
        trace?: never;
    };
    "/v1/pipelines/{pipelineId}/access": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Pipeline Access
         * @description Requires the `pipelines-manage` capability. If an ACL is present, requires the `manage` privilege.
         */
        patch: operations["updatePipelineAccess"];
        trace?: never;
    };
    "/v1/pipelines/{pipelineId}/runs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Pipeline Runs
         * @description List information about times this Pipeline has run.
         *
         *     Requires the `pipelines-view` capability.
         *
         */
        get: operations["getPipelineRuns"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/pipelines/{pipelineId}/runs/{runId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Pipeline Run
         * @description Requires the `pipelines-view` capability.
         */
        get: operations["getPipelineRun"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/pipelines/{pipelineId}/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Pipeline Job
         * @description Requires the `pipelines-manage` capability.
         */
        post: operations["createPipelineJob"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/pipelines/clone": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Clone Pipeline
         * @description Requires the `pipelines-manage` capability.
         */
        post: operations["clonePipeline"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/pipelines/{pipelineId}/trigger": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Trigger Pipeline */
        post: operations["triggerPipeline"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/pipelines/{pipelineId}/keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Trigger Keys
         * @description Requires the `pipelines-manage` capability.
         */
        get: operations["getPipelineTriggerKeys"];
        put?: never;
        /**
         * Create Trigger Key
         * @description Requires the `pipelines-manage` capability.
         */
        post: operations["createPipelineTriggerKey"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/pipelines/{pipelineId}/keys/{triggerKeyId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Trigger Key
         * @description Requires the `pipelines-manage` capability.
         */
        get: operations["getPipelineTriggerKey"];
        put?: never;
        post?: never;
        /**
         * Delete Trigger Key
         * @description Requires the `pipelines-manage` capability.
         */
        delete: operations["deletePipelineTriggerKey"];
        options?: never;
        head?: never;
        /**
         * Update Trigger Key
         * @description Requires the `pipelines-manage` capability.
         */
        patch: operations["updatePipelineTriggerKey"];
        trace?: never;
    };
    "/v1/sdn/networks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Networks
         * @description Requires the `sdn-networks-view` capability.
         */
        get: operations["getNetworks"];
        put?: never;
        /**
         * Create Network
         * @description Requires the `sdn-networks-manage` capability.
         */
        post: operations["createNetwork"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/sdn/networks/{networkId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Network
         * @description Requires the `sdn-networks-view` capability.
         */
        get: operations["getNetwork"];
        put?: never;
        post?: never;
        /**
         * Delete Network
         * @description Requires the `sdn-networks-manage` capability.
         */
        delete: operations["deleteNetwork"];
        options?: never;
        head?: never;
        /**
         * Update Network
         * @description Requires the `sdn-networks-manage` capability.
         */
        patch: operations["updateNetwork"];
        trace?: never;
    };
    "/v1/sdn/networks/{networkId}/access": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Network Access
         * @description Requires the `sdn-networks-manage` capability. If an ACL is present, requires the `manage` privilege.
         */
        patch: operations["updateNetworkAccess"];
        trace?: never;
    };
    "/v1/sdn/networks/{networkId}/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Network Job
         * @description Requires the `sdn-networks-manage` capability.
         */
        post: operations["createNetworkJob"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/search/index": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Search Index
         * @description Gets a pre-built search index, containing IDs and basic information for many commonly used resources on the Hub.
         *     Can be used to build a 'quick search' functionality for referencing the most frequently used resources.
         *
         *     Requires the `view` capability for each returned segment, i.e. to retrieve Containers, you must have `containers-view`.
         *
         */
        get: operations["getSearchIndex"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/stacks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Stacks
         * @description Requires the `stacks-view` permission.
         */
        get: operations["getStacks"];
        put?: never;
        /**
         * Create Stack
         * @description Requires the `stacks-manage` capability.
         */
        post: operations["createStack"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/stacks/{stackId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Stack
         * @description Requires the `stacks-view` capability.
         */
        get: operations["getStack"];
        put?: never;
        post?: never;
        /**
         * Delete Stack
         * @description Requires the `stacks-manage` capability.
         */
        delete: operations["deleteStack"];
        options?: never;
        head?: never;
        /**
         * Update Stack
         * @description Requires the `stacks-manage` capability.
         */
        patch: operations["updateStack"];
        trace?: never;
    };
    "/v1/stacks/{stackId}/access": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Stack Access
         * @description Requires the `stacks-manage` capability. If an ACL is present, requires the `manage` privilege.
         */
        patch: operations["updateStackAccess"];
        trace?: never;
    };
    "/v1/stacks/{stackId}/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Stack Job
         * @description Requires the `stacks-manage` capability.
         */
        post: operations["createStackJob"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/stacks/builds/{buildId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Look Up Stack Build
         * @description Look up a Stack Build using only the Build ID, instead of requiring a Stack ID as well.
         *
         *     Requires the `stacks-view` capability.
         *
         */
        get: operations["lookupStackBuild"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/stacks/{stackId}/builds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Builds
         * @description Requires the `stacks-view` capability.
         */
        get: operations["getStackBuilds"];
        put?: never;
        /**
         * Create Build
         * @description Requires the `stacks-manage` capability.
         */
        post: operations["createStackBuild"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/stacks/{stackId}/builds/{buildId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Stack Build
         * @description Requires the `stacks-view` capability.
         */
        get: operations["getStackBuild"];
        put?: never;
        post?: never;
        /**
         * Delete Stack Build
         * @description Requires the `stacks-manage` capability.
         */
        delete: operations["deleteStackBuild"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/stacks/{stackId}/builds/{buildId}/build-log": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Stack Build Log
         * @description Requests the log generated during a stack build.
         *     The response log includes log entries for the stack build process,
         *     but individual image build logs must be fetched from the
         *     generated image. When a stack build fails due to an invalid spec,
         *     the incorrect spec, with populated variables,
         *     will be included in the log.
         *
         *     Requires the `stacks-view` capability.
         *
         */
        get: operations["getStackBuildLog"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/stacks/{stackId}/builds/{buildId}/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Stack Build Job
         * @description Requires the `stacks-manage` capability.
         */
        post: operations["createStackBuildJob"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/virtual-machines": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Virtual Machines
         * @description Requires the `virtual-machines-view` capability.
         */
        get: operations["getVirtualMachines"];
        put?: never;
        /**
         * Create Virtual Machine
         * @description Requires the `virtual-machines-deploy` capability.
         */
        post: operations["createVirtualMachine"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/virtual-machines/{virtualMachineId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Virtual Machine
         * @description Retrieves a single virtual machine by ID.
         *
         *     Requires the `virtual-machines-view` capability.
         *
         */
        get: operations["getVirtualMachine"];
        put?: never;
        post?: never;
        /**
         * Delete Virtual Machine
         * @description Requires the `virtual-machines-manage` capability.
         */
        delete: operations["deleteVirtualMachine"];
        options?: never;
        head?: never;
        /**
         * Update Virtual Machine
         * @description Updates the specified virtual machine.
         *
         *     Requires the `virtual-machines-manage` capability.
         *
         */
        patch: operations["updateVirtualMachine"];
        trace?: never;
    };
    "/v1/virtual-machines/{virtualMachineId}/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Virtual Machine Job
         * @description Used to perform different actions on a virtual machine.
         *
         *     Requires the following capabilities based on the task:
         *     `start`: `virtual-machines-manage`
         *     `stop`: `virtual-machines-manage`
         *     `reconfigure`: `virtual-machines-manage`
         *     `rootpw.change`: `virtual-machines-manage`
         *     `ip.allocate`: `virtual-machines-manage`
         *     `ip.unallocate`: `virtual-machines-manage`
         *
         */
        post: operations["createVirtualMachineJob"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/virtual-machines/images/base": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Virtual Machine Base Images
         * @description Retrieves the list of available base images for virtual machines provided by Cycle.
         *
         */
        get: operations["getVirtualMachineBaseImages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/virtual-machines/{virtualMachineId}/sos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Generate Virtual Machine Serial-Over-SSH Credentials
         * @description Generates credentials for connecting to the serial console of a virtual machine via SSH.
         *
         *     Requires the `virtual-machines-console` capability.
         *
         */
        get: operations["generateVirtualMachineSosCredentials"];
        put?: never;
        post?: never;
        /**
         * Expire Serial-Over-SSH Credentials
         * @description Instantly expires any serial-over-SSH credentials generated for this virtual machine.
         *
         *     Requires the `virtual-machines-console` capability.
         *
         */
        delete: operations["expireVirtualMachineSosCredentials"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/virtual-machines/ssh-keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Virtual Machine SSH Keys
         * @description Requires the `virtual-machines-ssh-keys-manage` capability.
         */
        get: operations["getVirtualMachineSshKeys"];
        put?: never;
        /**
         * Create Virtual Machine SSH Key
         * @description Requires the `virtual-machines-ssh-keys-manage` capability.
         */
        post: operations["createVirtualMachineSshKey"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/virtual-machines/ssh-keys/{sshKeyId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Virtual Machine SSH Key
         * @description Retrieves a single virtual machine SSH key by ID.
         *
         *     Requires the `virtual-machines-ssh-keys-manage` capability.
         *
         */
        get: operations["getVirtualMachineSshKey"];
        put?: never;
        post?: never;
        /**
         * Delete Virtual Machine SSH Key
         * @description Requires the `virtual-machines-ssh-keys-manage` capability.
         */
        delete: operations["deleteVirtualMachineSshKey"];
        options?: never;
        head?: never;
        /**
         * Update Virtual Machine SSH Key
         * @description Updates the specified virtual machine SSH key.
         *
         *     Requires the `virtual-machines-ssh-keys-manage` capability.
         *
         */
        patch: operations["updateVirtualMachineSshKey"];
        trace?: never;
    };
    "/v1/virtual-machines/{virtualMachineId}/available-ips": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Available IP Addresses
         * @description Lists IP addresses that can be assigned to the specified virtual machine.
         *
         *     For an IP address to be assignable to a virtual machine, it must follow these rules:
         *
         *     1. The IP address must be assigned to the same location as the virtual machine.
         *     2. The IP address must be from a server that supports the `gateway` service.
         *     3. The IP address must be in the `available` state.
         *
         *     Requires the `virtual-machines-view` capability.
         *
         */
        get: operations["getAvailableIps"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/utils/resource/lookup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Look up a resource identifier.
         * @description Given a (base64'd) resource identifier string (i.e. `cluster:production/env:abc`), returns the ID of the matching resource.
         *     If more than one resource matches the identifier, or no resource matches the identifier, this endpoint will return an error.
         *     Given identifiers are NOT unique, you may need to be more specific to target the exact identifier.
         *
         */
        get: operations["lookupIdentifier"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/utils/components/lookup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Look up Cycle components (resources such as containers, servers, etc) based on their ID.
         *     Useful when the IDs are known ahead of time - all relevant items can be fetched in a single request.
         *      */
        post: operations["lookupComponents"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * @description A capability that a user or API key that represents what an API key or a user can do.
         * @enum {string}
         */
        Capability: "api-keys-manage" | "apionly-jobs-view" | "apionly-notifications-listen" | "autoscale-groups-manage" | "autoscale-groups-view" | "billing-credits-view" | "billing-invoices-pay" | "billing-invoices-view" | "billing-methods-manage" | "billing-services-manage" | "billing-services-view" | "containers-backups-manage" | "containers-backups-view" | "containers-console" | "containers-deploy" | "containers-instances-migrate" | "containers-lock" | "containers-ssh" | "containers-manage" | "containers-view" | "containers-functions-trigger" | "containers-volumes-manage" | "containers-volumes-view" | "dns-certs-view" | "dns-manage" | "dns-view" | "environments-deployments-manage" | "environments-manage" | "environments-scopedvariables-manage" | "environments-scopedvariables-view" | "environments-services-manage" | "environments-view" | "environments-vpn" | "environments-vpn-manage" | "hubs-delete" | "hubs-integrations-manage" | "hubs-integrations-view" | "hubs-invites-manage" | "hubs-invites-send" | "hubs-members-manage" | "hubs-members-view" | "hubs-roles-manage" | "hubs-roles-view" | "hubs-usage-view" | "hubs-update" | "hubs-auditlog-view" | "images-manage" | "images-sources-manage" | "images-sources-view" | "images-view" | "ips-manage" | "servers-console" | "servers-decommission" | "servers-login" | "clusters-manage" | "clusters-view" | "servers-provision" | "servers-manage" | "servers-view" | "monitor-manage" | "monitor-view" | "pipelines-manage" | "pipelines-trigger" | "pipelines-view" | "sdn-networks-manage" | "sdn-networks-view" | "security-manage" | "security-view" | "stacks-builds-deploy" | "stacks-builds-manage" | "stacks-manage" | "stacks-view" | "virtual-machines-view" | "virtual-machines-manage" | "virtual-machines-deploy" | "virtual-machines-console" | "virtual-machines-lock" | "virtual-machines-ssh-keys-manage";
        /**
         * Error
         * @description The Cycle API uses standard HTTP response codes to indicate the success or failure of an API request. Codes in the `2xx` range indicate success. Codes in the `4xx` range indicate a request that failed due to input, and codes in the `5xx` range indicate an error on Cycle's part (rare).
         *     There are two types of error response objects. Errors with authentication are formatted to follow the OAuth spec, while all other errors follow the same convention. If you're using one of our API Libraries, they will standardize OAuth errors to fit the general convention.
         */
        Error: {
            /**
             * @description The HTTP response code.
             * @enum {integer}
             */
            status?: 400 | 401 | 403 | 404 | 409 | 415 | 422 | 500 | 501 | 502 | 503 | 504;
            /**
             * @description A Cycle standard error code.
             * @enum {string}
             */
            code?: "400.invalid-syntax" | "401.auth-invalid" | "401.auth-expired" | "401.no-cookie" | "401.unauthorized-application" | "403.mismatch" | "403.wrong-hub" | "403.not-ready" | "403.expired" | "403.restricted-portal" | "403.permissions" | "403.invalid-ip" | "403.invalid-state" | "403.not-approved" | "403.not-allowed" | "403.platform-disabled" | "403.2fa-required" | "403.2fa-failed" | "403.new-application-capabilities" | "403.tier-restricted" | "404.hub" | "404.hub.invitation" | "404.hub.integration" | "404.hub.role" | "404.sdn.network" | "404.environment" | "404.environment.scoped-variable" | "404.hub.api-key" | "404.uri" | "404.provider" | "404.stack" | "404.community.thread" | "404.community.thread.reply" | "404.survey" | "404.survey-response" | "404.notification" | "404.stack-build" | "404.image" | "404.image.source" | "404.image.build-log" | "404.job" | "404.billing.order" | "404.billing.service" | "404.billing.credit" | "404.billing.invoice" | "404.billing.tier" | "404.billing.support" | "404.billing.payment-method" | "404.billing.promo-code" | "404.node" | "404.infrastructure.location" | "404.infrastructure.ips.pool" | "404.infrastructure.provider" | "404.infrastructure.server" | "404.infrastructure.cluster" | "404.infrastructure.autoscale.group" | "404.infrastructure.model" | "404.monitoring.logs.analytics.rule" | "404.account" | "404.container" | "404.container.backup" | "404.vpn.account" | "404.instance" | "404.pipeline" | "404.pipeline.run" | "404.pipeline.key" | "404.dns.zone" | "404.dns.record" | "404.cluster" | "404.platform-build" | "404.cycleos-build" | "404.email-verification" | "404.hub.membership" | "404.announcement" | "404.ha-service.session" | "404.virtual-machine" | "404.virtual-machine.ssh-key" | "404.sales.lead" | "404.stack.build-log" | "409.duplicate-found" | "415.invalid-content-type" | "422.missing-argument" | "422.invalid-argument" | "422.invalid-input" | "422.max-exceeded" | "422.not-compatible" | "422.already-exists" | "429.rate-limiting" | "500.database" | "500.database-insert" | "500.database-update" | "500.database-remove" | "500.jobd" | "500.unknown" | "500.dev" | "500.email" | "503.not-ready" | "503.not-enabled" | "503.dependency-not-enabled" | "504.not-available";
            /** @description The main text describing the error. */
            title?: string;
            /** @description A more detailed description of the error. */
            detail?: string;
            /** @description A [JSON pointer](https://tools.ietf.org/html/rfc6901/) describing the source of an error. */
            source?: string;
            /** @description Additional entries on the error object to provide extra details. */
            extra?: {
                /** @description If the error occured because of a lack of permission (403), this will list the specific capability that the Role/API Key is missing. */
                capability?: components["schemas"]["Capability"];
            };
        };
        /**
         * ErrorEnvelope
         * @description An error response.
         */
        ErrorEnvelope: {
            error: components["schemas"]["Error"];
            data: null;
        };
        /**
         * ID
         * Format: objectid
         * @description A 24 character hex string used to identify a unique resource.
         */
        ID: string;
        /**
         * DateTime
         * Format: date-time
         */
        DateTime: string;
        /**
         * State
         * @description Information regarding the current state of the resource.
         */
        State: {
            changed: components["schemas"]["DateTime"];
            /** @description An error, if any, that has occurred for this resource. */
            error?: {
                /** @description Details about the error that has occurred. */
                message?: string;
                /** @description The timestamp of when the error was encountered. */
                time?: components["schemas"]["DateTime"];
            };
        };
        /** AccountState */
        AccountState: {
            /**
             * @description The current state of the account.
             * @enum {string}
             */
            current: "new" | "live" | "suspending" | "purging" | "deleting" | "deleted";
        } & components["schemas"]["State"];
        /**
         * Account
         * @description An object representing information about the currently logged-in user.
         */
        Account: {
            id: components["schemas"]["ID"];
            /** @description The first and last name associated with the Account. */
            name: {
                /** @description The first name of the Account owner. */
                first: string;
                /** @description The last name of the Account owner. */
                last: string;
            };
            /** @description Information about the email address associated with the Account. */
            email: {
                /** @description The email address. */
                address: string;
                /** @description If true, the email has been verified and the Account is active. */
                verified: boolean;
                /** @description The date the email was added to the Account */
                added: components["schemas"]["DateTime"];
            };
            /** @description Two factor auth verification information. */
            two_factor_auth?: {
                /** @description A boolean representing if the Account has verified with two-factor authentication. */
                verified: boolean;
            } | null;
            /** @description Indicates whether or not Cycle employees have authorization to log in to this Account in a support capacity. */
            allow_support_login?: boolean;
            state: components["schemas"]["AccountState"];
            /**
             * AccountEvents
             * @description A collection of timestamps for each event in the Account's lifetime.
             */
            events: {
                /** @description The timestamp of when the image was created. */
                created: components["schemas"]["DateTime"];
                /** @description The timestamp of when the image was updated. */
                updated: components["schemas"]["DateTime"];
                /** @description The timestamp of when the image was deleted. */
                deleted: components["schemas"]["DateTime"];
                /** @description The timestamp of when the Account was last accessed. */
                last_login: components["schemas"]["DateTime"];
            };
        };
        /**
         * TaskStep
         * @description A step for a given job task.
         */
        TaskStep: {
            /** @description A short description of the step. */
            caption: string;
            /** @description A more verbose description. */
            description: string;
            /** @description A timestamp for when the step started. */
            started: components["schemas"]["DateTime"];
            /** @description A timestamp for when the step completed. */
            completed: components["schemas"]["DateTime"];
        };
        /**
         * JobDescriptor
         * @description A Job Descriptor is returned on success by API calls that create jobs. It contains the action that was requested, as well as the ID of the job created as a result.
         */
        JobDescriptor: {
            /** @description The action that was taken. */
            action: string;
            /** @description Contains some basic information about the job associated with this task. */
            job?: {
                /** @description The ID of the job */
                id: string;
                /** @description Describes if the job has been accepted */
                accepted: boolean;
                /** @description Describes the queue this job is a part of. */
                queue: string;
                schedule: components["schemas"]["DateTime"];
                parallel: {
                    sub_queue?: string | null;
                    tasks: boolean;
                };
                tasks: {
                    /** @description A short description of the task. */
                    caption: string;
                    /** @description The API function called. */
                    header: string;
                    /** @description An array of job task steps. */
                    steps: components["schemas"]["TaskStep"][] | null;
                    /** @description Input information used for the job tasks. */
                    input: {
                        [key: string]: unknown;
                    };
                }[] | null;
            };
        };
        /**
         * AccountLoginInfo
         * @description Details of an Account login.
         */
        AccountInfo: {
            id: components["schemas"]["ID"];
            /** @description The IP of the request used during login. */
            ip: string;
        };
        /**
         * AccountLogin
         * @description A record of an Account login.
         */
        AccountLogin: {
            id: components["schemas"]["ID"];
            account: components["schemas"]["AccountInfo"];
            /** @description A timestamp of the time the login occurred. */
            time: components["schemas"]["DateTime"];
            /**
             * @description The type of login mechanism used.
             * @enum {string}
             */
            type: "password" | "employee";
            /** @description A boolean where true reflects that the login was successful. */
            success: boolean;
        };
        /**
         * AccountEmployeeLogin
         * @description A login event where the authentication mechanism was an employee login.
         */
        AccountEmployeeLogin: components["schemas"]["AccountLogin"] & {
            /** @enum {string} */
            type?: "employee";
            /** @description If this was an employee login, contains information about who accessed the Account. */
            employee?: {
                id: components["schemas"]["ID"];
                ip: string;
            };
        };
        /**
         * AccountPasswordLogin
         * @description A login event where password was the authentication type.
         */
        AccountPasswordLogin: components["schemas"]["AccountLogin"] & {
            /** @enum {string} */
            type?: "password";
        };
        /**
         * HubID
         * @description The unique ID of the Hub this resource was created in.
         */
        HubID: string;
        /** MembershipState */
        MembershipState: {
            /**
             * @description The current state of the membership.
             * @enum {string}
             */
            current: "pending" | "accepted" | "declined" | "revoked" | "deleted";
        } & components["schemas"]["State"];
        /**
         * HubMembershipInvitation
         * @description Information about a hub membership invitation.
         */
        Invitation: {
            /** @description Information about the origin account of the invitation. */
            sender: {
                id: components["schemas"]["ID"];
                /** @description The account type. */
                type: string;
            };
            /** @description The email address for the invitations recipient. */
            recipient: string;
            /**
             * InvitationEvents
             * @description A collection of timestamps for each event in the invitation's lifetime.
             */
            events: {
                /** @description The timestamp of when the invitation was created. */
                created: components["schemas"]["DateTime"];
                /** @description The timestamp of when the invitation was updated. */
                updated: components["schemas"]["DateTime"];
                /** @description The timestamp of when the invitation was deleted. */
                deleted: components["schemas"]["DateTime"];
                /** @description The timestamp of when the invitation was accepted. */
                accepted: components["schemas"]["DateTime"];
                /** @description The timestamp of when the invitation was declined. */
                declined: components["schemas"]["DateTime"];
                /** @description The timestamp of when the invitation was revoked. */
                revoked: components["schemas"]["DateTime"];
            };
        };
        /**
         * HubMembership
         * @description A membership resource that is scoped to an individual hub.
         */
        HubMembership: {
            id: components["schemas"]["ID"];
            /** @description An ID for the account associated with the given membership. */
            account_id?: string;
            hub_id: components["schemas"]["HubID"];
            /**
             * MembershipEvents
             * @description A collection of timestamps for each event in the membership's lifetime.
             */
            events: {
                /** @description The timestamp of when the membership was created. */
                created?: components["schemas"]["DateTime"];
                /** @description The timestamp of when the membership was updated. */
                updated?: components["schemas"]["DateTime"];
                /** @description The timestamp of when the membership was deleted. */
                deleted?: components["schemas"]["DateTime"];
                /** @description The timestamp of when the membership was accepted. */
                joined: components["schemas"]["DateTime"];
            };
            role_id: components["schemas"]["ID"];
            /**
             * HubMembershipPreferences
             * @description Preference information set by the user for the membership.
             */
            preferences?: {
                portal: {
                    notifications: {
                        jobs: {
                            apikey_alerts: boolean;
                        };
                    };
                };
                email: {
                    notificaitons?: {
                        server: {
                            new: boolean | null;
                            offline: boolean | null;
                        };
                    };
                };
            };
            state: components["schemas"]["MembershipState"];
            invitation: components["schemas"]["Invitation"];
            /** @description If this member is a Cycle employee, their employee ID will be listed here. Cycle employee accounts do not consume a "membership" for a given hub. */
            cycle?: {
                /** @description The ID of the employee this membership is associated with. */
                employee_id: string;
            };
        };
        /**
         * Events
         * @description Describes the date and time at which certain events occurred in the lifetime of this resource.
         */
        Events: {
            [key: string]: components["schemas"]["DateTime"];
        };
        /**
         * PublicAccount
         * @description Publicly available information about an account
         */
        PublicAccount: {
            /**
             * AccountName
             * @description The first and last name of an account owner
             */
            name: {
                /** @description The first name of the account owner */
                first: string;
                /** @description The last name of the account owner */
                last: string;
            };
            /**
             * AccountEmail
             * @description Email information for an account
             */
            email: {
                /** @description The email address associated with the account. */
                address: string;
            };
            /**
             * AccountId
             * @description Id information for an account
             */
            id: string;
            two_factor_auth: {
                /** @description Indicates if the user account has two factor authentication enabled for log in. */
                verified: boolean;
            };
            events?: components["schemas"]["Events"] & {
                last_login?: components["schemas"]["DateTime"];
            };
        };
        /**
         * Identifier
         * @description A human-readable identifier used to refer to a resource, where using the official ID may be inconvenient.
         *     The identifier is automatically tokenized from the name/relevant field of the resource if one is not provided. For example, a container named "My Container" will
         *     have the identifier of `my-container` and is automatically created by the platform.
         *
         *     The identifier does not have to be unique.
         *
         */
        Identifier: string;
        /**
         * CreatorScope
         * @description The creator scope is embedded in resource objects to describe who created them
         */
        CreatorScope: {
            id: components["schemas"]["ID"];
            /** @enum {string} */
            type: "account" | "environment" | "platform" | "platform-pipeline" | "employee" | "api-key" | "visitor";
        };
        /**
         * HubEvents
         * @description A collection of timestamps for each event in the hub's lifetime.
         */
        HubEvents: {
            /** @description The timestamp of when the hub was created. */
            created: components["schemas"]["DateTime"];
            /** @description The timestamp of when the hub was updated. */
            updated: components["schemas"]["DateTime"];
            /** @description The timestamp of when the hub was deleted. */
            deleted: components["schemas"]["DateTime"];
            /** @description The timestamp of when the hub had the first converted. */
            converted?: components["schemas"]["DateTime"];
            /** @description The timestamp of when the hub had the first provider added. */
            first_order?: components["schemas"]["DateTime"];
            /** @description The timestamp of when the hub had the first provider added. */
            first_provider?: components["schemas"]["DateTime"];
            /** @description The timestamp of when the hub had the first_server deployed. */
            first_server?: components["schemas"]["DateTime"];
            /** @description The timestamp of when the hub had the first environment deployed. */
            first_environment?: components["schemas"]["DateTime"];
            /** @description The timestamp of when the hub had the first image deployed. */
            first_image?: components["schemas"]["DateTime"];
            /** @description The timestamp of when the hub had the first container deployed. */
            first_container?: components["schemas"]["DateTime"];
        };
        /** HubState */
        HubState: {
            /**
             * @description The current state of the hub.
             * @enum {string}
             */
            current: "new" | "configuring" | "live" | "inactive" | "deleting" | "deleted";
        } & components["schemas"]["State"];
        /**
         * HubSecurity
         * @description Security options for a hub.
         */
        HubSecurity: {
            /** @description When true, any API call for this hub from an account that does not have two-factor auth enabled will fail with a 403 error. */
            force_2fa: boolean;
        };
        /**
         * HubWebhooks
         * @description Hub related webhooks. When supplied, the given webhook will be called with a payload any time one of these events occurs.
         */
        HubWebhooks: {
            /** @description A webhook that is called any time a server is deployed to this hub. The payload will be a `Server` object. */
            server_deployed: string | null;
            /** @description A webhook that is called any time a server in this hub is deleted. The payload will be a `Server` object. */
            server_deleted: string | null;
        };
        /**
         * BillingTerm
         * @description Information about a billing term.
         */
        Term: {
            /** @description A timestamp describing the start of a billing term. */
            start: components["schemas"]["DateTime"];
            /** @description A timestamp describing the end of a billing term. */
            end: components["schemas"]["DateTime"];
            /** @description The term renewal period. */
            renew: ("once" | "monthly" | "yearly") | null;
        };
        /**
         * HubBillingContact
         * @description The contact to whom invoices are billed.
         */
        HubBillingContact: {
            /** @description The name of the billing contact. */
            name: string;
            /** @description The legal business name of the billing contact. */
            legal_business_name: string;
            /** @description The legal tax ID of the billing contact, if applicable. */
            tax_id: string;
        };
        /**
         * HubBillingProfile
         * @description A billing profile for a given hub.
         */
        HubBillingProfile: {
            term: components["schemas"]["Term"];
            /** @description A boolean where true represents this account being approved to use a prepaid card for billing transactions. */
            allow_prepaid?: boolean;
            /** @description A boolean where true represents invoices have been paused on this hub for one reason or another. */
            pause_invoices: boolean;
            /** @description A boolean where true means this billing is disabled on this hub. */
            disable?: boolean;
            /** @description Information about the plan associated with this hub. */
            plans: {
                /** @description An ID referencing the pricing tier applied to this hub. */
                tier_id: string | null;
                /** @description An ID referencing the support plan applied to this hub. */
                support_id: string | null;
            };
            /** @description An array of email addresses to whom the billing invoices will be sent to. If left empty, they will be sent to the owner of this hub. */
            emails: string[] | null;
            contact?: components["schemas"]["HubBillingContact"];
        };
        /**
         * HubsMeta
         * @description A list of meta fields that can be applied to a hub.
         */
        HubMeta: {
            membership?: components["schemas"]["HubMembership"];
        };
        /**
         * Hub
         * @description A hub resource.
         */
        Hub: {
            id: components["schemas"]["ID"];
            /** @description A human readable slugged identifier for this hub. */
            identifier: components["schemas"]["Identifier"];
            /** @description A name for the hub. */
            name: string;
            creator: components["schemas"]["CreatorScope"];
            events: components["schemas"]["HubEvents"];
            state: components["schemas"]["HubState"];
            security: components["schemas"]["HubSecurity"];
            webhooks: components["schemas"]["HubWebhooks"];
            billing: components["schemas"]["HubBillingProfile"] | null;
            meta?: components["schemas"]["HubMeta"];
        };
        /**
         * RoleMeta
         * @description A list of meta fields that can be applied to a role.
         */
        RoleMeta: {
            counts?: {
                members: number;
                api_keys: number;
            };
        };
        /**
         * Role
         * @description A Role is a custom combination of platform-level capabilities, allowing for fully customizable role-based access controls across the platform.
         */
        Role: {
            id: string;
            name?: string | null;
            /** @description The Role marked as root has full moderation control over all Roles. */
            root: boolean;
            /** @description A reference to the original identifier of the default Role this Role was built from.  A value of null means it is a fully custom Role. */
            default?: components["schemas"]["Identifier"] | null;
            /** @description An integer between 0 and 10 that indicates the Role hierarchy. An account can only edit a Role that is less than their rank. The 'owner' Role is rank 10. */
            rank: number;
            identifier: components["schemas"]["Identifier"];
            creator: components["schemas"]["CreatorScope"];
            /** @description The list of platform level capabilities assigned to this Role. */
            capabilities: {
                /** @description If true, the Role has all capabilities. */
                all: boolean;
                specific: components["schemas"]["Capability"][];
            };
            /** @description Custom user-defined properties for storing extra information on the Role. Not utilized by Cycle. */
            extra?: {
                [key: string]: string;
            };
            hub_id: components["schemas"]["HubID"];
            state: {
                /**
                 * @description The current state of the Role.
                 * @enum {string}
                 */
                current: "live";
            } & components["schemas"]["State"];
            /**
             * RoleEvents
             * @description Timestamps for each event in the Role's lifetime.
             */
            events: {
                /** @description The timestamp of when the Role source was created. */
                created: components["schemas"]["DateTime"];
                /** @description The timestamp of when the Role source was updated. */
                updated: components["schemas"]["DateTime"];
                /** @description The timestamp of when the Role source was deleted. */
                deleted: components["schemas"]["DateTime"];
            };
            meta?: components["schemas"]["RoleMeta"];
        };
        /**
         * AccountMembershipsIncludes
         * @description A resource that is associated with an account's membership.
         */
        AccountMembershipIncludes: {
            /** @description A record with an ID mapped to a public account for the account that sent this memberships initial invite. */
            senders?: {
                /** @description A record with an ID mapped to a public account. */
                accounts?: {
                    [key: string]: components["schemas"]["PublicAccount"];
                };
            };
            /** @description A record with an ID mapped to a hub resource. */
            hubs?: {
                [key: string]: components["schemas"]["Hub"];
            };
            /** @description A map of Roles relevant to this Hub Membership, keyed by the Role ID. */
            roles?: {
                [key: string]: components["schemas"]["Role"];
            };
            /** @description A map of Roles relevant to this Hub Membership, keyed by the Role ID. */
            "roles:identifiers"?: {
                [key: string]: components["schemas"]["ID"];
            };
        };
        /**
         * HubMembershipsIncludes
         * @description A resource that is associated with a hub membership.
         */
        HubMembershipIncludes: {
            /** @description A record with an ID mapped to a public account for the account that sent this memberships initial invite. */
            senders?: {
                /** @description A record with an ID mapped to a public account. */
                accounts?: {
                    [key: string]: components["schemas"]["PublicAccount"];
                };
            };
            /** @description A record with an ID mapped to a public account. */
            accounts?: {
                [key: string]: components["schemas"]["PublicAccount"];
            };
            /** @description A record with an ID mapped to a hub resource. */
            hubs?: {
                [key: string]: components["schemas"]["Hub"];
            };
            /** @description A map of Roles relevant to this Hub Membership, keyed by the Role ID. */
            roles?: {
                [key: string]: components["schemas"]["Role"];
            };
            /** @description A map of Roles relevant to this Hub Membership, keyed by the Role ID. */
            "roles:identifiers"?: {
                [key: string]: components["schemas"]["ID"];
            };
        };
        /** TwoFactorAuthSetup */
        TwoFactorAuthSetup: {
            qr: string;
            secret: string;
        };
        /** TwoFactorAuthRecovery */
        TwoFactorAuthRecovery: {
            recovery_codes: string[];
            totp_passcode: string;
        };
        /**
         * AnnoucementUpdate
         * @description An update to an Announcement.
         */
        AnnouncementUpdate: {
            id: components["schemas"]["ID"];
            /** @description The text describing the update to the announcement. */
            message: string;
            creator: components["schemas"]["CreatorScope"];
            /** @description A timestamp of when the update took place. */
            time: components["schemas"]["DateTime"];
        };
        /**
         * Announcement
         * @description An announcement from the Cycle team.
         */
        Announcement: {
            id: components["schemas"]["ID"];
            /** @description A description of the event being announced. */
            title: string;
            /** @description A description of the announcement */
            description: string;
            updates: components["schemas"]["AnnouncementUpdate"][];
            affected_integrations?: string[];
            affected_services?: string[];
            creator: components["schemas"]["CreatorScope"];
            state: {
                /**
                 * @description The current state of the method.
                 * @enum {string}
                 */
                current: "live" | "deleting" | "deleted";
            } & components["schemas"]["State"];
            /**
             * @description The priority or severity of the announcement.
             * @enum {string}
             */
            priority: "notice" | "low" | "medium" | "high" | "severe";
            /**
             * AnnouncementEvents
             * @description A collection of timestamps for each event in the announcement's lifetime.
             */
            events: {
                /** @description The timestamp of when the announcement was created. */
                created: components["schemas"]["DateTime"];
                /** @description The timestamp of when the announcement was updated. */
                updated: components["schemas"]["DateTime"];
                /** @description The timestamp of when the announcement was deleted. */
                deleted: components["schemas"]["DateTime"];
                /** @description The timestamp of when the announcement was resolved. */
                resolved: components["schemas"]["DateTime"];
            };
        };
        /**
         * BillingCredit.yml
         * @description Information about a billing credit.
         */
        Credit: {
            id: components["schemas"]["ID"];
            hub_id: components["schemas"]["HubID"];
            /** @description Some extra information about the billing credit. */
            description: string;
            /** @description The account the credit was issued to. */
            account_id: string;
            /** @description The amount of credit. */
            amount: number;
            /** @description The amount of the credit that remains after being applied to invoices. */
            amount_remaining: number;
            /** @description Information on when the billing credit expires. */
            expires: {
                /** @description A timestamp of when the billing credit expires. */
                date?: components["schemas"]["DateTime"];
            } | null;
            /**
             * BillingCreditEvents
             * @description A collection of timestamps for each event in the billing order's lifetime.
             */
            events: {
                /** @description The timestamp of when the billing order was created. */
                created: components["schemas"]["DateTime"];
                /** @description The timestamp of when the billing order was updated. */
                updated: components["schemas"]["DateTime"];
                /** @description The timestamp of when the billing order was deleted. */
                deleted: components["schemas"]["DateTime"];
            };
            state: {
                /**
                 * @description The current state of the credit.
                 * @enum {string}
                 */
                current: "new" | "live" | "expired";
            } & components["schemas"]["State"];
        };
        /**
         * BillingSummary
         * @description A billing summary.
         */
        BillingSummary: {
            /** @description The ID of the billing service, the summary pertains to. */
            service_id: string;
            /** @description The billing summary title. */
            title: string;
            /**
             * @description The plan type.
             * @enum {string}
             */
            type: "tier" | "support";
            term: components["schemas"]["Term"];
            /** @description 1/10th of a cent (mills). */
            price: number;
            /** @description 1/10th of a cent (mills). */
            discount: number;
        };
        /**
         * PaymentGateway
         * @description The type of payment gateway used.
         * @enum {string}
         */
        PaymentGateway: "stripe";
        /**
         * BillingRefund
         * @description A billing refund.
         */
        Refund: {
            id: components["schemas"]["ID"];
            /** @description A timestamp for the payment. */
            time: components["schemas"]["DateTime"];
            /** @description Some information about the payment refund. */
            description: string;
            /** @description 1/10th of a cent. */
            amount: number;
            gateway: components["schemas"]["PaymentGateway"];
        };
        /**
         * PaymentResult
         * @description A billing payment result.
         */
        PaymentResult: {
            /**
             * @description The status of a payment.
             * @enum {string}
             */
            status: "success" | "processing" | "cancelled" | "error";
            /** @description A description of the error that took place when processing the payment. */
            error: string;
        };
        /**
         * BillingPayment
         * @description A billing payment.
         */
        Payment: {
            id: components["schemas"]["ID"];
            /** @description A timestamp for the payment. */
            time: components["schemas"]["DateTime"];
            /** @description Some information about the payment. */
            description: string;
            /** @description 1/10th of a cent. */
            amount: number;
            /** @description 1/10th of a cent. */
            amount_refunded: number;
            refunds: components["schemas"]["Refund"][];
            /** @description The ID associated with the billing method used. */
            method_id?: string;
            result: components["schemas"]["PaymentResult"];
            gateway: components["schemas"]["PaymentGateway"];
        };
        /**
         * BillingInvoiceCredit
         * @description A billing credit for a specific invoice.
         */
        InvoiceCredit: {
            id: components["schemas"]["ID"];
            /** @description Credit associated with an invoice. */
            associated_credit: {
                id: components["schemas"]["ID"];
                /** @description The amount of the credit. */
                amount: number;
            };
            /** @description A timestamp for when the invoice credit was created. */
            time: components["schemas"]["DateTime"];
            /** @description A description of the invoice credit. */
            description: string;
            /** @description The amount of credit for the invoice. */
            amount: number;
        };
        /**
         * LateFee
         * @description A late fee, applied to an invoice.
         */
        LateFee: {
            id: components["schemas"]["ID"];
            /** @description A timestamp of when the late fee was created. */
            time: components["schemas"]["DateTime"];
            /** @description A description of the late fee. */
            description: string;
            /** @description 1/10th of a cent. */
            amount: number;
        };
        /** InvoiceState */
        InvoiceState: {
            /**
             * @description The current state of the invoice.
             * @enum {string}
             */
            current: "new" | "billing" | "billed" | "processing" | "partially-paid" | "awaiting-funds" | "paid" | "refunding" | "refunded" | "crediting" | "credited" | "voiding" | "voided" | "uncollectible";
        } & components["schemas"]["State"];
        /**
         * InvoiceMeta
         * @description A list of meta fields that can be applied to a invoice.
         */
        InvoiceMeta: {
            /** @description The amount due for a given invoice. */
            due?: number;
        };
        /**
         * BillingInvoice
         * @description Information about a billing invoice.
         */
        Invoice: {
            id: components["schemas"]["ID"];
            hub_id: components["schemas"]["HubID"];
            billing_contact?: components["schemas"]["HubBillingContact"] | null;
            /** @description A boolean where true represents the invoice is approved for collection. */
            approved: boolean;
            services?: components["schemas"]["BillingSummary"][] | null;
            payments?: components["schemas"]["Payment"][] | null;
            credits?: components["schemas"]["InvoiceCredit"][] | null;
            late_fees?: components["schemas"]["LateFee"][] | null;
            /** @description The amount in charges generated through the licesnse agreement + overages for the billing period covered by the invoice. */
            charges: number;
            /** @description A timestamp of when the invoice is due to be paid. */
            due?: components["schemas"]["DateTime"];
            /** @description A timestamp of when the invoice is overdue. */
            overdue?: components["schemas"]["DateTime"];
            /** @description The number of failed payment attempts for the invoice. */
            failed_payment_attempts: number;
            /**
             * BillingOrderEvents
             * @description A collection of timestamps for each event in the billing order's lifetime.
             */
            events: {
                /** @description The timestamp of when the billing order was created. */
                created: components["schemas"]["DateTime"];
                /** @description The timestamp of when the billing order was updated. */
                updated: components["schemas"]["DateTime"];
                /** @description The timestamp of when the billing order was deleted. */
                deleted: components["schemas"]["DateTime"];
                /** @description The timestamp of when the billing order billed. */
                billed: components["schemas"]["DateTime"];
                /** @description The timestamp of when the billing order paid. */
                paid: components["schemas"]["DateTime"];
                /** @description The timestamp of when the billing order payment was attempted. */
                payment_attempt?: components["schemas"]["DateTime"];
                /** @description The timestamp of when the billing order credited. */
                credited: components["schemas"]["DateTime"];
                /** @description The timestamp of when the billing order voided. */
                voided: components["schemas"]["DateTime"];
            };
            state: components["schemas"]["InvoiceState"];
            meta?: components["schemas"]["InvoiceMeta"];
        };
        /**
         * BillingMethodAddress
         * @description Address information for a given billing method.
         */
        Address: {
            /** @description The country this billing method is associated with. */
            country: string;
            /** @description The zip code this billing method is associated with. */
            zip: string;
        };
        /**
         * StripeCreditCard
         * @description A payment method that utilizes a credit card via Stripe.
         */
        StripeCreditCard: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "stripe-credit-card";
            details: {
                /** @description The name on the credit card. */
                name: string;
                /** @description The brand of card. */
                brand: string;
                expiration: {
                    /** @description The month the billing method expires. */
                    month: number;
                    /** @description The year the billing method expires. */
                    year: number;
                };
                /** @description The last 4 digits of the card. */
                last_4: string;
            };
        };
        /**
         * StripeUsBankAcct
         * @description A payment method that utilizes a US bank account via Stripe.
         */
        StripeUsBankAcct: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "stripe-us-bank-acct";
            details: {
                /** @description The name of the owner of the bank account. */
                name: string;
                /** @description The last 4 numbers of the bank account number. */
                last_4: string;
            };
        };
        /**
         * MethodSource
         * @description The underlying source (credit card, bank account, etc) used by a payment method.
         */
        MethodSource: components["schemas"]["StripeCreditCard"] | components["schemas"]["StripeUsBankAcct"];
        /**
         * Mandate
         * @description Information about the creator of a payment method for compliance purposes.
         */
        Mandate: {
            /** @description The date when the mandate was accepted */
            accepted: components["schemas"]["DateTime"];
            /** @description The IP address at the time the mandate was accepted. */
            ip: string;
            /** @description The user agent of the browser when the mandate was accepted. */
            user_agent: string;
            /** @description The email associated with the account that accepted the mandate */
            email: string;
        };
        /**
         * BillingMethod
         * @description Information about a billing method, usable to pay invoices.
         */
        Method: {
            id: components["schemas"]["ID"];
            /** @description A name for the billing method. */
            name: string;
            /** @description A boolean where true represents this billing method is set to primary for a given hub. */
            primary: boolean;
            address: components["schemas"]["Address"];
            creator: components["schemas"]["CreatorScope"];
            source: components["schemas"]["MethodSource"];
            mandate?: components["schemas"]["Mandate"];
            state: {
                /**
                 * @description The current state of the method.
                 * @enum {string}
                 */
                current: "live" | "pending-verification" | "deleting" | "deleted";
            } & components["schemas"]["State"];
            /**
             * CreditCardEvents
             * @description A collection of timestamps for each event in the credit card's lifetime.
             */
            events: {
                /** @description The timestamp of when the credit card was created. */
                created: components["schemas"]["DateTime"];
                /** @description The timestamp of when the credit card was updated. */
                updated: components["schemas"]["DateTime"];
                /** @description The timestamp of when the credit card was deleted. */
                deleted: components["schemas"]["DateTime"];
            };
        };
        /**
         * UserScope
         * @description A type of creator and a matching identifier.
         */
        UserScope: {
            /**
             * @description The type of user that created the resource.
             * @enum {string}
             */
            type: "account" | "environment" | "platform" | "platform-pipeline" | "employee" | "api-key" | "visitor";
            id: components["schemas"]["ID"];
        };
        /**
         * BillingAmount
         * @description An object holding information about term and amount that relates to a specific billing component.
         */
        BillingAmount: {
            /** @description 1/10th of a cent. */
            mills: number;
            /**
             * @description The length of the term.
             * @enum {string}
             */
            term: "once" | "monthly" | "yearly";
        };
        /**
         * ItemPlan
         * @description Information for an item's plan.
         */
        ServiceItem: {
            /** @description Information about the support component of the billing item. */
            support?: {
                id: components["schemas"]["ID"];
                /** @description The support contract name. */
                name: string;
                /** @description The price of the support contract (monthly). */
                price: number;
            };
            /** @description Information about the tier component of the billing item. */
            tier?: {
                id: components["schemas"]["ID"];
                /** @description The support contract name. */
                name: string;
                price: components["schemas"]["BillingAmount"];
            };
        };
        /**
         * OrderItem
         * @description Describes a billing item
         */
        OrderItem: {
            id: string;
            service: components["schemas"]["ServiceItem"];
            description: string;
            price: components["schemas"]["BillingAmount"];
            discount?: {
                id: string;
                amount: components["schemas"]["BillingAmount"];
                expires: components["schemas"]["DateTime"];
            };
            net_price: number;
        };
        /** OrderState */
        OrderState: {
            /**
             * @description The current state of the zone.
             * @enum {string}
             */
            current: "new" | "processed" | "deleting" | "deleted";
        } & components["schemas"]["State"];
        /**
         * Order
         * @description An order is a resource that describes a billing order
         */
        Order: {
            hub_id: string;
            creator: components["schemas"]["UserScope"];
            promo_code_id: string | null;
            term: components["schemas"]["Term"];
            approved: boolean;
            items: components["schemas"]["OrderItem"][];
            total_price: number;
            /**
             * OrderEvents
             * @description A collection of timestamps for each event in the orders lifetime.
             */
            events: {
                /** @description The timestamp of when the order expires. */
                expires: components["schemas"]["DateTime"];
            };
            state: components["schemas"]["OrderState"];
        };
        /**
         * PromoCode
         * @description A billing promo code.
         */
        PromoCode: {
            /** @description The promo "code". */
            code: string;
            expires: components["schemas"]["DateTime"];
            /** @description The amount of credit the promo code offers. */
            credit: {
                amount?: components["schemas"]["BillingAmount"];
                expires?: {
                    interval: string;
                    number: number;
                };
            } | null;
            /** PromoCodeState */
            state: {
                /**
                 * @description The current state of the promo code.
                 * @enum {string}
                 */
                current: "live" | "deleted";
            } & components["schemas"]["State"];
        };
        /**
         * PromoCodeIncludes
         * @description A resource that is associated with a promo code.
         */
        PromoCodeInclude: {
            [key: string]: components["schemas"]["PromoCode"];
        };
        /** BillingOrderIncludes */
        BillingOrderIncludes: {
            promo_codes?: components["schemas"]["PromoCodeInclude"];
        };
        /**
         * BillingOrder
         * @description Information about an order.
         */
        BillingOrder: {
            id: components["schemas"]["ID"];
            hub_id: components["schemas"]["HubID"];
            creator: components["schemas"]["CreatorScope"];
            /** @description An ID associated with a promo code used with the order. */
            promo_code_id: string | null;
            term: components["schemas"]["Term"];
            /** @description A boolean where true represents the order is approved to be paid by the user. */
            approved: boolean;
            items: components["schemas"]["ServiceItem"][];
            /** @description 1/10th of a cent. */
            total_price: number;
            /**
             * BillingOrderEvents
             * @description A collection of timestamps for each event in the billing order's lifetime.
             */
            events: {
                /** @description The timestamp of when the billing order was created. */
                created: components["schemas"]["DateTime"];
                /** @description The timestamp of when the billing order was updated. */
                updated: components["schemas"]["DateTime"];
                /** @description The timestamp of when the billing order was deleted. */
                deleted: components["schemas"]["DateTime"];
                /** @description The timestamp of when the billing order expires. */
                expires: components["schemas"]["DateTime"];
            };
            state: {
                /**
                 * @description The current state of the order.
                 * @enum {string}
                 */
                current: "new" | "processed" | "deleting" | "deleted";
            } & components["schemas"]["State"];
        };
        /**
         * SupportPlanFeatures
         * @description Information about billing support plan features.
         */
        SupportPlanFeatures: {
            /** @description A boolean where true indicates the contract includes support for engineering. */
            engineering_support: boolean;
            /** @description A boolean where true represents the contract has an uptime SLA agreement. */
            uptime_sla: boolean;
            /** @description The time in which this support contract guarantees response time. */
            guaranteed_response_time: string | null;
        };
        /**
         * SupportPlan
         * @description Information about a billing support plan.
         */
        SupportPlan: {
            /** @description The name of the support plan. */
            name: string;
            price: components["schemas"]["BillingAmount"];
            /** @description Information about the billing support plan that describes the plan. */
            description: string;
            features: components["schemas"]["SupportPlanFeatures"];
            /** @description A boolean where true represents the plan is a long term contract, not just month to month. */
            contract: boolean;
            /** @description This returns true if it shows up. */
            default: boolean;
        };
        /**
         * BillingServers
         * @description An object holding information about servers included in Billing tier
         */
        BillingServers: {
            /** @description The number of servers included in the tier price */
            included: number;
            /** @description A boolean indicating if there is a hard server limit on the tier */
            hard_cap: boolean;
            /** @description An object describing the additonal cost of servers exceeding the included server count */
            additional: {
                mills: number;
                /** @enum {string} */
                term: "once" | "monthly" | "yearly";
            };
        };
        /**
         * BillingMembers
         * @description An object holding information about members included in Billing tier
         */
        BillingMembers: {
            /** @description The number of members included in the tier price */
            included: number;
            /** @description A boolean indicating if there is a hard member limit on the tier */
            hard_cap: boolean;
            /** @description An object describing the additonal cost of members exceeding the included member count */
            additional: {
                mills: number;
                /** @enum {string} */
                term: "once" | "monthly" | "yearly";
            };
        };
        /**
         * BillingRam
         * @description An object holding information about servers included in Billing tier
         */
        BillingRam: {
            /** @description The GB of image storage included in tier */
            included_gb: number;
            /** @description Additional cost for image storage exceeding included_gb */
            additional_gb: {
                mills: number;
                /** @enum {string} */
                term: "once" | "monthly" | "yearly";
            };
            /** @description A boolean indicating if there is a hard limit on the image storage */
            hard_cap: boolean;
        };
        /**
         * BillingImageStorage
         * @description An object holding information about servers included in Billing tier
         */
        BillingImageStorage: {
            /** @description The GB of image storage included in tier */
            included_gb: number;
            /** @description Additional cost for image storage exceeding included_gb */
            additional_gb: {
                mills: number;
                /** @enum {string} */
                term: "once" | "monthly" | "yearly";
            };
            /** @description A boolean indicating if there is a hard limit on the image storage */
            hard_cap: boolean;
        };
        /**
         * BillingBuilds
         * @description An object holding information about servers included in Billing tier
         */
        BillingBuilds: {
            parallel: number;
            /** @description The number of CPU Cores availiable for builds */
            cpu_cores: number;
            /** @description The amount of RAM availiable for builds */
            ram_gb: number;
            /** @description The maximum number of builds processed per day */
            max_daily_builds: number | null;
        };
        /**
         * TierPlan
         * @description A TierPlan object describes the attributes of a subscription tier
         */
        TierPlan: {
            id: string;
            name: string;
            code: string;
            generation: number;
            usable: boolean;
            price: components["schemas"]["BillingAmount"];
            servers: components["schemas"]["BillingServers"];
            members: components["schemas"]["BillingMembers"];
            max_nodes: number | null;
            max_members: number | null;
            advanced_features: {
                gpu: boolean;
                ial: boolean;
                deployments: boolean;
                autoscale: boolean;
                geodns: boolean;
                provider_multi_account: boolean;
            };
            max_daily_api_requests: number | null;
            ram: components["schemas"]["BillingRam"];
            image_storage: components["schemas"]["BillingImageStorage"];
            builds: components["schemas"]["BillingBuilds"];
            hidden: boolean;
            /** @description An array of hub IDs with access to the tier. */
            hubs?: components["schemas"]["Identifier"][] | null;
            description: string;
        };
        /**
         * AssociatedDiscount
         * @description Information about a billing discount.
         */
        AssociatedDiscount: {
            id: components["schemas"]["ID"];
            amount: components["schemas"]["BillingAmount"];
            /** @description A timestamp of when the discount expires. */
            expires: components["schemas"]["DateTime"];
        };
        /** BillingServiceState */
        BillingServiceState: {
            /**
             * @description The current state of the billing service.
             * @enum {string}
             */
            current: "active";
        } & components["schemas"]["State"];
        /**
         * BillingService
         * @description Information about billing service.
         */
        Service: {
            id: components["schemas"]["ID"];
            hub_id: components["schemas"]["HubID"];
            creator: components["schemas"]["CreatorScope"];
            /** @description Billing service title. */
            title: string;
            order: components["schemas"]["Order"];
            item: components["schemas"]["ServiceItem"];
            discount: components["schemas"]["AssociatedDiscount"];
            price: components["schemas"]["BillingAmount"];
            term: components["schemas"]["Term"];
            /**
             * BillingServiceEvents
             * @description A collection of timestamps for each event in the billing service's lifetime.
             */
            events: {
                /** @description The timestamp of when the billing service was created. */
                created: components["schemas"]["DateTime"];
                /** @description The timestamp of when the billing service was updated. */
                updated: components["schemas"]["DateTime"];
                /** @description The timestamp of when the billing service was deleted. */
                deleted: components["schemas"]["DateTime"];
                /** @description The timestamp of when the billing service was last billed. */
                last_billed: components["schemas"]["DateTime"];
            };
            state: components["schemas"]["BillingServiceState"];
        };
        /**
         * BillingOverage
         * @description Information about billing overage.
         */
        Overage: {
            term: components["schemas"]["Term"];
            /** @description Used for gen 1 pricing. */
            ram: {
                /** @description The number of hours of overage. */
                gb_hours: number;
                /** @description The cost of the overage. */
                cost: number;
            };
        };
        /** IPNet */
        IPNet: {
            /** @description The IP address. */
            ip: string;
            /** @description The CIDR notation, describing the range of IP addresses. */
            cidr: string;
        };
        /**
         * LegacyNetwork
         * @description Legacy network information for an environment.
         */
        LegacyNetwork: {
            /** @description The IPv4 subnet id. */
            subnet: number;
            /** @description IPv4 information available from environments using legacy networking. */
            ipv4?: components["schemas"]["IPNet"] | null;
        };
        /**
         * ContainerEnvironmentSummary
         * @description A summary of supplemental environment and network information specific to a container.
         */
        ContainerEnvironmentSummary: {
            id: components["schemas"]["ID"];
            /** @description The cluster this environment is associated with. */
            cluster: string;
            /** @description The private network subnet ID for this container and its instances. */
            container_subnet?: string | null;
            ipv6?: components["schemas"]["IPNet"] | null;
            legacy?: components["schemas"]["LegacyNetwork"] | null;
        };
        /**
         * ContainerExtension
         * @description Reference to container functionality that is added by the Cycle platform.
         */
        ContainerExtension: {
            /** @enum {string} */
            identifier: "virtual-machine-v1";
            id?: components["schemas"]["ID"];
        } | null;
        /**
         * ServiceContainerIdentifier
         * @description Identifier of a service Container within an Environment.
         * @enum {string}
         */
        ServiceContainerIdentifier: "discovery" | "vpn" | "loadbalancer" | "scheduler" | "gateway";
        /**
         * ContainerImageSummary
         * @description A summary of the image this container was created from.
         */
        ImageSummary: {
            id: components["schemas"]["ID"] | null;
            extension: components["schemas"]["ContainerExtension"] | null;
            /** @description If a service container, the identifier specifying which service it is. */
            service: components["schemas"]["ServiceContainerIdentifier"] | null;
        };
        /**
         * ContainerStackSummary
         * @description A summary of the stack this container was created format.
         */
        StackSummary: {
            id?: components["schemas"]["ID"];
            /** @description The ID of the stack build this container is associated with. */
            build_id?: string;
            /** @description The container identifier, usually the key to the container section of a stack file. */
            identifier?: string;
        };
        /**
         * ContainerNetwork
         * @description Network configuration for a container.
         */
        ContainerNetwork: {
            /**
             * @description The public network settings for the given container
             * @enum {string}
             */
            public: "enable" | "egress-only" | "disable";
            /** @description The hostname for the given container. */
            hostname: string;
            /** @description An array of port mappings for the container. */
            ports?: string[];
        };
        /**
         * DeploymentStrategyName
         * @enum {string}
         */
        DeploymentStrategyName: "resource-density" | "high-availability" | "first-available" | "node" | "edge" | "manual" | "function";
        /**
         * Duration
         * @description A string signifying a duration of time. Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h", "d", "w", "y".
         */
        Duration: string;
        /**
         * ContainerDeploy
         * @description Deployment configuration for the given container.
         */
        ContainerDeploy: {
            /** @description The number of initial desired instances for a given container. */
            instances: number;
            /** @description The deployment strategy to use when scaling the given container. */
            strategy?: components["schemas"]["DeploymentStrategyName"];
            /** @description Configuration options for containers using the 'function' deployment strategy. */
            function?: {
                /** @description The maximum number of instances that Cycle can pre-allocate (includes auto-scaled instances). */
                max_pool_size?: number | null;
                /** @description For each shard (scheduler), the maximum number of tasks it can run in parallel. */
                max_shard_concurrency?: number | null;
                /** @description The maximum amount of time a function instance can run before timing out. */
                max_runtime?: components["schemas"]["Duration"] | null;
                /** @description The maximum amount of time Cycle will wait for an instance to be available. */
                max_queue_time?: components["schemas"]["Duration"] | null;
            } | null;
            stateful?: {
                options?: {
                    use_base_hostname?: boolean | null;
                } | null;
            };
            /** @description Settings that give more granular control over deployment targets and conditions. */
            constraints?: {
                /** @description Constraint settings related to which nodes an instance can be deployed to. */
                node?: {
                    /** @description Lists of server tags that formally declair servers that match the criteria for deployment. */
                    tags: {
                        /** @description A list of tags where a server matching any tags from the list is qualified as a deployment target. */
                        any?: string[];
                        /** @description A list of tags where a server matching all tags from the list is the only scenario where the server is qualified as a deployment target. */
                        all?: string[];
                    };
                };
                secrets?: string[];
            };
            /** @description Configuration for what to do during container shutdown. */
            shutdown?: {
                /** @description How long the platform will wait for a container to stop gracefully. */
                graceful_timeout?: components["schemas"]["Duration"] | null;
                /** @description Process signal sent to the container process. */
                signals?: ("SIGTERM" | "SIGINT" | "SIGUSR1" | "SIGUSR2" | "SIGHUP" | "SIGQUIT")[] | null;
            };
            /** @description Configurations for container startup. */
            startup?: {
                /** @description How long the platform will wait before sending the start signal to the given container. */
                delay?: components["schemas"]["Duration"];
            };
            /** @description Configurations for container updates. */
            update?: {
                /** @description When set, Cycle will pick a random time from `0 - this duration`, and stagger the instances so they all start at different times (up to the time specified here). */
                stagger?: components["schemas"]["Duration"];
            };
            /** @description Configurations for container restart events. */
            restart?: {
                /**
                 * @description Policy for what should happen in the event of a container dying.
                 * @enum {string}
                 */
                condition: "always" | "never" | "failure";
                /** @description How long the platform will wait before trying to restart the container. */
                delay: components["schemas"]["Duration"];
                /** @description The amount of times the platform will attempt the restart policies. */
                max_attempts: number;
            };
            /** @description Configuration for determining the health of a container. */
            health_check?: {
                /** @description The command that will be run to verify the health of the container. */
                command: string;
                /** @description The number of times the platform will retry the command before marking the container unhealthy. */
                retries: number;
                /** @description How long to wait before performing an initial health check when the instance starts. The `state.health.healthy` field of the instance will be `null`` until the first check is performed. */
                delay: components["schemas"]["Duration"] | null;
                /** @description How long to wait between restarts. */
                interval: components["schemas"]["Duration"];
                /** @description How long before a health check attempt times out. */
                timeout: components["schemas"]["Duration"];
                /** @description A boolean where `true` represents the desire for a container to restart if unhealthy. */
                restart: boolean;
            };
            /** @description Configuration settings for container telemetery reporting. */
            telemetry?: {
                /** @description How long telemetry data should be retained. */
                retention: components["schemas"]["Duration"];
                /** @description The duration between samples. */
                interval: components["schemas"]["Duration"];
                /** @description A boolean where true disables all telemetry reporting for this container. */
                disable: boolean;
            };
        };
        /**
         * ScaleThresholdMetricRam
         * @description Describes the RAM threshold at which scaling will occur.
         */
        ScaleThresholdMetricRam: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "ram";
            details: {
                /** @description The target average RAM usage of all instances of this container. Going above this threshold will trigger a scaling event. This threshold must be greater than 25MB. */
                usage: string;
            };
        };
        /**
         * ScaleThresholdMetricCpu
         * @description Describes the CPU threshold at which scaling will occur
         */
        ScaleThresholdMetricCpu: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "cpu";
            details: {
                utilization: number;
            };
        };
        /**
         * WebhookURL
         * @description A URL describing the destination Cycle should send a POST webhook payload to.
         *
         */
        WebhookURL: string;
        /**
         * ScaleThresholdMetricCustom
         * @description A custom threshold for defining a scaling event.
         */
        ScaleThresholdMetricCustom: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "custom";
            details: {
                webhook: components["schemas"]["WebhookURL"];
            };
        };
        /**
         * ScaleThresholdMetricNetworkConnections
         * @description Describes the network connections threshold at which scaling will occur
         */
        ScaleThresholdMetricNetworkConnections: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "network-connections";
            details: {
                connections: number;
            };
        };
        /**
         * ScaleThresholdMetricNetworkRequests
         * @description Describes the network requests threshold at which scaling will occur
         */
        ScaleThresholdMetricNetworkRequests: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "network-requests";
            details: {
                requests: number;
            };
        };
        /**
         * ScaleThresholdMetricNetworkThroughput
         * @description Describes the network throughput threshold at which scaling will occur
         */
        ScaleThresholdMetricNetworkThroughput: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "network-throughput";
            details: {
                private: boolean;
                /** @description The limit (maximum) amount of throughput each instance of the given container can use before triggering a scaling event. */
                bandwidth: string;
            };
        };
        /**
         * ScaleThresholdMetric
         * @description Discriminated union describing the different types of scaling threshold and their respective details
         */
        ScaleThresholdMetric: components["schemas"]["ScaleThresholdMetricRam"] | components["schemas"]["ScaleThresholdMetricCpu"] | components["schemas"]["ScaleThresholdMetricNetworkConnections"] | components["schemas"]["ScaleThresholdMetricNetworkRequests"] | components["schemas"]["ScaleThresholdMetricNetworkThroughput"] | components["schemas"]["ScaleThresholdMetricCustom"];
        /**
         * ContainerScale
         * @description Network configuration for a container.
         */
        ContainerScale: {
            /** @description The autoscaling group describes which servers should be deployed */
            autoscale_group: string | null;
            /** @description Describes how many instances should be running */
            instances: {
                /** @description Maximum additional instances the auto-scaler will run at any time */
                max: number;
                /** @description Minimum number of instances per server */
                max_server: number;
                /** @description Minimum amount of time an instance will live */
                min_ttl: components["schemas"]["Duration"];
            };
            /** @description Duration in which the auto-scaler will watch for changes */
            window: components["schemas"]["Duration"];
            /** @description An array of rules that dictate when a scaling event will be triggered */
            thresholds: components["schemas"]["ScaleThresholdMetric"][];
        };
        /**
         * SeccompRule
         * @description Rules for controlling Linux seccomp inside a container.
         */
        SeccompRule: {
            capabilities?: {
                includes?: string;
                excludes?: string;
            };
            /** @description LinuxSyscall is used to match a syscall in Seccomp */
            syscall?: {
                names: string[];
                action: string;
                errnoRet?: number;
                args?: {
                    index: number;
                    value: number;
                    valueTwo?: number;
                    op: string;
                }[];
            };
        };
        /**
         * ContainerRuntime
         * @description Runtime configurations for a given container.
         */
        ContainerRuntime: {
            /** @description A command that will be run in place of the images defined startup command. */
            command?: {
                /** @description System path for the command. */
                path?: string | null;
                /** @description Arguments to pass to the command. */
                args?: string | null;
            } | null;
            /** @description Namespaces the given container will have access to. */
            namespaces?: ("ipc" | "pid" | "uts" | "network" | "mount" | "user" | "cgroup")[];
            /** @description A record of environment variables for the given container. */
            environment_vars?: {
                [key: string]: string;
            };
            /** @description Selecting this option will give this container full permissions on the server. This is not recommended and increases the likelihood of your server being compromised. */
            privileged: boolean;
            /** @description A list of linux kernel capabilites for the given container. */
            capabilities?: ("CAP_CHOWN" | "CAP_FSETID" | "CAP_DAC_OVERRIDE" | "CAP_FOWNER" | "CAP_SETFCAP" | "CAP_SETGID" | "CAP_SETUID" | "CAP_KILL" | "CAP_MKNOD" | "CAP_NET_BIND_SERVICE" | "CAP_NET_RAW" | "CAP_AUDIT_WRITE" | "CAP_SYS_CHROOT" | "CAP_SETPCAP" | "CAP_DAC_READ_SEARCH" | "CAP_NET_ADMIN" | "CAP_NET_BROADCAST" | "CAP_SYS_ADMIN" | "CAP_SYS_MODULE" | "CAP_SYS_NICE" | "CAP_SYS_PACCT" | "CAP_SYS_PTRACE" | "CAP_SYS_RAWIO" | "CAP_SYS_RESOURCE" | "CAP_SYS_BOOT" | "CAP_SYS_TIME" | "CAP_SYS_TTY_CONFIG" | "CAP_SYSLOG" | "CAP_AUDIT_CONTROL" | "CAP_AUDIT_READ" | "CAP_IPC_LOCK" | "CAP_IPC_OWNER" | "CAP_LINUX_IMMUTABLE" | "CAP_MAC_ADMIN" | "CAP_MAC_OVERRIDE" | "CAP_BLOCK_SUSPEND" | "CAP_LEASE" | "CAP_WAKE_ALARM")[];
            /** @description Configure the working directory for the given container. */
            workdir?: string;
            /** @description A record of sysctl fields and values for a given container. */
            sysctl?: {
                [key: string]: string;
            };
            /** @description A record of rlimits and their values. */
            rlimits?: {
                [key: string]: {
                    /** @description The hard limit for the rlimit. */
                    hard?: number;
                    /** @description The soft limit for the rlimit. */
                    soft?: number;
                };
            };
            seccomp?: {
                disable?: boolean;
                rules?: components["schemas"]["SeccompRule"][];
            } | null;
            host?: {
                expose_proc?: boolean | null;
            } | null;
            rootfs?: {
                /** @description Enabling this option will set the containers filesystem to readonly. Volumes associated with the container will not be affected by this. */
                readonly?: boolean;
            };
            devices?: {
                /** @description The size of the shared host memory device (/dev/shm). */
                shm_size?: string | null;
            } | null;
        };
        /**
         * ContainerResources
         * @description Configuration settings for the resource allocations and limits of a given container.
         */
        ContainerResources: {
            /** @description Configurations settings related to CPU usage. */
            cpu: {
                /** @description A share represents 1/10th of the available compute time on a single thread. */
                shares?: {
                    /** @description The limit (maximum) amount of shares each instance of a container can use. */
                    limit: number;
                    /** @description The reserve (allocation) number of shares for each instance of a given container. */
                    reserve: number;
                };
                cpus?: string;
            };
            /** @description Configuration settings for limits and reserves of RAM resources for the given container. */
            ram: {
                /** @description The limit (maximum) amount of RAM each instance of the given container can use. */
                limit?: string;
                /** @description The reserve (allocation) of RAM given to each instance of the container. */
                reserve?: string;
            };
        };
        /**
         * HybridIdentifier
         * @description Either a resource ID (objectid - i.e. 651586fca6078e98982dbd90) or a resource Identifier (human-readable)
         */
        HybridIdentifier: string;
        /**
         * ContainerIntegrations
         * @description Configuration settings for integrations with a given container.
         */
        ContainerIntegrations: {
            /** @description Webhooks that can be set for specific event reporting and advanced container configurations. */
            webhooks?: {
                /** @description Container events that can be configured to report to a webhook. */
                events?: {
                    /** @description A webhook to hit when a container deploy event happens. */
                    deploy?: string;
                    /** @description A webhook to hit when a container start event happens. */
                    start?: string;
                    /** @description A webhook to hit when a container stop event happens. */
                    stop?: string;
                };
                /** @description An endpoint that the platform will react out to with a get request.  This endpoint serves a partial container config which can modify `runtime`, `resources`, and `integrations` configurations. */
                config?: string;
            };
            /** @description Inject remotely hosted files into container instances at runtime. */
            files?: {
                /** @description The http endpoint that is hosting the files to be used. */
                source: string;
                /** @description The path in the container for these files to be injected. */
                destination: string;
            }[];
            /** @description Configuration settings to embed a TLS certificate in the container. */
            lets_encrypt?: {
                /** @description Path where the `certificate.cert` will be saved. */
                certificate_path?: string;
                /** @description Path where the `certificate.chain` will be saved. */
                chain_path?: string;
                /** @description Path where the `certificate.key` will be saved. */
                key_path?: string;
                /** @description Path where the `certificate.bundle` will be saved. */
                bundle_path?: string;
                /** @description File path where any remaining certificate files will be stored. */
                additional_certs_path?: string;
            } | null;
            /** @description Automated backups configuration for the given container. */
            backups?: {
                integration_id?: components["schemas"]["HybridIdentifier"];
                /** @description Configuration settings for each backup. */
                backup: {
                    /** @description The command to run for the backup. */
                    command: string;
                    /** @description How long the backup will attempt to run before timing out. */
                    timeout?: components["schemas"]["Duration"] | null;
                    /** @description A cron string that configures how often the backup will run. */
                    cron_string?: string;
                };
                /** @description Configuration settings for restoring from a backup. */
                restore: {
                    /** @description The command to run for restoring from a backup. */
                    command: string;
                    /** @description The time in seconds for the restore to attempt to complete before timing out. */
                    timeout?: string & components["schemas"]["Duration"];
                } | null;
                /**
                 * @description How long the platform will keep backups. Default is 1 year.
                 * @default 365d
                 */
                retention: components["schemas"]["Duration"] | null;
            };
            shared_file_systems?: {
                [key: string]: {
                    writable: boolean;
                    mount_point: string;
                };
            } | null;
            /** @description When enabled, allows more customization to be applied to logging for the container. */
            logs?: {
                /** @description When enabled, log drain allows logs to be exported to a third party service. */
                drain?: {
                    /** @description The URL to the third party logging service where logs will be sent. */
                    url: string;
                    /** @description The format Cycle will use to send the logs. */
                    format?: ("ndjson-headers" | "ndjson-raw") | null;
                } | null;
            } | null;
        };
        /**
         * ContainerConfig
         * @description A container configuration.
         */
        Config: {
            network: components["schemas"]["ContainerNetwork"];
            deploy: components["schemas"]["ContainerDeploy"];
            scale?: components["schemas"]["ContainerScale"];
            runtime?: components["schemas"]["ContainerRuntime"];
            resources?: components["schemas"]["ContainerResources"];
            integrations?: components["schemas"]["ContainerIntegrations"];
        };
        /**
         * Version
         * @description Version can be any string, but if it begins with a "v", semantic version will be enforced. A [Semantic Version](https://semver.org/) string. Follows the format vMAJOR.MINOR.PATCH-build.
         *
         */
        Version: string;
        /**
         * Deployment
         * @description A logical grouping of containers inside of an Environment. Facilitates zero-downtime deployments by separating multiple versions of the same application within an environment.
         *
         *     If a container is a member of a deployment, it can only resolve containers in that same deployment, or containers NOT in a deployment. If a container is NOT a member of a deployment, it can resolve all containers in the environment.
         *
         */
        Deployment: {
            /** @description A version string representing the deployment.
             *      */
            version: components["schemas"]["Version"];
        };
        /**
         * ContainerVolume
         * @description Configuration settings for container volumes.
         */
        ContainerVolume: {
            /** @description A boolean where true marks the volume as read only. */
            read_only: boolean;
            /** @description Indicates that the volume will be used as unformatted block storage.
             *      */
            block_device: boolean;
            /** @description Configuration for settings local to the container filesystem. */
            local?: {
                /** @description The maximum size this volume can grow to. Container volumes on Cycle are thinly provisioned, meaning this isn't an allocation - the volume will only use the space it needs up to this size. */
                max_size: string;
                /** @description A boolean where true signifies using the largest drive over 2TB for the target server. */
                storage_pool?: boolean;
            };
            /** @description The mountpoint path for the container. */
            destination: string;
            /** @description Configuration settings for remotely accessing the container volume. */
            remote_access?: {
                /** @description A boolean where true represents this container volume being open to remote access connections over SFTP. */
                enable: boolean;
                ips?: string[];
                /** @description Call out to a webhook to authenticate usernames/passwords if an organization manages their own accounts */
                webhook?: string;
                /** @description Password configuration settings for the remote access of the container volume. */
                password: {
                    /**
                     * @description The hashing algorithm used to has the password.
                     * @enum {string}
                     */
                    algorithm: "raw" | "sha512" | "md5";
                    /** @description The raw or hashed password. */
                    data: string;
                } | null;
            };
        };
        /**
         * VolumeSummary
         * @description A summary of relevant volume information.
         */
        VolumeSummary: {
            id: components["schemas"]["ID"];
            /** @description A unique hash for the given volume. */
            hash: string;
            config: components["schemas"]["ContainerVolume"];
        };
        /** ContainerState */
        ContainerState: {
            /**
             * @description The current state of the container.
             * @enum {string}
             */
            current: "new" | "starting" | "running" | "function" | "stopping" | "stopped" | "deleting" | "deleted";
            /**
             * @description The desired state of the container.
             * @enum {string}
             */
            desired?: "new" | "starting" | "running" | "function" | "stopping" | "stopped" | "deleting" | "deleted";
        } & components["schemas"]["State"];
        /**
         * ResourceCountSummary
         * @description A summary of resources by state
         * @example {
         *       "state": {
         *         "new": 0,
         *         "starting": 0,
         *         "running": 5,
         *         "stopping": 0,
         *         "deleting": 0,
         *         "deleted": 0
         *       },
         *       "total": 5,
         *       "available": 5
         *     }
         */
        StateCountSummary: {
            /**
             * CountsByState
             * @description A count of this resource, grouped by state.
             */
            state: {
                [key: string]: number;
            };
            /** @description The total number of this resource */
            total: number;
            /** @description The total number of this resource available, less any deleted ones. */
            available: number;
        };
        /**
         * DNSRecordTypes
         * @description DNS record types the platform supports.
         */
        RecordTypes: {
            /** @description A DNS A record */
            a?: {
                /** @description The IPv4 address that the A record should map to. */
                ip: string;
            };
            /** @description A DNS AAAA record */
            aaaa?: {
                /** @description The IPv6 address that the AAAA record should map to. */
                ip: string;
            };
            /** @description A DNS CNAME record */
            cname?: {
                /** @description The domain string the record resolves to. */
                domain: string;
            };
            /** @description A DNS NS record */
            ns?: {
                /** @description The domain of the nameserver for this record. */
                domain: string;
            };
            /** @description A DNS MX record */
            mx?: {
                /** @description The priority setting for this mx record. */
                priority: number;
                /** @description The domain this mx record points to. */
                domain: string;
            };
            /** @description A DNS TXT record. */
            txt?: {
                /** @description The value for this TXT record. */
                value: string;
            };
            /** @description A DNS ALIAS record. */
            alias?: {
                /** @description The domain string returned from the DNS server when this alias record is requested. */
                domain: string;
            };
            /** @description A DNS SRV record. */
            srv?: {
                /** @description Teh weight configured for this record - breaks ties for priority. */
                weight: number;
                /** @description The priority for the record. */
                priority: number;
                /** @description The port number for the service. */
                port: number;
                /** @description The domain for the record. */
                domain: string;
            };
            /** @description A DNS CAA record. */
            caa?: {
                /** @description The ASCII string that represents the identifier of the property represented by the record. */
                tag: string;
                /** @description The value associated with the tag. */
                value: string;
            };
            /** @description A LINKED record is a record special to Cycle.  It represents a URL that points to a specific container or deployment of a container, however the IP address mapping in handled automatically by the platform. */
            linked?: {
                /** @description Features associated with this record. */
                features: {
                    /** @description TLS properties of the record. */
                    tls: {
                        /** @description A boolean, where true represents this record will be paired with a TLS certificate automatically maintained by the platform. */
                        enable: boolean;
                    };
                    /** @description Options for the GeoDNS LINKED record feature. */
                    geodns: {
                        /** @description If enabled, Cycle will attempt to match inbound requests to the closest load balancer geographically. */
                        enable: boolean;
                    };
                    wildcard?: {
                        /**
                         * @description If enabled, subdomains will resolve for wildcard records. If disabled, only the primary domain will resolve.
                         * @default false
                         */
                        resolve_sub_domains: boolean;
                    } | null;
                };
            } & ({
                /** @description The ID of the container this record is related to. */
                container_id?: string;
            } | {
                /** @description Information about the deployment this record points to. */
                deployment?: {
                    /** @description The ID of the environment with the deployment tag mapping we want to reference. */
                    environment_id: components["schemas"]["ID"];
                    /** @description Describes which container and which tagged deployment this record should target. */
                    match: {
                        /** @description The identifier of the container in the environment this record should point to. */
                        container: components["schemas"]["Identifier"];
                        /** @description The deployment tag that this record should point to. The tags are set on the root of an environment and map to a deployment version. */
                        tag?: components["schemas"]["Identifier"] | null;
                    };
                } | null;
            });
        };
        /**
         * RecordTlsCertificate
         * @description A TLS certificate assigned to a DNS record.
         */
        RecordTlsCertificate: {
            id: components["schemas"]["ID"];
            generated: components["schemas"]["DateTime"];
            /** @description A value where true represents that the certificate is using a shared wildcard cert. */
            wildcard_child: boolean;
            /** @description If true, this certificate was manually supplied, and was not auto-generated by the platform. */
            user_supplied: boolean;
            /** @description The time that this certificate expires. */
            expires?: components["schemas"]["DateTime"];
        };
        /** DNSRecordState */
        RecordState: {
            /**
             * @description The current state of the record.
             * @enum {string}
             */
            current: "pending" | "live" | "deleting" | "deleted";
        } & components["schemas"]["State"];
        /**
         * DNSRecord
         * @description A DNS record.
         */
        Record: {
            id: components["schemas"]["ID"];
            hub_id: components["schemas"]["HubID"];
            creator: components["schemas"]["CreatorScope"];
            /** @description A unique identifier for the zone */
            zone_id: string;
            /** @description A name used for the record, where `@` signifies the use of the root domain. */
            name: string;
            /** @description The name of the record and the origin as a domain name. */
            resolved_domain: string;
            type: components["schemas"]["RecordTypes"];
            /** @description TLS features for the record. */
            features: {
                certificate: components["schemas"]["RecordTlsCertificate"] | null;
            } | null;
            state: components["schemas"]["RecordState"];
            events: components["schemas"]["Events"];
        };
        /** IpState */
        IpState: {
            /**
             * @description The current state of the IP.
             * @enum {string}
             */
            current: "assigning" | "assigned" | "releasing" | "available";
        } & components["schemas"]["State"];
        /**
         * IP
         * @description Details about an IP.
         */
        Ip: {
            id: components["schemas"]["ID"];
            hub_id: components["schemas"]["HubID"];
            /**
             * @description The type of IP protocol this IP is.
             * @enum {string}
             */
            kind: "ipv4" | "ipv6";
            /** @description Information about the assignment of this IP. */
            assignment?: {
                container_id: components["schemas"]["ID"];
                instance_id: components["schemas"]["ID"];
                environment_id: components["schemas"]["ID"];
                /** @description Details about the virtual machine this IP is assigned to. */
                virtual_machine?: {
                    id: components["schemas"]["ID"];
                };
            } | null;
            /** @description A unique identifier that associates the IP with an IP pool. */
            pool_id: string;
            /** @description The IP address. */
            address: string;
            /** @description The IP gateway. */
            gateway: string;
            /** @description The CIDR for the IP. */
            cidr: string;
            state: components["schemas"]["IpState"];
        };
        /**
         * ContainersMeta
         * @description A list of meta fields that can be applied to a container.
         */
        ContainersMeta: {
            instances_count?: components["schemas"]["StateCountSummary"];
            domains?: {
                /** @description The fully qualified domain name. */
                fqdn: string;
                record?: components["schemas"]["Record"];
            }[] | null;
            /** @description An array of IP resources. */
            ips?: components["schemas"]["Ip"][];
        };
        /**
         * Container
         * @description Containers are a way to package together your application along with it's dependencies, and run in a resource isolated process. They provide consistency across different hosts, efficiency over traditional hosting methods, and facilitate a micro-service based approach, where each logical piece of your application is split into multiple, easily testable parts (such as API, Backend, Frontend, etc).
         */
        Container: {
            id: components["schemas"]["ID"];
            /** @description A human readable slugged identifier for this container. Usually used as a key in a stack file. */
            identifier: components["schemas"]["Identifier"];
            /** @description A user defined name for the container resource. */
            name: string;
            creator: components["schemas"]["CreatorScope"];
            environment: components["schemas"]["ContainerEnvironmentSummary"];
            hub_id: components["schemas"]["HubID"];
            image: components["schemas"]["ImageSummary"];
            stack?: components["schemas"]["StackSummary"] | null;
            config: components["schemas"]["Config"];
            deployment?: components["schemas"]["Deployment"] | null;
            /** @description The number of instances for a given container. */
            instances: number;
            volumes?: components["schemas"]["VolumeSummary"][];
            /** @description Custom meta data for a given container */
            annotations?: {
                [key: string]: unknown;
            } | null;
            /** @description The role of a given container if it has one. */
            role?: "orchestrator" | null;
            /** @description A boolean where true signifies the container is stateful. */
            stateful: boolean;
            /** @description A boolean where true signifies the container is marked as deprecated. */
            deprecate: boolean;
            /** @description When set to true, prevents this container from being deleted. */
            lock: boolean;
            state: components["schemas"]["ContainerState"];
            /**
             * ContainerEvents
             * @description A collection of timestamps for each event in the container's lifetime.
             */
            events: {
                /** @description The timestamp of when the container was created. */
                created: components["schemas"]["DateTime"];
                /** @description The timestamp of when the container was updated. */
                updated: components["schemas"]["DateTime"];
                /** @description The timestamp of when the container was deleted. */
                deleted: components["schemas"]["DateTime"];
                /** @description The timestamp of when the container was started. */
                started: components["schemas"]["DateTime"];
            };
            meta?: components["schemas"]["ContainersMeta"];
        };
        /**
         * EnvironmentAbout
         * @description Contains details regarding the environment.
         */
        EnvironmentAbout: {
            /** @description A custom description for this environment. */
            description: string;
            /** @description If true, this environment has been marked as a favorite. */
            favorite: boolean;
        };
        /** EnvironmentState */
        EnvironmentState: {
            /**
             * @description The current state of the environment.
             * @enum {string}
             */
            current: "new" | "live" | "cloning" | "deleting" | "deleted";
        } & components["schemas"]["State"];
        /**
         * EnvironmentFeatures
         * @description An object representing specialized features configured for this environment.
         */
        EnvironmentFeatures: {
            /** @description Whether or not legacy networking mode is enabled on this environment. */
            legacy_networking: boolean;
            /** @description The level of monitoring to enable for this environment. There is a cost associated with higher levels of monitoring. */
            monitoring?: {
                /** @enum {string} */
                tier: "limited" | "standard" | "premium" | "enterprise";
            } | null;
        };
        /** HAProxyConfigSet */
        HaProxyConfigSet: {
            /** @description Settings that describe how incoming traffic to the load balancer is handled. */
            frontend: {
                /**
                 * @description The type of traffic expected by the load balancer for this port. Can be either:
                 *      - tcp: Traffic is forwarded without any parsing or additional manipulation.
                 *      - http: Traffic is treated as web traffic. If a LINKED record is configured for a container exposing this port, the domain will be parsed and it will be forwarded to the proper container. This allows multiple services to run on port 80 in the same environment.
                 * @enum {string}
                 */
                mode: "tcp" | "http";
                /** @description The number of simultaneous connections that can be processed at a time. */
                max_connections: number | null;
                /** @description Various options for handling timeouts when communicating with the client. */
                timeouts: {
                    /** @description The number of seconds the load balancer will wait for a response from a client before disconnecting. */
                    client_secs: number | null;
                    /** @description The number of milliseconds the load balancer will wait for a client to send it data when one direction is already closed. This is particularly useful to avoid keeping connections in a waiting state for too long when clients do not disconnect cleanly. */
                    client_fin_ms: number | null;
                    /** @description The number of milliseconds the load balancer will wait for a new HTTP request to start coming after a response was set. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.2-timeout%20http-request) for more information. (`http` mode only) */
                    http_keep_alive_ms: number | null;
                    /** @description The number of milliseconds the load balancer will wait for a complete HTTP request. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.2-timeout%20http-request) for more information. (`http` mode only) */
                    http_request_ms: number | null;
                } | null;
            };
            /** @description Settings related to how the load balancer routes connections to container instances. */
            backend: {
                /**
                 * @description How connections are balanced across your container instances. Can be one of the following:
                 *      - `roundrobin`: Each container instance is used in turns.
                 *      - `static-rr`: Each container instance is used in turns, but is faster than Round Robin at the expense of being less dynamic.
                 *      - `leastconn`: Routes traffic to the instance with the least number of active connections.
                 *      - `first`: Routes traffic to the first available instance.
                 *      - `source`: The same client IP always reaches the same container instance as long as no instance goes down or up.
                 * @enum {string}
                 */
                balance: "roundrobin" | "static-rr" | "leastconn" | "first" | "source";
                /** @description Various options for handling timeouts when communicating with a container instance behind the load balancer. */
                timeouts: {
                    /** @description The number of seconds the load balancer will wait for a response from the container instance. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.2-timeout%20server) for more information. */
                    server_secs: number | null;
                    /** @description The number of milliseconds the load balancer will wait for the server to send data when one direction is already closed. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-timeout%20server-fin) for more information. */
                    server_fin_ms: number | null;
                    /** @description The number of milliseconds the load balancer will wait for a successful connection to a container instance. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-timeout%20connect) for more information. */
                    connect_ms: number | null;
                    /** @description The number of milliseconds the load balancer will hold connections in a queue when the maximum number of connections has been reached. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-timeout%20queue) for more information. */
                    queue_ms: number | null;
                    /** @description The number of milliseconds the load balancer will allow for inactivity on a bidirectional tunnel. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-timeout%20tunnel) for more information. */
                    tunnel_secs: number | null;
                } | null;
            };
        };
        /**
         * HaProxyConfig
         * @description Describes settings that are passed to HAProxy within the load balancer.
         */
        HaProxyConfig: {
            /** @description Settings that are applied to any port that is not overridden in the following ports section. */
            default: components["schemas"]["HaProxyConfigSet"];
            /** @description An object that defines how HAProxy will act on a specific port. The key is a custom port, and the value is the same settings object found under `default` above. */
            ports: {
                [key: string]: components["schemas"]["HaProxyConfigSet"];
            };
        };
        /** HaProxyLbType */
        HaProxyLbType: {
            /** @description Allow / disallow traffic to be routed via IPv4. */
            ipv4: boolean;
            /** @description Allow / disallow traffic to be routed via IPv6. */
            ipv6: boolean;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "haproxy";
            details: components["schemas"]["HaProxyConfig"] | null;
            /** @description Binds the load balancer to the host server IP address.
             *
             *     **Pros**: This allows for significantly lower cost (utilizing fewer IPv4 addresses), and enables building out a true edge network with lower latency.
             *     **Cons**: Only 1 environment is allowed on the host. This is because the load balancer is the only ingress point for an environment, and if it is sharing
             *     the same IP as the host, that host can only operate under that environment.
             *      */
            bind_host?: boolean | null;
        };
        /**
         * WafConfig
         * @description Additional configuration options for the web application firewall.
         */
        WafConfig: {
            rules: {
                /** @description Some information about the rule. */
                description: string;
                /** @description A boolean that indicates if the rule should be active or skipped. */
                skip: boolean;
                /**
                 * @description A string that describes if the role should allow or deny traffic based on the conditions.
                 * @enum {string}
                 */
                type: "allow" | "deny";
                /**
                 * @description A string that describes if both attributes need to be true (match all) or if only one of the conditions needs to be true (match any).
                 * @enum {string}
                 */
                match: "any" | "all";
                /** @description An array of the specific conditions for the rule. */
                conditions: {
                    /**
                     * @description A string that describes the match type for the condition.
                     * @enum {string}
                     */
                    type: "ip-match" | "geo-match" | "url-match" | "method-match" | "header-match";
                    /**
                     * @description A string that indicates the range of values relative to the value property.
                     * @enum {string}
                     */
                    operator: "==" | "!=" | ">" | "<" | ">=" | "<=";
                    /** @description The value corresponding to the condition type. */
                    value: string;
                }[];
            }[];
        };
        /**
         * TcpTransportConfig
         * @description Additional configuration options for the TCP transport mode.
         */
        TcpTransportConfig: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "tcp";
            details: {
                connections: {
                    [key: string]: unknown;
                };
                /** @description Configuration options for how telemetry is handled on the load balancer. */
                telemetry: {
                    [key: string]: unknown;
                };
            };
        };
        /**
         * HttpTransportConfig
         * @description Additional configuration options for the HTTP transport mode.
         */
        HttpTransportConfig: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "http";
            details: {
                /** @description Defines extra configuration options connections to the load balancer */
                connections: {
                    /** @description Maximum number of simultaneous connections (via http/2) per connection. */
                    max_idle_conns_per_connection: number | null;
                };
                /** @description Configuration options for how telemetry is handled. */
                telemetry: {
                    /** @description Determines how many URLs the load balancer will track at one time. Defaults to 150. */
                    max_trackable_urls?: number | null;
                    /** @description Whether or not to track invalid requests. An invalid request is a request that came in that no router existed for. Usually this means bot requests. Defaults to false. */
                    track_invalid_requests?: boolean | null;
                    /** @description An array of paths to exclude from tracking. */
                    ignore_paths?: string[] | null;
                };
            };
        };
        /**
         * UdpTransportConfig
         * @description Additional configuration options for the UDP transport mode.
         */
        UdpTransportConfig: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "udp";
            details: {
                /** @description Configuration options for how telemetry is handled on the load balancer. */
                telemetry: {
                    [key: string]: unknown;
                };
            };
        };
        /**
         * TcpRouterConfig
         * @description Additional configuration options for TCP mode routers
         */
        TcpRouterConfig: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "tcp";
            details: {
                [key: string]: unknown;
            };
        };
        /**
         * UdpRouterConfig
         * @description Additional configuration options for UDP mode routers
         */
        UdpRouterConfig: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "udp";
            details: {
                [key: string]: unknown;
            };
        };
        /**
         * HttpRouterConfig
         * @description Additional configuration options for HTTP mode routers.
         */
        HttpRouterConfig: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "http";
            details: {
                /** @description Defines a built-in redirect for HTTP mode routers */
                redirect?: {
                    /** @description If enabled and a sibling controller exists for port 443, requests will be auto redirected to it. Essentially sets up automatic TLS redirection for this router. */
                    auto_https_redirect: boolean;
                    /** @description If true, any request comes in with "www" prefix will be permanently redirected to the same path without www. */
                    remove_www: boolean;
                    /** @description The port to redirect traffic to. */
                    port?: number | null;
                    /** @description The scheme to redirect to. (i.e. `https`) */
                    scheme?: string | null;
                    /** @description A specific URL to redirect to. */
                    url?: string | null;
                } | null;
                forward?: {
                    scheme?: string | null;
                    /** @description Allows the load balancer to modify content before it reaches the user. */
                    content_mod?: {
                        /** @description An array that describes a list of replacement match/value pairs. */
                        replace?: {
                            /** @description String that will be replaced. */
                            match: string;
                            /** @description Replacement value. */
                            value: string;
                        }[] | null;
                    } | null;
                    /** @description The URL to forward the request to.
                     *
                     *     Given a path match of `^/example/(.*)$`, a route such as `/example/wow.jpg` would be forwarded as /wow.jpg.
                     *      */
                    url?: string;
                } | null;
                proxy?: {
                    /** @description The domain that this router will proxy. */
                    domain?: string | null;
                    /** @description The full URL that this router will proxy. */
                    url?: string | null;
                    /** @description Allows the load balancer to modify content before it reaches the user. */
                    content_mod?: {
                        /** @description An array that describes a list of replacement match/value pairs. */
                        replace?: {
                            /** @description String that will be replaced. */
                            match: string;
                            /** @description Replacement value. */
                            value: string;
                        }[] | null;
                    } | null;
                } | null;
                caching?: {
                    files?: {
                        /** @description Regex string that describes the files to cache. */
                        match: string;
                        /** @description Time string that describes the time to live. */
                        ttl: components["schemas"]["Duration"];
                    }[] | null;
                } | null;
            };
        };
        /**
         * V1LbRouterConfig
         * @description A specific router configuration that describes how traffic matching the rule is handled.
         */
        V1LbConfigRouter: {
            /** @description The ruleset for this router to be selected. If both `domains`` and `internal_port` are null, then this match acts as a wildcard and will match all. */
            match: {
                /** @description The specific domains to match against. */
                domains: string[] | null;
                /** @description The specific ports to match against. */
                internal_ports: number[] | null;
                path?: string | null;
                /** @description Match traffic destined (or not destined) for a particular container. */
                containers?: {
                    /** @description Match any traffic that would be routed to one of these containers. */
                    include?: components["schemas"]["HybridIdentifier"][] | null;
                    /** @description Match any traffic that would NOT be routed to one of these containers. */
                    exclude?: components["schemas"]["HybridIdentifier"][] | null;
                } | null;
            };
            /**
             * @description How to route the traffic to the destination.
             *     `random`: Pick a valid destination at random.
             *     `round-robin`: Send each request to the 'next' destination on the list, restarting from the beginning when the last destination is used.
             *
             * @enum {string}
             */
            mode: "random" | "round-robin";
            config: {
                /** @description If a request comes in from the same origin, ensure it hits the same destination. */
                sticky_sessions: boolean;
                /** @description If a destination is unavailable, retry up to [x] times, instead of immediately failing with a 503/504 error. */
                destination_retries: number;
                /** @default null */
                destination_prioritization: ("latency" | "random") | null;
                /** @description TLS termination configuration. If null, the platform will use the default configuration. Port 443 by default has TLS termination enabled. */
                tls?: {
                    /** @description [Advanced] Change the domain the controller listens on.
                     *      */
                    server_name?: string | null;
                    /** @description If enabled, accept TLS traffic with an invalid certificate. This is usually done for development/testing, and is not recommended for production use. */
                    allow_insecure?: boolean | null;
                    /** @description A PEM encoded string of certificates. */
                    client_cert_auth?: string | null;
                    /** @description Defines how to validate the connecting TLS certificate.
                     *     `none`: Do not require a TLS certificate to be sent
                     *     `request`: Asks the client to send a TLS certificate, but does not require nor validate it.
                     *     `require`: Requires a certificate be sent for the request to be valid, but does not validate the certificate.
                     *     `require-verify`: Requires both that the client send a certificate, and that the certificate is valid. This is required when using https.
                     *      */
                    client_auth?: ("none" | "request" | "require" | "require-verify") | null;
                } | null;
                /** @description Defines how the length of various sorts of timeouts when communicating with the destination. */
                timeouts: {
                    /** @description The duration the load balancer will wait before timing out while attempting to connect to the destination. */
                    destination_connection: components["schemas"]["Duration"];
                };
                extension?: null | (components["schemas"]["TcpRouterConfig"] | components["schemas"]["HttpRouterConfig"] | components["schemas"]["UdpRouterConfig"]);
            };
        };
        /** V1LbController */
        V1LbController: {
            /** @description A human-readable identifier for this controller. It will default to the port, i.e. `port-443`, but can be renamed to anything, such as the service this controller represents. */
            identifier: string;
            /** @description The port inbound trafic is accepted on. */
            port: number;
            waf?: components["schemas"]["WafConfig"] | null;
            /**
             * V1LbControllerTransport
             * @description Defines how traffic comes in to the load balancer, and how the load balancer handles it.
             */
            transport?: null | {
                /** @description When true, this controller is disabled and will not be used. */
                disable: boolean;
                /**
                 * @description The kind of traffic (http/tcp/udp) that will be sent to the load balancer.
                 * @enum {string}
                 */
                mode: "tcp" | "udp" | "http";
                /** @description Defines how the transport for this controller operates. */
                config: {
                    /** @description Enable/disable performance mode. If enabled, some telemetry will be disabled to dedicate full processing to handling requests.
                     *     You will not see per-request breakdowns or URL logging if performance mode is enabled.
                     *      */
                    performance: boolean;
                    /** @description Defines how traffic gets into the load balancer. */
                    ingress: {
                        tls?: {
                            /** @description Enables or disables TLS. */
                            enable: boolean;
                        } | null;
                    };
                    /** @description Defines settings for various types of timeouts. */
                    timeouts: {
                        /** @description The total amount of time a connection can be idle before being killed. */
                        idle: components["schemas"]["Duration"];
                    };
                    /**
                     * @description Verbosity describes the level of logging detail for the controller
                     * @enum {string}
                     */
                    verbosity: "low" | "normal" | "high" | "debug";
                    /** @description Extended configurations for the specified transport mode (http/tcp) */
                    extension?: components["schemas"]["TcpTransportConfig"] | components["schemas"]["HttpTransportConfig"] | components["schemas"]["UdpTransportConfig"];
                };
                /** @description Defines where traffic is sent. Many can be defined per controller. */
                routers: components["schemas"]["V1LbConfigRouter"][];
            };
        };
        /** V1LbConfig */
        V1LbConfig: {
            /** @description A configuration for a specific port. */
            controllers: components["schemas"]["V1LbController"][];
            controller_template?: components["schemas"]["V1LbController"] | null;
            waf?: components["schemas"]["WafConfig"] | null;
        };
        /** V1LbType */
        V1LbType: {
            /** @description Allow / disallow traffic to be routed via IPv4. */
            ipv4: boolean;
            /** @description Allow / disallow traffic to be routed via IPv6. */
            ipv6: boolean;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "v1";
            details: components["schemas"]["V1LbConfig"];
            /** @description Binds the load balancer to the host server IP address.
             *
             *     **Pros**: This allows for significantly lower cost (utilizing fewer IPv4 addresses), and enables building out a true edge network with lower latency.
             *     **Cons**: Only 1 environment is allowed on the host. This is because the load balancer is the only ingress point for an environment, and if it is sharing
             *     the same IP as the host, that host can only operate under that environment.
             *      */
            bind_host?: boolean | null;
        };
        /** DefaultLbType */
        DefaultLbType: {
            /** @description Allow / disallow traffic to be routed via IPv4. */
            ipv4: boolean;
            /** @description Allow / disallow traffic to be routed via IPv6. */
            ipv6: boolean;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "default";
            details: components["schemas"]["HaProxyConfig"] | components["schemas"]["V1LbConfig"] | null;
        };
        /**
         * LoadBalancerConfig
         * @description The config object for the loadbalancer service.
         */
        LoadBalancerConfig: components["schemas"]["V1LbType"] | components["schemas"]["HaProxyLbType"] | components["schemas"]["DefaultLbType"];
        /**
         * LoadBalancerEnvironmentService
         * @description Information about the environments loadbalancer service(s).
         */
        LoadBalancerEnvironmentService: {
            /** @description Whether or not the loadbalancer service is enabled. */
            enable: boolean;
            /** @description The ID of the loadbalancer service container */
            container_id: string | null;
            /** @description A boolean representing if this service container is set to high availability mode or not. */
            high_availability: boolean;
            /** @description A boolean representing if this service container is set to autoupdate or not */
            auto_update?: boolean;
            config: components["schemas"]["LoadBalancerConfig"] | null;
        };
        /**
         * DiscoveryConfig
         * @description The config object for the discovery service.
         */
        DiscoveryConfig: {
            empty_set_delay?: components["schemas"]["Duration"] | null;
            /** @description A mapping of hostnames to IP addresses for custom internal resolutions. Acts as a custom /etc/resolv.conf file that works environment wide. */
            hosts?: {
                [key: string]: {
                    /** @description The IPv4 address the discovery server should return to any container instance requesting this hostname. */
                    ipv4?: string[] | null;
                    /** @description The IPv6 address the discovery server should return to any container instance requesting this hostname. */
                    ipv6?: string[] | null;
                };
            } | null;
            /** @description A list of custom DNS resolver strings.  Can specifify domains or ips. */
            custom_resolvers?: string[];
        };
        /**
         * DiscoveryEnvironmentService
         * @description Information about the environments discovery service(s).
         */
        DiscoveryEnvironmentService: {
            /** @description Whether or not the discovery service is enabled. */
            enable: boolean;
            /** @description The ID of the discovery service container */
            container_id: string;
            /** @description A boolean representing if this service container is set to high availability mode or not. */
            high_availability: boolean;
            /** @description A boolean where `true` represents the desire to automatically update the environment discovery service. */
            auto_update?: boolean;
            /** @description The config object for the discovery service. */
            config: components["schemas"]["DiscoveryConfig"] | null;
        };
        /**
         * VpnEnvironmentService
         * @description Information about the environments vpn service(s).
         */
        VpnEnvironmentService: {
            /** @description Whether or not the VPN service is enabled. */
            enable: boolean;
            /** @description The ID of the VPN service container */
            container_id: string;
            /** @description A boolean representing if this service container is set to autoupdate or not */
            auto_update?: boolean;
            /** @description The config object for the VPN service. */
            config: {
                /** @description If true, routes all traffic through the VPN, even non-Cycle traffic. */
                allow_internet: boolean;
                /** @description Auth configuration for the VPN. */
                auth: {
                    /** @description A webhook endpoint to hit. Will be passed the login credentials provided to the user, and should return a 200 status if the login is permitted. */
                    webhook: string | null;
                    /** @description If true, allows any Cycle account with access to the environment to log in to the VPN using their Cycle email and password. */
                    cycle_accounts: boolean;
                    /** @description If true, allows the custom VPN accounts to log in to the VPN. */
                    vpn_accounts?: boolean;
                };
            } | null;
        };
        /**
         * SchedulerAccessKey
         * @description Custom authorization keys for the scheduler service.
         */
        SchedulerAccessKey: {
            /** @description The name given to this access key */
            name: string;
            /** @description The access key secret. This should be submitted with requests to a publicly accessible scheduler service. */
            secret: string;
            /** @description Whitelisted IPs that are allowed to make requests to the scheduler service. */
            ips?: string[];
        };
        /**
         * SchedulerConfig
         * @description Configuration options for the scheduler Environment service.
         */
        SchedulerConfig: {
            /** @description If true, this scheduler will be accessible over the public internet. It will enable a LINKED record to be pointed to the scheduler container, and inbound requests to trigger function containers.
             *      */
            public: boolean;
            access_keys?: components["schemas"]["SchedulerAccessKey"][];
        };
        /**
         * SchedulerEnvironmentService
         * @description Information about the environments scheduler service. The scheduler is used by containers with a function deployment strategy to route requests to the correct instances.
         */
        SchedulerEnvironmentService: {
            /** @description Whether or not the scheduler service is enabled. */
            enable: boolean;
            /** @description The ID of the scheduler service container. */
            container_id: string | null;
            /** @description A boolean representing if the scheduler service container is set to high availability. mode or not. As of Jan 2024, this will always be false because HA is not availiable for the scheduler service. */
            high_availability?: boolean;
            /** @description A boolean where `true` represents the desire to automatically update the environment scheduler service. */
            auto_update?: boolean;
            config?: components["schemas"]["SchedulerConfig"] | null;
        };
        /**
         * GatewayEnvironmentService
         * @description Information about the environments gateway service(s).
         */
        GatewayEnvironmentService: {
            /** @description Whether or not the gateway service is enabled. */
            enable: boolean;
            /** @description The ID of the gateway service container */
            container_id: string;
            /** @description A boolean representing if this service container is set to high availability mode or not. */
            high_availability: boolean;
            /** @description A boolean where `true` represents the desire to automatically update the environment gateway service. */
            auto_update?: boolean;
        };
        /**
         * EnvironmentServices
         * @description Service containers run by this environment and their configurations.
         */
        EnvironmentServices: {
            loadbalancer: components["schemas"]["LoadBalancerEnvironmentService"] | null;
            discovery?: components["schemas"]["DiscoveryEnvironmentService"] | null;
            vpn?: components["schemas"]["VpnEnvironmentService"] | null;
            scheduler?: components["schemas"]["SchedulerEnvironmentService"] | null;
            gateway?: components["schemas"]["GatewayEnvironmentService"] | null;
        };
        /**
         * ACL
         * @description An access control list. Defines which roles have which permissions on specific resources.
         */
        ACL: {
            roles?: {
                [key: string]: {
                    /** @description Can the user see / use this resource? */
                    view: boolean;
                    /** @description Can the user edit the state / name / identifier of this resource? */
                    modify: boolean;
                    /** @description Can the user delete / update ACLs for this resource? */
                    manage: boolean;
                };
            };
        };
        /** PrivateNetwork */
        PrivateNetwork: {
            /** @description The vxlan tag added to each packet to help identify the network. */
            vxlan_tag: number;
            /** @description The subnet ID. */
            subnet: string;
            ipv6: unknown & components["schemas"]["IPNet"];
            legacy: components["schemas"]["LegacyNetwork"] | null;
        };
        /**
         * EnvironmentDeploymentTags
         * @description A map of custom tags to deployment versions. Allows for defining a custom, persistent tag with a changing version number.
         *     For example, `dev -> v1.2.3-dev`. This is useful when dealing with DNS LINKED records, where you always want dev.example.com to point to the
         *     `dev` version of your app within an environment, where you can continuously deploy and update it without needing to change the record. It is
         *     even more useful when you have multiple LINKED records, and you update i.e. `prod`` tag to point to a new version, all records using the `prod` tag
         *     are switched at once.
         *
         */
        EnvironmentDeploymentTags: {
            [key: string]: components["schemas"]["Version"];
        };
        /**
         * ContainerImageSummary
         * @description The Id of the image and information on if it is a service.
         */
        ContainerImageSummary: {
            id: components["schemas"]["ID"];
            service: ("discovery" | "loadbalancer" | "vpn") | null;
        };
        /**
         * EnvironmentMeta
         * @description A list of meta fields that can be applied to this environment.
         */
        EnvironmentMeta: {
            containers_count?: components["schemas"]["StateCountSummary"];
            instances_count?: components["schemas"]["StateCountSummary"];
            containers?: {
                id: components["schemas"]["ID"];
                /** @description A user defined name for the container resource. */
                name: string;
                state: components["schemas"]["ContainerState"];
                image: components["schemas"]["ContainerImageSummary"];
                environment: components["schemas"]["ContainerEnvironmentSummary"];
            }[];
        };
        /**
         * Environment
         * @description Environments are groups of containers with a private network built between them. For more information on environments, see the [main docs](https://cycle.io/docs/platform/introduction-to-environments).
         */
        Environment: {
            id: components["schemas"]["ID"];
            /** @description A human readable slugged identifier for this environment. */
            identifier: components["schemas"]["Identifier"];
            /** @description A user defined name for the environment resource. */
            name: string;
            /** @description The cluster this environment is associated with. */
            cluster: string;
            about: components["schemas"]["EnvironmentAbout"];
            creator: components["schemas"]["CreatorScope"];
            hub_id: components["schemas"]["HubID"];
            state: components["schemas"]["EnvironmentState"];
            /**
             * EnvironmentEvents
             * @description A collection of timestamps for each event in the environment's lifetime.
             */
            events: {
                /** @description The timestamp of when the environment was created. */
                created: components["schemas"]["DateTime"];
                /** @description The timestamp of when the environment was updated. */
                updated: components["schemas"]["DateTime"];
                /** @description The timestamp of when the environment was deleted. */
                deleted: components["schemas"]["DateTime"];
            };
            features: components["schemas"]["EnvironmentFeatures"];
            services: components["schemas"]["EnvironmentServices"];
            acl?: components["schemas"]["ACL"] | null;
            private_network?: components["schemas"]["PrivateNetwork"] | null;
            /** @description A map of custom tags to deployment versions.
             *      */
            deployments?: {
                tags: components["schemas"]["EnvironmentDeploymentTags"];
            } | null;
            meta?: components["schemas"]["EnvironmentMeta"];
        };
        /**
         * Permissions
         * @description Permissions information for an API Key
         */
        Permissions: {
            /** @description A boolean, where true represents this API key is authorized to make requests that involve all of a hubs environments */
            all_environments: boolean;
            /**
             * EnvironmentPermission
             * @description An environment ID and a boolean representing management configuration for an API key
             */
            environments: {
                id: components["schemas"]["ID"];
                /** @description A boolean, where true represents the API keys ability to make changes to the environment components */
                manage: boolean;
            }[];
        };
        /**
         * ApiKeyCreator
         * @description An extended resource that has information on a Cycle hub API key
         */
        ApiKeyCreator: {
            id: components["schemas"]["ID"];
            /** @description The name of the API key */
            name: string;
            hub_id: components["schemas"]["ID"];
            /** @description The API key secret */
            secret?: string;
            permissions: components["schemas"]["Permissions"];
            /** @description The API key capabilities list */
            capabilities: {
                all: boolean;
                specific: string[];
            };
            ips: string[] | null;
            state: {
                /** @enum {string} */
                current: "live" | "deleting" | "deleted";
            } & components["schemas"]["State"];
            events: components["schemas"]["Events"];
        };
        /**
         * CreatorInclude
         * @description An identity that created a resource.
         */
        CreatorInclude: {
            /** @description Included creators that are public accounts, keyed by ID. */
            accounts?: {
                [key: string]: components["schemas"]["PublicAccount"];
            };
            /** @description Included creators that are employees of Cycle, keyed by ID. */
            employees?: {
                [key: string]: components["schemas"]["PublicAccount"];
            };
            /** @description Included creators that are not Cycle accounts, keyed by ID. */
            visitors?: {
                [key: string]: components["schemas"]["PublicAccount"];
            };
            /** @description Included creators that are Cycle environments (usually automatically created resources), keyed by ID. */
            environments?: {
                [key: string]: components["schemas"]["Environment"];
            };
            /** @description Included creators that are Cycle API Keys, keyed by ID. */
            api_keys?: {
                [key: string]: components["schemas"]["ApiKeyCreator"];
            };
        };
        /**
         * ExistingSource
         * @description In a stack, specifies an image source ID from which Cycle will derive any values not specified in the stack file. This is useful for avoiding direct placement of credentials in a stack file, for example.
         */
        ExistingSource: {
            /** @description The ID of the image source this image should be built from. */
            source_id?: components["schemas"]["ID"];
        };
        /**
         * DockerHubOrigin
         * @description An image origin where the image is pulled from DockerHub.
         */
        DockerHubOrigin: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "docker-hub";
            details: {
                existing?: components["schemas"]["ExistingSource"] | null;
                /** @description The DockerHub target string. ex - `mysql:5.7` */
                target: string;
                /** @description For authentication, a username. */
                username?: string;
                /** @description For authentication, a token. */
                token?: string;
            };
        };
        /** HTTPSourceCredentials */
        CredentialsHTTP: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "http";
            /** @description Authentication credentails for the Dockerfile image source type when authenticating over HTTP. */
            credentials: {
                /** @description For authentication, the username. */
                username: string;
                /** @description For authentication, the password. */
                password: string;
            };
        };
        /** SSHSourceCredentials */
        CredentialsSSH: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "ssh";
            /** @description Authentication credentials for the Dockerfile image source type when authenticating with SSH. */
            credentials: {
                /** @description The username for the repo service, that is used to authenticate an ssh key. */
                username: string;
                /** @description The passphrase used for the key. */
                passphrase: string;
                /** @description A pem encoded private key. */
                private_key: string;
            };
        };
        /**
         * RepoSourceType
         * @description Information about the repository.
         */
        RepoType: {
            /** @description The URL of the repository. */
            url: string;
            /** @description An optional branch arguement.  Default value is `master`. */
            branch?: string;
            auth?: null | (components["schemas"]["CredentialsHTTP"] | components["schemas"]["CredentialsSSH"]);
            /** @description Repository reference information. */
            ref?: {
                /** @description The type of reference being used. */
                type: string;
                /** @description The value for the given reference type. */
                value: string;
            } | null;
        };
        /**
         * DockerfileCredentails
         * @description An array of credentials objects to be used when authenticating against private images used by the Dockerfile.
         */
        DockerfileCredentials: {
            /** @description The url the resource is located at. */
            url?: string;
            /** @description A username for authentication. */
            username?: string;
            /** @description A token for authentication. */
            token?: string;
        }[];
        /**
         * DockerFileOrigin
         * @description An image origin where the image is built from a Dockerfile located in a git repository.
         */
        DockerFileOrigin: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "docker-file";
            details: {
                existing?: components["schemas"]["ExistingSource"] | null;
                repo?: components["schemas"]["RepoType"] | null;
                /** @description An endpoint that serves the tar file. */
                targz_url?: string | null;
                /** @description The path to the directory to use as the context when building the image. */
                context_dir?: string | null;
                /** @description The path to the Dockerfile to be used for buiding the image. */
                build_file?: string | null;
                credentials?: components["schemas"]["DockerfileCredentials"] | null;
            };
        };
        /**
         * DockerRegistryOrigin
         * @description An image origin where the image is pulled from a private Docker registry.
         */
        DockerRegistryOrigin: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "docker-registry";
            details: {
                existing?: components["schemas"]["ExistingSource"];
                /** @description The image name on the registry. */
                target: string;
                /** @description The url of the remote registry. */
                url: string;
                /** @description For authentication, a username. */
                username?: string;
                /** @description For authentication, a token. */
                token?: string;
                /** @description For authentication, a password. */
                password?: string;
            };
        };
        /**
         * RegistryAuthUser
         * @description User/token based credentials for authentication to a third-party image source.
         */
        RegistryAuthUser: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "user";
            details: {
                username?: string;
                token?: string;
            };
        };
        /**
         * RegistryAuthProvider
         * @description Credentials for authentication to a provider-native image registry, such as AWS ECR.
         */
        RegistryAuthProvider: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "provider";
            details: {
                /** @enum {string} */
                flavor: "ecr";
                /** RegistryAuthProviderCredentials */
                credentials: {
                    region?: string;
                    namespace?: string;
                    api_key?: string;
                    secret?: string;
                    subscription_id?: string;
                    client_id?: string;
                    /** @description A base64'd string of additional configuration options. */
                    config?: string;
                };
            };
        };
        /**
         * RegistryAuthWebhook
         * @description Webhook-based authentication to the provided URL. This webhook expects to receive a base-64 string that when decoded is in the format `username:password`
         */
        RegistryAuthWebhook: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "webhook";
            details: {
                url: string;
            };
        };
        /**
         * RegistryAuth
         * @description Authentication details for a third party image registry/source.
         */
        RegistryAuth: components["schemas"]["RegistryAuthUser"] | components["schemas"]["RegistryAuthProvider"] | components["schemas"]["RegistryAuthWebhook"];
        /**
         * OciRegistryOrigin
         * @description An image origin that pulls images fro an OCI-compatible registry. Also used for provider-native registries, such as AWS ECR.
         */
        OciRegistryOrigin: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "oci-registry";
            details: {
                existing?: components["schemas"]["ExistingSource"];
                /** @description The image name on the registry. */
                target: string;
                /** @description The url of the remote registry. */
                url: string;
                auth?: components["schemas"]["RegistryAuth"] | null;
            };
        };
        /**
         * CycleUploadOrigin
         * @description An image origin where the image is pushed directly to the factory, bypassing the need for a registry or external source.
         *
         *     In order to utilize this image origin type, a tar file of an OCI compliant image will need to be generated and pushed directly to the factory. The authentication token is generated when this image is created, and expires at the provided time.
         *     Once you have a token, it can be uploaded as multipart form data under the key `file.tar`, directly to the factory at `https://factory.cycle.io:9414/v1/images/<IMAGE ID>/upload?hub-id=<HUB ID>&token=<TOKEN>`.
         *
         */
        CycleUploadOrigin: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "cycle-upload";
            details?: {
                /** @description The date-time at which the authorization token for uploading this image expires. */
                expires: components["schemas"]["DateTime"];
                /** @description The token that is required by the factory to accept an upload for this image. */
                token: string;
            };
        };
        /**
         * CycleSourceOrigin
         * @description An image origin that references an image source on Cycle.
         *
         *     This origin will never be embedded in an image source. It is for use in stacks, describing an image which is already a part of an image source on Cycle.
         *
         */
        CycleSourceOrigin: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "cycle-source";
            details: {
                /** @description The ID referencing the image source where this image originated. */
                source_id: components["schemas"]["ID"];
            };
        };
        /**
         * NoneOrigin
         * @description An empty origin. No details are provided for this image.
         */
        NoneOrigin: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "none";
        };
        /**
         * ImageOrigin
         * @description The origin of the image.
         */
        ImageOrigin: components["schemas"]["DockerHubOrigin"] | components["schemas"]["DockerFileOrigin"] | components["schemas"]["DockerRegistryOrigin"] | components["schemas"]["OciRegistryOrigin"] | components["schemas"]["CycleUploadOrigin"] | components["schemas"]["CycleSourceOrigin"] | components["schemas"]["NoneOrigin"];
        /** StackImageSource */
        StackImageSourceType: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "stack-build";
            details?: {
                id: string;
                stack_id: string;
                containers: components["schemas"]["Identifier"][];
                origin: components["schemas"]["ImageOrigin"];
            };
            override?: {
                target?: string;
                targz_url?: string;
            };
        };
        /** DirectImageSource */
        DirectImageSourceType: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "direct";
            details?: {
                id: string;
                origin: components["schemas"]["ImageOrigin"];
            };
            override?: {
                target?: string;
                targz_url?: string;
            };
        };
        /** BucketImageSource */
        BucketImageSourceType: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "bucket";
            details?: {
                id: string;
                origin: components["schemas"]["ImageOrigin"];
            };
            override?: {
                target?: string;
                targz_url?: string;
            };
        };
        /** ImageState */
        ImageState: {
            /**
             * @description The current state of the image.
             * @enum {string}
             */
            current: "new" | "uploading" | "downloading" | "building" | "verifying" | "saving" | "live" | "deleting" | "deleted";
        } & components["schemas"]["State"];
        /**
         * ImageMeta
         * @description A list of meta fields that can be applied to the image.
         */
        ImageMeta: {
            containers_count?: components["schemas"]["StateCountSummary"];
        };
        /**
         * Image
         * @description An image is a point in time build on a given image source, and what is distributed by Cycle to run containers.
         */
        Image: {
            id: components["schemas"]["ID"];
            hub_id: components["schemas"]["HubID"];
            /** @description A user defined name for the image. */
            name: string;
            /** @description The image size in bytes. */
            size: number;
            /** @description An object that holds information about the image. */
            about?: {
                /** @description A description of the image. */
                description: string | null;
            };
            /** @description Describes where the image is hosted. */
            backend: {
                /** @description The provider where this image is hosted. */
                provider: string;
                /** @description The size of the image in bytes. */
                size: number;
                /** @description A file name for the image, used by the platform. */
                file_name: string;
                /** @description A file id for the image, used by the platform. */
                file_id: string;
            };
            /** @description Any restrictions or requirements needed to run this image as a container. */
            requires: {
                nvidia_gpu?: boolean;
            };
            /** @description Any additional build details for this image */
            build?: {
                /** @description Arguments to pass to the builder during a build of this image. */
                args?: {
                    [key: string]: string;
                };
            } | null;
            /** @description Configuration options regarding the builder used to create/import this Image. */
            builder?: {
                /** @description The ID of the Integration used to do the build. */
                integration_id: components["schemas"]["ID"];
            } | null;
            /** @description Configuration settings for the image. */
            config: {
                /** @description The linux user this image runs its processes as. */
                user: string;
                /** @description The port settings for the image. */
                ports: {
                    /** @description Host Port */
                    host: number;
                    container: number;
                    type: string;
                }[];
                /** @description Image defined environment variables for the image. */
                env: {
                    [key: string]: string;
                };
                /** @description Image labels. */
                labels: {
                    [key: string]: string;
                };
                /** @description The CMD array used to start the container. */
                command: string[];
                /** @description An entrypoint command. */
                entrypoint: string[];
                /** @description Volumes information for the given image. */
                volumes: {
                    /** @description The path where the volume is mounted. */
                    path?: string;
                    /**
                     * @description Permission settings for the volume.
                     * @enum {string}
                     */
                    mode?: "ro" | "rw";
                }[];
                /** @description The working directory for the image. */
                workdir: string;
                /** @description A set command to be run if a signal is called. */
                signal_stop: string;
            };
            source?: components["schemas"]["DirectImageSourceType"] | components["schemas"]["StackImageSourceType"] | components["schemas"]["BucketImageSourceType"];
            creator?: components["schemas"]["CreatorScope"];
            /** @description Information about the Factory service that built/imported the Image into Cycle. */
            factory?: {
                /** @description The node holding the factory service that was responsible for building the image. */
                node_id: string;
                /** @description A date timestamp for when the node cached the image. */
                cached: components["schemas"]["DateTime"];
                /** @description A date timestamp for when the node acknowledged the image import job. */
                acknowledged: components["schemas"]["DateTime"];
            } | null;
            state: components["schemas"]["ImageState"];
            /**
             * ImageEvents
             * @description A collection of timestamps for each event in the image's lifetime.
             */
            events: {
                /** @description The timestamp of when the image was created. */
                created: components["schemas"]["DateTime"];
                /** @description The timestamp of when the image was updated. */
                updated: components["schemas"]["DateTime"];
                /** @description The timestamp of when the image was deleted. */
                deleted: components["schemas"]["DateTime"];
            };
            meta?: components["schemas"]["ImageMeta"];
        };
        /**
         * ImageIncludes
         * @description A resource associated with an image.
         */
        ImagesIncludes: {
            [key: string]: components["schemas"]["Image"];
        };
        /**
         * StackVariable
         * @description A variable specified in a stack spec.
         */
        StackVariable: string;
        /**
         * StackSpecScopedVariableUrlSource
         * @description A variable who's value is fetched from a URL when the container starts.
         */
        StackSpecScopedVariableUrlSource: {
            /**
             * @description The type of scoped variable. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "url";
            details: {
                /** @description The URL to call to fetch the value. */
                url: string | components["schemas"]["StackVariable"];
                /** @description Additional headers that can be attached to the URL request. Useful for adding meta-data to third-party services. */
                headers: {
                    [key: string]: unknown;
                } | components["schemas"]["StackVariable"];
                /** @description A URL that can be provided to authenticate with a third party secret service. Cycle will make a request to this URL before fetching the secret URL, and use the response as the value of an Authorization header when requesting the secret. */
                auth_token_url: (string | null) | components["schemas"]["StackVariable"];
            } | components["schemas"]["StackVariable"];
        };
        /**
         * StackSpecScopedVariableRawSource
         * @description A variable with a hard-coded value.
         */
        StackSpecScopedVariableRawSource: {
            /**
             * @description The type of scoped variable. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "raw";
            details: {
                /** @description The value of the variable. */
                value: string | components["schemas"]["StackVariable"];
                /** @description A boolean where true represents the text the user is entering will be multi line. */
                blob: boolean | components["schemas"]["StackVariable"];
                secret?: ({
                    /** @description A string describing the IV Hex associated with the encryption of the variable. */
                    iv?: string | components["schemas"]["StackVariable"];
                    /** @description A user specified hint that will suggest what the encryption key might be */
                    hint?: string | components["schemas"]["StackVariable"];
                } | null) | components["schemas"]["StackVariable"];
            } | components["schemas"]["StackVariable"];
        };
        /** StackSpecScopedVariable */
        StackSpecScopedVariable: {
            identifier: components["schemas"]["Identifier"] | components["schemas"]["StackVariable"];
            scope: {
                /** @description Describes the containers that have access to this scoped variable. */
                containers: {
                    /** @description If true, all containers in the environment will have access to this variable. */
                    global: boolean | components["schemas"]["StackVariable"];
                    /** @description A list of container IDs that are granted access to this variable. */
                    ids?: (string[] | null) | components["schemas"]["StackVariable"];
                    /** @description A list of container identifiers that are granted access to this variable. */
                    identifiers?: (components["schemas"]["Identifier"][] | null) | components["schemas"]["StackVariable"];
                } | components["schemas"]["StackVariable"];
            } | components["schemas"]["StackVariable"];
            access: {
                /** @description Grants access to this variable from within a container as an environment variable. */
                env_variable?: {
                    /** @description The environment variable inside the container that stores the value of the variable. */
                    key: string | components["schemas"]["StackVariable"];
                } | components["schemas"]["StackVariable"] | null;
                /** @description Grants access to this variable over the Internal API. */
                internal_api?: ({
                    /** @description Sets the duration that this variable can be accessed over the Internal API, after container start. Provides additional security as sensitive data can only be accessed for a limited time. */
                    duration?: components["schemas"]["Duration"] | components["schemas"]["StackVariable"] | null;
                } | null) | components["schemas"]["StackVariable"];
                /** @description Grants access to this variable as a file inside the container. */
                file?: ({
                    /** @description When true, Cycle will interpret this variable as a base-64 encoded string, and decode it before writing it to the file inside the container. */
                    decode: boolean | components["schemas"]["StackVariable"];
                    /** @description The absolute path to write the variable to (including file name). If `null`, it will be written to `/var/run/cycle/variables/{variable-identifier}`. */
                    path: (string | null) | components["schemas"]["StackVariable"];
                } | null) | components["schemas"]["StackVariable"];
            } | components["schemas"]["StackVariable"];
            source?: (components["schemas"]["StackSpecScopedVariableUrlSource"] | components["schemas"]["StackSpecScopedVariableRawSource"]) | components["schemas"]["StackVariable"] | null;
        };
        /**
         * StackSpecImageOrigin
         * @description The origin of the image.
         */
        StackSpecImageOrigin: components["schemas"]["DockerHubOrigin"] | components["schemas"]["DockerFileOrigin"] | components["schemas"]["DockerRegistryOrigin"] | components["schemas"]["OciRegistryOrigin"] | components["schemas"]["CycleSourceOrigin"];
        /** StackSpecContainerImage */
        StackSpecContainerImage: {
            /** @description The human-readable name of this image. */
            name?: (string | null) | components["schemas"]["StackVariable"];
            /** @description Instructions on how to fetch or build this image. */
            origin: components["schemas"]["StackSpecImageOrigin"] | components["schemas"]["StackVariable"];
            /** @description Additional details applied when building an image. */
            build?: ({
                /** @description A map of build arguments applied to the image at build time. */
                args: {
                    [key: string]: string;
                } | components["schemas"]["StackVariable"];
            } | null) | components["schemas"]["StackVariable"];
            /** @description A specific builder to use. By default, Cycle uses its factory service and a standard build command to build images, but this can be enhanced by using an image builder integration. */
            builder?: ({
                /** @description The ID of the integration to use when building the image. The integration must support image building to be compatible. */
                integration_id: components["schemas"]["HybridIdentifier"];
            } | null) | components["schemas"]["StackVariable"];
        };
        /**
         * StackSpecContainerConfigNetwork
         * @description Stack configuration options related to the container's network.
         */
        StackSpecContainerConfigNetwork: {
            /** @description The level of public network access this container should have. */
            public: ("enable" | "disable" | "egress-only") | components["schemas"]["StackVariable"];
            /** @description The hostname of the container. This is how it can be referenced by other containers in the same environment. */
            hostname: string | components["schemas"]["StackVariable"];
            /** @description A list of port mappings on this container. */
            ports?: string[] | components["schemas"]["StackVariable"];
        };
        /**
         * StackSpecContainerConfigDeploy
         * @description Stack configuration options related to how the container behaves over its lifecycle (startup, shutdown, health checks, etc).
         */
        StackSpecContainerConfigDeploy: {
            /** @description The number of desired instances to deploy. */
            instances: number | components["schemas"]["StackVariable"];
            /** @description The strategy Cycle will apply when deploying instances of this container.
             *
             *     - ** resource-density **: Cycle will distribute instances across servers to maintain balanced resource usage.
             *     - ** high-availability **: Cycle will deploy instances over servers with an emphasis on geographic and physical separation
             *     - ** first-available **: Cycle will deploy one instance to every node that matches the specified criteria. (default)
             *     - ** node **: Cycle will deploy one instance to every node that matches the specified criteria.
             *     - ** edge **: Cycle will prioritize geographic distribution of instances.
             *     - ** function **: Every ingress request/connection receives its own instance.
             *     - ** manual **: Cycle will not make any decisions on where instances are deployed. Instead, instances must be deployed manually using the portal or API.
             *      */
            strategy?: ("resource-density" | "manual" | "high-availability" | "first-available" | "node" | "edge" | "function") | components["schemas"]["StackVariable"];
            /** @description Configuration options for containers using the 'function' deployment strategy. */
            function?: ({
                /** @description The maximum number of instances that Cycle can pre-allocate (includes auto-scaled instances). */
                max_pool_size?: (number | null) | components["schemas"]["StackVariable"];
                /** @description For each shard (scheduler), the maximum number of tasks it can run in parallel. */
                max_shard_concurrency?: (number | null) | components["schemas"]["StackVariable"];
                /** @description The maximum amount of time a function instance can run before timing out. */
                max_runtime?: components["schemas"]["Duration"] | components["schemas"]["StackVariable"] | null;
                /** @description The maximum amount of time Cycle will wait for an instance to be available. */
                max_queue_time?: components["schemas"]["Duration"] | components["schemas"]["StackVariable"] | null;
            } | null) | components["schemas"]["StackVariable"];
            /** @description Configuration options for stateful containers. */
            stateful?: ({
                /** @description Stateful container options. */
                options: {
                    /** @description When enabled, instances will utilize stateless base hostnames instead of being prefixed with a unique ID. */
                    use_base_hostname?: boolean | null;
                } | null;
            } | null) | components["schemas"]["StackVariable"];
            /** @description Configuration options that provide the ability to set restrictions on which nodes instances of this container are able to be deployed to. (i.e. if you have a GPU container, it should only go on nodes with a GPU). */
            constraints?: ({
                node?: {
                    /** @description Tags applied to a node. Cycle generates some automatically, but additional, custom tags can be applied on a per-node basis. */
                    tags: {
                        /** @description If a node has at least one of these tags, it is considered a valid deployment target for this container. */
                        any?: string[] | components["schemas"]["StackVariable"];
                        /** @description A node must have **ALL** of these tags to be considered a valid deployment target for this container. */
                        all?: string[] | components["schemas"]["StackVariable"];
                    } | components["schemas"]["StackVariable"];
                } | null;
            } | null) | components["schemas"]["StackVariable"];
            /** @description Configuration options for how this container behaves during shutdown. */
            shutdown?: ({
                /** @description How long the platform will wait for a container to stop gracefully. */
                graceful_timeout?: components["schemas"]["Duration"] | components["schemas"]["StackVariable"] | null;
                signals?: ("SIGTERM" | "SIGINT" | "SIGUSR1" | "SIGUSR2" | "SIGHUB" | "SIGKILL" | "SIGQUIT")[] | components["schemas"]["StackVariable"];
            } | null) | components["schemas"]["StackVariable"];
            /** @description Configuration options for how this container behaves during startup. */
            startup?: ({
                /** @description How long the platform will wait before sending the start signal to the given container. */
                delay?: components["schemas"]["Duration"] | components["schemas"]["StackVariable"] | null;
            } | null) | components["schemas"]["StackVariable"];
            /** @description Configurations for how the container behaves during updates. */
            update?: ({
                /** @description When set, Cycle will pick a random time from `0 - this duration`, and stagger the instances so they all start at different times (up to the time specified here). */
                stagger?: components["schemas"]["Duration"] | components["schemas"]["StackVariable"] | null;
            } | null) | components["schemas"]["StackVariable"];
            /** @description Configuration options for how Cycle should handle restarting this container (i.e. in case the process inside the container dies). */
            restart?: ({
                /** @description Under what circumstances Cycle should try to restart this container. */
                condition: ("always" | "never" | "failure") | components["schemas"]["StackVariable"];
                /** @description How long the platform will wait between restart attempts. */
                delay: components["schemas"]["Duration"] | components["schemas"]["StackVariable"];
                /** @description The maximum number of restart attempts Cycle will make. */
                max_attempts: number | components["schemas"]["StackVariable"];
            } | null) | components["schemas"]["StackVariable"];
            /** @description Configuration options for automated container health checks. */
            health_check?: ({
                /** @description The command or script to run to verify the health of the container. This script is run inside the container by Cycle.
                 *     This command accepts two types of entries:
                 *     - The first is a reference to a script that already lives in the container filesystem. This can be defined by giving the full path to the script as the value.   - The second format is an inline script.  If you need the code to execute within a shell, wrap the commands in escaped quotes like this `"\"curl -s -o /dev/console -w \"%{http_code}\" http://localhost:3000/_health | grep '200'  && exit 0 || exit 1\""`.  Do not use the `/bin/sh -c <commands>` format, this will not be accepted.
                 *      */
                command: string | components["schemas"]["StackVariable"];
                /** @description The number of times to retry the command before marking an instance unhealthy. */
                retries: number | components["schemas"]["StackVariable"];
                /** @description How long to wait between running health checks. */
                interval: components["schemas"]["Duration"] | components["schemas"]["StackVariable"];
                /** @description How long before a health check attempt times out. */
                timeout: components["schemas"]["Duration"] | components["schemas"]["StackVariable"];
                /** @description A boolean where true represents the desire for the container to restart if any instance is unhealthy. */
                restart: boolean | components["schemas"]["StackVariable"];
                /** @description How long to wait after a container start event before running health checks. */
                delay?: components["schemas"]["Duration"] | components["schemas"]["StackVariable"] | null;
            } | null) | components["schemas"]["StackVariable"];
            /** @description Configuration options for how the instance telemetry (CPU usage, etc) is handled. */
            telemetry?: ({
                /** @description How long telemetry data should be retained. */
                retention?: components["schemas"]["Duration"] | components["schemas"]["StackVariable"] | null;
                /** @description The duration between samples. */
                interval?: components["schemas"]["Duration"] | components["schemas"]["StackVariable"] | null;
                /** @description A URL where Cycle will send telemetry data to. The payload will be an instance resource snapshot. */
                webhook?: (string | null) | components["schemas"]["StackVariable"];
                /** @description If true, Cycle will not aggregate telemetry for this container's instances. */
                disable: boolean | components["schemas"]["StackVariable"];
            } | null) | components["schemas"]["StackVariable"];
        };
        /**
         * StackSpecContainerScaleThresholdRam
         * @description Describes the RAM threshold at which scaling will occur.
         */
        StackSpecContainerScaleThresholdRam: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "ram";
            details: {
                /** @description The target average RAM usage of all instances of this container. Going above this threshold will trigger a scaling event. This threshold must be greater than 25MB. */
                usage: string;
            };
        };
        /**
         * StackSpecContainerScaleThresholdCpu
         * @description Describes the CPU threshold at which scaling will occur.
         */
        StackSpecContainerScaleThresholdCpu: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "cpu";
            details: {
                utilization: number;
            };
        };
        /**
         * StackSpecContainerScaleThresholdCustom
         * @description A custom threshold for defining a scaling event.
         */
        StackSpecContainerScaleThresholdCustom: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "custom";
            details: {
                webhook: components["schemas"]["WebhookURL"];
            };
        };
        /**
         * StackSpecContainerScaleThresholdNetworkConnections
         * @description Describes the network connections threshold at which scaling will occur.
         */
        StackSpecContainerScaleThresholdNetworkConnections: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "network-connections";
            details: {
                connections_total: number;
            };
        };
        /**
         * StackSpecContainerScaleThresholdNetworkRequests
         * @description Describes the network requests threshold at which scaling will occur.
         */
        StackSpecContainerScaleThresholdNetworkRequests: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "network-requests";
            details: {
                requests_total: number;
            };
        };
        /**
         * StackSpecContainerScaleThresholdNetworkThroughput
         * @description Describes the network throughput threshold at which scaling will occur.
         */
        StackSpecContainerScaleThresholdNetworkThroughput: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "network-throughput";
            details: {
                private: boolean;
                /** @description The limit (maximum) amount of throughput each instance of the given container can use before triggering a scaling event. */
                bandwidth: string;
            };
        };
        /**
         * StackSpecContainerScaleThreshold
         * @description Discriminated union describing the different types of scaling threshold and their respective details
         */
        StackSpecContainerScaleThreshold: components["schemas"]["StackSpecContainerScaleThresholdRam"] | components["schemas"]["StackSpecContainerScaleThresholdCpu"] | components["schemas"]["StackSpecContainerScaleThresholdNetworkConnections"] | components["schemas"]["StackSpecContainerScaleThresholdNetworkRequests"] | components["schemas"]["StackSpecContainerScaleThresholdNetworkThroughput"];
        /**
         * StackSpecContainerConfigScaling
         * @description Stack configuration options for auto-scaling.
         */
        StackSpecContainerConfigScaling: {
            /** @description The identifier of the auto-scaling group assigned to this container. The auto-scale group determines which infrastructure this container can spin up if it needs more resources to meet demand. Setting it to `null` will limit auto-scaling to only instances. */
            autoscale_group: components["schemas"]["Identifier"] | components["schemas"]["StackVariable"] | null;
            instances: {
                /** @description Maximum additional instances the auto-scaler will run at any time. */
                max: number | components["schemas"]["StackVariable"];
                /** @description Minimum number of instances per server. */
                max_server: number | components["schemas"]["StackVariable"];
                /** @description Minimum amount of time an instance will live. */
                min_ttl: components["schemas"]["Duration"] | components["schemas"]["StackVariable"];
            } | components["schemas"]["StackVariable"];
            /** @description Duration in which the auto-scaler will watch for changes. */
            window: components["schemas"]["Duration"] | components["schemas"]["StackVariable"];
            /** @description An array of rules that dictate when a scaling event will be triggered. */
            thresholds: components["schemas"]["StackSpecContainerScaleThreshold"][] | components["schemas"]["StackVariable"];
        };
        /**
         * StackSpecContainerConfigRuntime
         * @description Configuration options related to how the container behaves while it is running (environment variables, command overrides, kernel capabilities, etc. )
         */
        StackSpecContainerConfigRuntime: {
            /** @description The working directory to execute the command in. */
            workdir?: string | components["schemas"]["StackVariable"];
            /** @description The command to execute when this container starts. Will override the default specified in the container. */
            command?: {
                path?: string | components["schemas"]["StackVariable"];
                args?: string | components["schemas"]["StackVariable"];
            } | components["schemas"]["StackVariable"];
            /** @description A map of environment variables that will be injected into the container. */
            environment_vars?: {
                [key: string]: string | components["schemas"]["StackVariable"];
            } | components["schemas"]["StackVariable"];
            /** @description Container namespaces to apply. By default, all are applied. Removing/changing this can have security implications. */
            namespaces?: ("ipc" | "pid" | "uts" | "network" | "mount" | "user" | "cgroup")[] | components["schemas"]["StackVariable"];
            /** @description Sysctl options to apply. */
            sysctl?: {
                [key: string]: string | components["schemas"]["StackVariable"];
            } | components["schemas"]["StackVariable"];
            /** @description RLIMIT options to apply. */
            rlimits?: {
                [key: string]: {
                    hard: number | components["schemas"]["StackVariable"];
                    soft: number | components["schemas"]["StackVariable"];
                };
            } | components["schemas"]["StackVariable"];
            /** @description Configuration options for seccomp. Cycle enables seccomp by default. */
            seccomp?: {
                disable: boolean | components["schemas"]["StackVariable"];
                rules: ({
                    capabilities: {
                        includes: string | components["schemas"]["StackVariable"];
                        excludes: string | components["schemas"]["StackVariable"];
                    } | components["schemas"]["StackVariable"];
                    syscall: {
                        names: string[];
                        /** @enum {string} */
                        action: "SCMP_ACT_KILL" | "SCMP_ACT_KILL_PROCESS" | "SCMP_ACT_KILL_THREAD" | "SCMP_ACT_TRAP" | "SCMP_ACT_ERRNO" | "SCMP_ACT_TRACE" | "SCMP_ACT_ALLOW" | "SCMP_ACT_LOG" | "SCMP_ACT_NOTIFY";
                        errnoRet?: number;
                        args?: {
                            index: number;
                            value: number;
                            valuetwo?: number;
                            /** @enum {string} */
                            op: "SCMP_CMP_NE" | "SCMP_CMP_LT" | "SCMP_CMP_LE" | "SCMP_CMP_EQ" | "SCMP_CMP_GE" | "SCMP_CMP_GT" | "SCMP_CMP_MASKED_EQ";
                        }[];
                    } | components["schemas"]["StackVariable"];
                } | components["schemas"]["StackVariable"])[] | components["schemas"]["StackVariable"];
            } | components["schemas"]["StackVariable"];
            /** @description Configuration options regarding the underlying host. */
            host?: ({
                /** @description If true, Cycle will mount the `/proc` directory into the container, giving it access to the host metrics. This is useful if you're running i.e. a monitoring agent. */
                expose_proc?: (boolean | null) | components["schemas"]["StackVariable"];
            } | null) | components["schemas"]["StackVariable"];
            /** @description If true, the container process will run in fully-privileged mode. **WARNING** This is considered insecure, and should only be done if you know what you're doing. */
            privileged?: boolean | components["schemas"]["StackVariable"];
            /** @description Additional Linux kernel capabilities to apply to this container process. */
            capabilities?: ("CAP_CHOWN" | "CAP_FSETID" | "CAP_DAC_OVERRIDE" | "CAP_FOWNER" | "CAP_SETFCAP" | "CAP_SETGID" | "CAP_SETUID" | "CAP_KILL" | "CAP_MKNOD" | "CAP_NET_BIND_SERVICE" | "CAP_NET_RAW" | "CAP_AUDIT_WRITE" | "CAP_SYS_CHROOT" | "CAP_SETPCAP" | "CAP_DAC_READ_SEARCH" | "CAP_NET_ADMIN" | "CAP_NET_BROADCAST" | "CAP_SYS_ADMIN" | "CAP_SYS_MODULE" | "CAP_SYS_NICE" | "CAP_SYS_PACCT" | "CAP_SYS_PTRACE" | "CAP_SYS_RAWIO" | "CAP_SYS_RESOURCE" | "CAP_SYS_BOOT" | "CAP_SYS_TIME" | "CAP_SYS_TTY_CONFIG" | "CAP_SYSLOG" | "CAP_AUDIT_CONTROL" | "CAP_AUDIT_READ" | "CAP_IPC_LOCK" | "CAP_IPC_OWNER" | "CAP_LINUX_IMMUTABLE" | "CAP_MAC_ADMIN" | "CAP_MAC_OVERRIDE" | "CAP_BLOCK_SUSPEND" | "CAP_LEASE" | "CAP_WAKE_ALARM")[] | components["schemas"]["StackVariable"];
            /** @description Configuration options for the root filesystem. */
            rootfs?: {
                /** @description If true, the container's filesystem will be read-only. */
                readonly: boolean | components["schemas"]["StackVariable"];
            } | components["schemas"]["StackVariable"];
        };
        /**
         * StackSpecContainerConfigResources
         * @description Configuration options for container resource limits and reserves.
         */
        StackSpecContainerConfigResources: {
            cpu: {
                shares?: {
                    limit: number | components["schemas"]["StackVariable"];
                    reserve: number | components["schemas"]["StackVariable"];
                } | components["schemas"]["StackVariable"];
                cpus?: string;
            } | components["schemas"]["StackVariable"];
            ram: {
                limit?: string | components["schemas"]["StackVariable"];
                reserve?: string | components["schemas"]["StackVariable"];
                swappiness?: number | components["schemas"]["StackVariable"];
            } | components["schemas"]["StackVariable"];
        };
        /**
         * StackSpecContainerConfigIntegrations
         * @description Configuration options for additional integrations/features that Cycle provides.
         */
        StackSpecContainerConfigIntegrations: {
            /** @description Enable additional webhooks that Cycle will call out to during the course of a container's lifetime. All webhooks send a payload as an object containing the instance, container, server, and environment IDs. */
            webhooks?: ({
                /** @description Webhooks that are triggered during a container event. */
                events?: ({
                    /** @description Cycle will call this endpoint when the container is deployed. */
                    deploy?: (string | null) | components["schemas"]["StackVariable"];
                    /** @description Cycle will call this endpoint when the container is started. */
                    start?: (string | null) | components["schemas"]["StackVariable"];
                    /** @description Cycle will call this endpoint when the container is stopped. */
                    stop?: (string | null) | components["schemas"]["StackVariable"];
                } | null) | components["schemas"]["StackVariable"];
                /** @description The webhook to hit when the container's configuration is changed. */
                config?: (string | null) | components["schemas"]["StackVariable"];
            } | null) | components["schemas"]["StackVariable"];
            /** @description When enabled, this integration will configure Let's Encrypt certificates that will be injected into the container at runtime. The certificates will be managed by the platform and renewed automatically. */
            lets_encrypt?: ({
                certificate_path?: (string | null) | components["schemas"]["StackVariable"];
                chain_path?: (string | null) | components["schemas"]["StackVariable"];
                key_path?: (string | null) | components["schemas"]["StackVariable"];
                bundle_path?: (string | null) | components["schemas"]["StackVariable"];
                additional_certs_path?: (string | null) | components["schemas"]["StackVariable"];
            } | null) | components["schemas"]["StackVariable"];
            /** @description When enabled, Cycle will fetch and inject remote files into the container at the specified destination during runtime. */
            files?: ({
                source: components["schemas"]["StackVariable"] | string;
                destination: string | components["schemas"]["StackVariable"];
            }[] | null) | components["schemas"]["StackVariable"];
            /** @description When enabled, Cycle will automatically manage backups of this container. This is only available for stateful containers. */
            backups?: ({
                /** @description An identifier of an integration that supports backups. All backups will be sent to this destination. */
                integration_id?: components["schemas"]["HybridIdentifier"] | components["schemas"]["StackVariable"];
                /** @description Configuration options for how the container should be backed up. */
                backup: {
                    /** @description The command to run to capture a backup. The output sent to `STDOUT` will be captured and sent to the specified integration. */
                    command: string | components["schemas"]["StackVariable"];
                    /** @description How long the backup will attempt to run before timing out. */
                    timeout: components["schemas"]["Duration"] | components["schemas"]["StackVariable"] | null;
                    /** @description A cron string describing how often to run the backup command. */
                    cron_string: (string | null) | components["schemas"]["StackVariable"];
                } | components["schemas"]["StackVariable"];
                /** @description Configuration options for how the backup should be restored. */
                restore: ({
                    command: string | components["schemas"]["StackVariable"];
                    /** @description The time in seconds for the restore to attempt to complete before timing out. */
                    timeout: components["schemas"]["Duration"] | components["schemas"]["StackVariable"] | null;
                } | null) | components["schemas"]["StackVariable"];
                /**
                 * @description How long the platform will keep backups. Default is 1 year.
                 * @default 365d
                 */
                retention: components["schemas"]["Duration"] | components["schemas"]["StackVariable"] | null;
            } | null) | components["schemas"]["StackVariable"];
            /** @description When enabled, Cycle will mount a shared host directory into this container. The directory will be shared with all other containers that mount it. */
            shared_file_systems?: ({
                [key: string]: {
                    writable: boolean | components["schemas"]["StackVariable"];
                    mount_point: components["schemas"]["StackVariable"] | string;
                } | components["schemas"]["StackVariable"];
            } | null) | components["schemas"]["StackVariable"];
            /** @description When enabled, allows more customization to be applied to logging for the container. */
            logs?: {
                /** @description When enabled, log drain allows logs to be exported to a third party service. */
                drain?: {
                    /** @description The URL to the third party logging service where logs will be sent. */
                    url: string | components["schemas"]["StackVariable"];
                    /** @description The format Cycle will use to send the logs. */
                    format?: ("ndjson-headers" | "ndjson-raw") | null | components["schemas"]["StackVariable"];
                } | null | components["schemas"]["StackVariable"];
            } | null | components["schemas"]["StackVariable"];
        };
        /**
         * StackSpecContainerVolume
         * @description A container volume configuration.
         */
        StackSpecContainerVolume: {
            /** @description Configuration options for local volumes. */
            local?: {
                /** @description The maximum size this volume can grow to. Container volumes on Cycle are thinly provisioned, meaning this isn't an allocation - the volume will only use the space it needs up to this size. */
                max_size: string | components["schemas"]["StackVariable"];
                /** @description A boolean where true signifies using the largest drive over 2TB for the target server. */
                storage_pool?: boolean | components["schemas"]["StackVariable"];
            } | components["schemas"]["StackVariable"];
            /** @description The path this volume should be mounted at inside the container. */
            destination: string | components["schemas"]["StackVariable"];
            /** @description If true, the container will be unable to write data to the volume. */
            read_only?: boolean | components["schemas"]["StackVariable"];
            /** @description Indicates that the volume will be used as unformatted block storage.
             *      */
            block_device?: boolean | components["schemas"]["StackVariable"];
            /** @description Configuration options for setting up remote access to this volume via SFTP. */
            remote_access?: {
                /** @description If true, this volume will be accessible over SFTP. */
                enable: boolean | components["schemas"]["StackVariable"];
                /** @description A list of IPs that SFTP access will be limited to. */
                ips?: string[] | components["schemas"]["StackVariable"];
                /** @description If set, Cycle will call out to this URL for authentication. Anything other than a 200 response will be considered a validation failure. */
                webhook?: string | components["schemas"]["StackVariable"];
                /** @description The password used for logging in to this volume via SFTP. */
                password: {
                    /** @description The algorithm the password is encoded with. `raw` means the password is plain-text. */
                    algorithm: ("raw" | "sha512" | "md5") | components["schemas"]["StackVariable"];
                    /** @description The password string. */
                    data: string | components["schemas"]["StackVariable"];
                } | components["schemas"]["StackVariable"];
            } | components["schemas"]["StackVariable"];
        };
        /**
         * StackSpecContainer
         * @description A container template defined within a stack.
         */
        StackSpecContainer: {
            /** @description The human-readable name of this container. */
            name: string;
            /** @description Details about the image used for this container. */
            image: components["schemas"]["StackSpecContainerImage"] | components["schemas"]["StackVariable"];
            annotations?: ({
                [key: string]: unknown;
            } | null) | components["schemas"]["StackVariable"];
            /** @description Whether or not to mark the container as stateful when deployed. Stateful containers can utilize volumes (stateful data) and are generally used for running databases or other data management applications. */
            stateful: boolean | components["schemas"]["StackVariable"];
            config: {
                network: components["schemas"]["StackSpecContainerConfigNetwork"] | components["schemas"]["StackVariable"];
                deploy: components["schemas"]["StackSpecContainerConfigDeploy"] | components["schemas"]["StackVariable"];
                /** @description Configuration options for auto-scaling. */
                scaling?: components["schemas"]["StackSpecContainerConfigScaling"] | components["schemas"]["StackVariable"] | null;
                runtime?: components["schemas"]["StackSpecContainerConfigRuntime"] | components["schemas"]["StackVariable"] | null;
                resources?: components["schemas"]["StackSpecContainerConfigResources"] | components["schemas"]["StackVariable"] | null;
                integrations?: components["schemas"]["StackSpecContainerConfigIntegrations"] | components["schemas"]["StackVariable"] | null;
            } | components["schemas"]["StackVariable"];
            /**
             * @description The role applied to this container. **Not yet implemented**
             * @enum {string|null}
             */
            role?: "conductor" | null;
            /** @description A list of configurations for volumes that will be attached to the container. Only applicable if the container is set to `stateful`. */
            volumes?: (components["schemas"]["StackSpecContainerVolume"][] | null) | components["schemas"]["StackVariable"];
            /** @description If true, the container is marked as `deprecated`, and cannot be started anymore. Deprecated containers also don't count toward resource utilization. */
            deprecate?: boolean | components["schemas"]["StackVariable"];
            /** @description If true, the container is marked as `locked` and cannot be deleted in any way until the lock is lifted. */
            lock?: boolean | components["schemas"]["StackVariable"];
        };
        /**
         * StackService
         * @description Stack spec configuration options common to all environment services. If one of these properties is defined, all must be.
         */
        StackService: {
            /** @description Whether or not this service should be enabled. */
            enable?: boolean;
            /** @description Whether or not Cycle should run multiple instances of this service for high availability. */
            high_availability?: boolean;
            /** @description Whether or not Cycle should automatically update this service when a new version is released. */
            auto_update?: boolean;
        };
        /** StackSpecDiscoveryConfig */
        StackSpecDiscoveryConfig: {
            empty_set_delay?: components["schemas"]["Duration"] | components["schemas"]["StackVariable"] | null;
            /** @description A custom mapping of hosts - for forced resolution of specific IPs for a domain. */
            hosts?: ({
                [key: string]: {
                    ipv4?: (string[] | null) | components["schemas"]["StackVariable"];
                    ipv6?: (string[] | null) | components["schemas"]["StackVariable"];
                };
            } | null) | components["schemas"]["StackVariable"];
            /** @description A list of custom DNS resolver strings.  Can specifify domains or ips. */
            custom_resolvers?: string[] | components["schemas"]["StackVariable"] | null;
        };
        /**
         * StackSpecDiscoveryService
         * @description Configuration options for the discovery service.
         */
        StackSpecDiscoveryService: {
            service?: components["schemas"]["StackService"] | components["schemas"]["StackVariable"] | null;
            config?: components["schemas"]["StackSpecDiscoveryConfig"] | components["schemas"]["StackVariable"] | null;
        };
        /** StackSpecHAProxyConfigSet */
        StackSpecHaProxyConfigSet: {
            frontend: {
                /** @description The type of traffic expected by the load balancer for this port. Can be either:
                 *      - tcp: Traffic is forwarded without any parsing or additional manipulation.
                 *      - http: Traffic is treated as web traffic. If a LINKED record is configured for a container exposing this port, the domain will be parsed and it will be forwarded to the proper container. This allows multiple services to run on port 80 in the same environment. */
                mode: ("tcp" | "http") | components["schemas"]["StackVariable"];
                /** @description The number of simultaneous connections that can be processed at a time. */
                max_connections: (number | null) | components["schemas"]["StackVariable"];
                /** @description Various options for handling timeouts when communicating with the client. */
                timeouts: ({
                    /** @description The number of seconds the load balancer will wait for a response from a client before disconnecting. */
                    client_secs: (number | null) | components["schemas"]["StackVariable"];
                    /** @description The number of milliseconds the load balancer will wait for a client to send it data when one direction is already closed. This is particularly useful to avoid keeping connections in a waiting state for too long when clients do not disconnect cleanly. */
                    client_fin_ms: (number | null) | components["schemas"]["StackVariable"];
                    /** @description The number of milliseconds the load balancer will wait for a new HTTP request to start coming after a response was set. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.2-timeout%20http-request) for more information. (`http` mode only) */
                    http_keep_alive_ms: (number | null) | components["schemas"]["StackVariable"];
                    /** @description The number of milliseconds the load balancer will wait for a complete HTTP request. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.2-timeout%20http-request) for more information. (`http` mode only) */
                    http_request_ms: (number | null) | components["schemas"]["StackVariable"];
                } | null) | components["schemas"]["StackVariable"];
            } | components["schemas"]["StackVariable"];
            backend: {
                /** @description How connections are balanced across your container instances. Can be one of the following:
                 *      - `roundrobin`: Each container instance is used in turns.
                 *      - `static-rr`: Each container instance is used in turns, but is faster than Round Robin at the expense of being less dynamic.
                 *      - `leastconn`: Routes traffic to the instance with the least number of active connections.
                 *      - `first`: Routes traffic to the first available instance.
                 *      - `source`: The same client IP always reaches the same container instance as long as no instance goes down or up. */
                balance: ("roundrobin" | "static-rr" | "leastconn" | "first" | "source") | components["schemas"]["StackVariable"];
                /** @description Various options for handling timeouts when communicating with a container instance behind the load balancer. */
                timeouts: ({
                    /** @description The number of seconds the load balancer will wait for a response from the container instance. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.2-timeout%20server) for more information. */
                    server_secs: (number | null) | components["schemas"]["StackVariable"];
                    /** @description The number of milliseconds the load balancer will wait for the server to send data when one direction is already closed. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-timeout%20server-fin) for more information. */
                    server_fin_ms: (number | null) | components["schemas"]["StackVariable"];
                    /** @description The number of milliseconds the load balancer will wait for a successful connection to a container instance. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-timeout%20connect) for more information. */
                    connect_ms: (number | null) | components["schemas"]["StackVariable"];
                    /** @description The number of milliseconds the load balancer will hold connections in a queue when the maximum number of connections has been reached. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-timeout%20queue) for more information. */
                    queue_ms: (number | null) | components["schemas"]["StackVariable"];
                    /** @description The number of milliseconds the load balancer will allow for inactivity on a bidirectional tunnel. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-timeout%20tunnel) for more information. */
                    tunnel_secs: (number | null) | components["schemas"]["StackVariable"];
                } | null) | components["schemas"]["StackVariable"];
            } | components["schemas"]["StackVariable"];
        };
        /**
         * StackSpecHaProxyConfig
         * @description Describes settings that are passed to HAProxy within the load balancer.
         */
        StackSpecHaProxyConfig: {
            /** @description Settings that are applied to any port that is not overridden in the following ports section. */
            default: components["schemas"]["StackSpecHaProxyConfigSet"] | components["schemas"]["StackVariable"];
            /** @description An object that defines how HAProxy will act on a specific port. The key is a custom port, and the value is the same settings object found under `default` above. */
            ports: {
                [key: string]: components["schemas"]["StackSpecHaProxyConfigSet"] | components["schemas"]["StackVariable"];
            } | components["schemas"]["StackVariable"];
        };
        /** StackSpecHaProxyLbType */
        StackSpecHaProxyLbType: {
            /** @description Allow / disallow traffic to be routed via IPv4. */
            ipv4: boolean | components["schemas"]["StackVariable"];
            /** @description Allow / disallow traffic to be routed via IPv6. */
            ipv6: boolean | components["schemas"]["StackVariable"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "haproxy";
            details: components["schemas"]["StackSpecHaProxyConfig"] | components["schemas"]["StackVariable"] | null;
            /** @description Binds the load balancer to the host server IP address.
             *
             *     **Pros**: This allows for significantly lower cost (utilizing fewer IPv4 addresses), and enables building out a true edge network with lower latency.
             *     **Cons**: Only 1 environment is allowed on the host. This is because the load balancer is the only ingress point for an environment, and if it is sharing
             *     the same IP as the host, that host can only operate under that environment.
             *      */
            bind_host?: (boolean | null) | components["schemas"]["StackVariable"];
        };
        /**
         * StackSpecWafConfig
         * @description Additional configuration options for the web application firewall.
         */
        StackSpecWafConfig: {
            rules: ({
                /** @description Some information about the rule. */
                description: string | components["schemas"]["StackVariable"];
                /** @description A boolean that indicates if the rule should be active or skipped. */
                skip: boolean | components["schemas"]["StackVariable"];
                /** @description A string that describes if the role should allow or deny traffic based on the conditions. */
                type: ("allow" | "deny") | components["schemas"]["StackVariable"];
                /** @description A string that describes if both attributes need to be true (match all) or if only one of the conditions needs to be true (match any). */
                match?: ("any" | "all") | components["schemas"]["StackVariable"];
                /** @description An array of the specific conditions for the rule. */
                conditions: ({
                    /** @description A string that describes the match type for the condition. */
                    type: ("ip-match" | "geo-match" | "url-match" | "method-match" | "header-match") | components["schemas"]["StackVariable"];
                    /** @description A string that indicates the range of values relative to the value property. */
                    operator: ("==" | "!=" | ">" | "<" | ">=" | "<=") | components["schemas"]["StackVariable"];
                    /** @description The value corresponding to the condition type. */
                    value: string | components["schemas"]["StackVariable"];
                } | components["schemas"]["StackVariable"])[] | components["schemas"]["StackVariable"];
            } | components["schemas"]["StackVariable"])[] | components["schemas"]["StackVariable"];
        };
        /**
         * StackSpecTcpTransportConfig
         * @description Additional configuration options for the TCP transport mode.
         */
        StackSpecTcpTransportConfig: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "tcp";
            details: {
                connections: {
                    [key: string]: unknown;
                } | components["schemas"]["StackVariable"];
                /** @description Configuration options for how telemetry is handled on the load balancer. */
                telemetry: {
                    [key: string]: unknown;
                } | components["schemas"]["StackVariable"];
            } | components["schemas"]["StackVariable"];
        };
        /**
         * StackSpecHttpTransportConfig
         * @description Additional configuration options for the HTTP transport mode.
         */
        StackSpecHttpTransportConfig: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "http";
            details: {
                connections: {
                    max_idle_conns_per_connection: (number | null) | components["schemas"]["StackVariable"];
                } | components["schemas"]["StackVariable"];
                telemetry: {
                    /** @description Determines how many URLs the load balancer will track at one time. Defaults to 150. */
                    max_trackable_urls?: (number | null) | components["schemas"]["StackVariable"];
                    /** @description Whether or not to track invalid requests. An invalid request is a request that came in that no router existed for. Usually this means bot requests. Defaults to false. */
                    track_invalid_requests?: (boolean | null) | components["schemas"]["StackVariable"];
                    /** @description An array of paths to exclude from tracking. */
                    ignore_paths?: (string[] | null) | components["schemas"]["StackVariable"];
                } | components["schemas"]["StackVariable"];
            } | components["schemas"]["StackVariable"];
        };
        /**
         * StackSpecUdpTransportConfig
         * @description Additional configuration options for the UDP transport mode.
         */
        StackSpecUdpTransportConfig: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "udp";
            details: {
                /** @description Configuration options for how telemetry is handled on the load balancer. */
                telemetry: {
                    [key: string]: unknown;
                } | components["schemas"]["StackVariable"];
            } | components["schemas"]["StackVariable"];
        };
        /**
         * StackSpecTcpRouterConfig
         * @description Additional configuration options for TCP mode routers
         */
        StackSpecTcpRouterConfig: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "tcp";
            details: {
                [key: string]: unknown;
            } | components["schemas"]["StackVariable"];
        };
        /**
         * StackSpecUdpRouterConfig
         * @description Additional configuration options for UDP mode routers
         */
        StackSpecUdpRouterConfig: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "udp";
            details: {
                [key: string]: unknown;
            } | components["schemas"]["StackVariable"];
        };
        /**
         * StackSpecHttpRouterConfig
         * @description Additional configuration options for HTTP mode routers.
         */
        StackSpecHttpRouterConfig: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "http";
            details: {
                /** @description Defines a built-in redirect for HTTP mode routers */
                redirect?: ({
                    /** @description If enabled and a sibling controller exists for port 443, requests will be auto redirected to it. Essentially sets up automatic TLS redirection for this router. */
                    auto_https_redirect: boolean | components["schemas"]["StackVariable"];
                    /** @description If true, any request comes in with "www" prefix will be permanently redirected to the same path without www. */
                    remove_www: boolean | components["schemas"]["StackVariable"];
                    /** @description The port to redirect traffic to. */
                    port?: (number | null) | components["schemas"]["StackVariable"];
                    /** @description The scheme to redirect to. (i.e. `https`) */
                    scheme?: (string | null) | components["schemas"]["StackVariable"];
                    /** @description A specific URL to redirect to. */
                    url?: (string | null) | components["schemas"]["StackVariable"];
                } | null) | components["schemas"]["StackVariable"];
                forward?: ({
                    scheme?: (string | null) | components["schemas"]["StackVariable"];
                    /** @description Allows the load balancer to modify content before it reaches the user. */
                    content_mod?: ({
                        /** @description An array that describes a list of replacement match/value pairs. */
                        replace?: (({
                            /** @description String that will be replaced. */
                            match: string | components["schemas"]["StackVariable"];
                            /** @description Replacement value. */
                            value: string | components["schemas"]["StackVariable"];
                        } | components["schemas"]["StackVariable"])[] | null) | components["schemas"]["StackVariable"];
                    } | null) | components["schemas"]["StackVariable"];
                    /** @description The URL to forward the request to.
                     *
                     *     Given a path match of `^/example/(.*)$`, a route such as `/example/wow.jpg` would be forwarded as /wow.jpg.
                     *      */
                    url?: string | components["schemas"]["StackVariable"];
                } | null) | components["schemas"]["StackVariable"];
                proxy?: ({
                    /** @description The domain that this router will proxy. */
                    domain?: (string | null) | components["schemas"]["StackVariable"];
                    /** @description The full URL that this router will proxy. */
                    url?: string | components["schemas"]["StackVariable"] | null;
                    /** @description Allows the load balancer to modify content before it reaches the user. */
                    content_mod?: ({
                        /** @description An array that describes a list of replacement match/value pairs. */
                        replace?: (({
                            /** @description String that will be replaced. */
                            match: string | components["schemas"]["StackVariable"];
                            /** @description Replacement value. */
                            value: string | components["schemas"]["StackVariable"];
                        } | components["schemas"]["StackVariable"])[] | null) | components["schemas"]["StackVariable"];
                    } | null) | components["schemas"]["StackVariable"];
                } | null) | components["schemas"]["StackVariable"];
                caching?: ({
                    files?: (({
                        /** @description Regex string that describes the files to cache. */
                        match: string | components["schemas"]["StackVariable"];
                        /** @description Time string that describes the time to live. */
                        ttl: components["schemas"]["Duration"] | components["schemas"]["StackVariable"];
                    } | components["schemas"]["StackVariable"])[] | null) | components["schemas"]["StackVariable"];
                } | null) | components["schemas"]["StackVariable"];
            } | components["schemas"]["StackVariable"];
        };
        /**
         * StackSpecV1LbRouterConfig
         * @description A specific router configuration that describes how traffic matching the rule is handled.
         */
        StackSpecV1LbRouterConfig: {
            match: {
                /** @description The specific domains to match against. */
                domains: (string[] | null) | components["schemas"]["StackVariable"];
                /** @description The specific ports to match against. */
                internal_ports: (number[] | null) | components["schemas"]["StackVariable"];
                path?: (string | null) | components["schemas"]["StackVariable"];
                /** @description Match traffic destined (or not destined) for a particular container. */
                containers?: ({
                    /** @description Match any traffic that would be routed to one of these containers. */
                    include?: (components["schemas"]["HybridIdentifier"][] | null) | components["schemas"]["StackVariable"];
                    /** @description Match any traffic that would NOT be routed to one of these containers. */
                    exclude?: (components["schemas"]["HybridIdentifier"][] | null) | components["schemas"]["StackVariable"];
                } | null) | components["schemas"]["StackVariable"];
            } | components["schemas"]["StackVariable"];
            /** @description How to route the traffic to the destination.
             *     `random`: Pick a valid destination at random.
             *     `round-robin`: Send each request to the 'next' destination on the list, restarting from the beginning when the last destination is used.
             *      */
            mode: ("random" | "round-robin") | components["schemas"]["StackVariable"];
            config: {
                /** @description If a request comes in from the same origin, ensure it hits the same destination. */
                sticky_sessions: boolean | components["schemas"]["StackVariable"];
                /** @description If a destination is unavailable, retry up to [x] times, instead of immediately failing with a 503/504 error. */
                destination_retries: number | components["schemas"]["StackVariable"];
                /** @default null */
                destination_prioritization: ("latency" | "random") | components["schemas"]["StackVariable"] | null;
                /** @description TLS termination configuration. If null, the platform will use the default configuration. Port 443 by default has TLS termination enabled. */
                tls?: ({
                    /** @description [Advanced] Change the domain the controller listens on.
                     *      */
                    server_name?: (string | null) | components["schemas"]["StackVariable"];
                    /** @description If enabled, accept TLS traffic with an invalid certificate. This is usually done for development/testing, and is not recommended for production use. */
                    allow_insecure?: (boolean | null) | components["schemas"]["StackVariable"];
                    /** @description A PEM encoded string of certificates. */
                    client_cert_auth?: (string | null) | components["schemas"]["StackVariable"];
                    /** @description Defines how to validate the connecting TLS certificate.
                     *     `none`: Do not require a TLS certificate to be sent
                     *     `request`: Asks the client to send a TLS certificate, but does not require nor validate it.
                     *     `require`: Requires a certificate be sent for the request to be valid, but does not validate the certificate.
                     *     `require-verify`: Requires both that the client send a certificate, and that the certificate is valid. This is required when using https.
                     *      */
                    client_auth?: ("none" | "request" | "require" | "require-verify") | components["schemas"]["StackVariable"] | null;
                } | null) | components["schemas"]["StackVariable"];
                /** @description Defines how the length of various sorts of timeouts when communicating with the destination. */
                timeouts: {
                    /** @description The duration the load balancer will wait before timing out while attempting to connect to the destination. */
                    destination_connection: components["schemas"]["Duration"] | components["schemas"]["StackVariable"];
                } | components["schemas"]["StackVariable"];
                extension?: null | (components["schemas"]["StackSpecTcpRouterConfig"] | components["schemas"]["StackSpecHttpRouterConfig"] | components["schemas"]["StackSpecUdpRouterConfig"]);
            } | components["schemas"]["StackVariable"];
        };
        /** StackSpecV1LbController */
        StackSpecV1LbController: {
            /** @description A human-readable identifier for this controller. It will default to the port, i.e. `port-443`, but can be renamed to anything, such as the service this controller represents. */
            identifier: string | components["schemas"]["StackVariable"];
            /** @description The port inbound trafic is accepted on. */
            port: number | components["schemas"]["StackVariable"];
            waf?: components["schemas"]["StackSpecWafConfig"] | components["schemas"]["StackVariable"] | null;
            /**
             * V1LbControllerTransport
             * @description Defines how traffic comes in to the load balancer, and how the load balancer handles it.
             */
            transport?: ({
                /** @description When true, this controller is disabled and will not be used. */
                disable: boolean | components["schemas"]["StackVariable"];
                /** @description The kind of traffic (http/tcp/udp) that will be sent to the load balancer. */
                mode: ("tcp" | "udp" | "http") | components["schemas"]["StackVariable"];
                /** @description Defines how the transport for this controller operates. */
                config: {
                    /** @description Enable/disable performance mode. If enabled, some telemetry will be disabled to dedicate full processing to handling requests.
                     *     You will not see per-request breakdowns or URL logging if performance mode is enabled.
                     *      */
                    performance: boolean | components["schemas"]["StackVariable"];
                    /** @description Defines how traffic gets into the load balancer. */
                    ingress: {
                        tls?: ({
                            /** @description Enables or disables TLS. */
                            enable: boolean | components["schemas"]["StackVariable"];
                        } | null) | components["schemas"]["StackVariable"];
                    } | components["schemas"]["StackVariable"];
                    /** @description Defines settings for various types of timeouts. */
                    timeouts: {
                        /** @description The total amount of time a connection can be idle before being killed. */
                        idle: components["schemas"]["Duration"] | components["schemas"]["StackVariable"];
                    } | components["schemas"]["StackVariable"];
                    /** @description Verbosity describes the level of logging detail for the controller */
                    verbosity: ("low" | "normal" | "high" | "debug") | components["schemas"]["StackVariable"];
                    /** @description Extended configurations for the specified transport mode (http/tcp) */
                    extension?: (components["schemas"]["StackSpecTcpTransportConfig"] | components["schemas"]["StackSpecHttpTransportConfig"] | components["schemas"]["StackSpecUdpTransportConfig"]) | components["schemas"]["StackVariable"];
                } | components["schemas"]["StackVariable"];
                /** @description Defines where traffic is sent. Many can be defined per controller. */
                routers: (components["schemas"]["StackSpecV1LbRouterConfig"] | components["schemas"]["StackVariable"])[] | components["schemas"]["StackVariable"];
            } | null) | components["schemas"]["StackVariable"];
        };
        /** StackSpecV1LbConfig */
        StackSpecV1LbConfig: {
            /** @description A configuration for a specific port. */
            controllers: components["schemas"]["StackSpecV1LbController"][] | components["schemas"]["StackVariable"];
            controller_template?: components["schemas"]["StackSpecV1LbController"] | components["schemas"]["StackVariable"] | null;
            waf?: components["schemas"]["StackSpecWafConfig"] | components["schemas"]["StackVariable"] | null;
        };
        /** StackSpecV1LbType */
        StackSpecV1LbType: {
            /** @description Allow / disallow traffic to be routed via IPv4. */
            ipv4: boolean | components["schemas"]["StackVariable"];
            /** @description Allow / disallow traffic to be routed via IPv6. */
            ipv6: boolean | components["schemas"]["StackVariable"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "v1";
            details: components["schemas"]["StackSpecV1LbConfig"] | components["schemas"]["StackVariable"];
            /** @description Binds the load balancer to the host server IP address.
             *
             *     **Pros**: This allows for significantly lower cost (utilizing fewer IPv4 addresses), and enables building out a true edge network with lower latency.
             *     **Cons**: Only 1 environment is allowed on the host. This is because the load balancer is the only ingress point for an environment, and if it is sharing
             *     the same IP as the host, that host can only operate under that environment.
             *      */
            bind_host?: (boolean | null) | components["schemas"]["StackVariable"];
        };
        /** StackSpecDefaultLbType */
        StackSpecDefaultLbType: {
            /** @description Allow / disallow traffic to be routed via IPv4. */
            ipv4: boolean;
            /** @description Allow / disallow traffic to be routed via IPv6. */
            ipv6: boolean;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "default";
            details: components["schemas"]["StackSpecHaProxyConfig"] | components["schemas"]["StackSpecV1LbConfig"] | null;
        };
        /**
         * StackSpecLoadBalancerConfig
         * @description The config object for the loadbalancer service.
         */
        StackSpecLoadBalancerConfig: components["schemas"]["StackSpecHaProxyLbType"] | components["schemas"]["StackSpecV1LbType"] | components["schemas"]["StackSpecDefaultLbType"];
        /**
         * StackSpecLoadBalancerService
         * @description Configuration options for the load balancer service.
         */
        StackSpecLoadBalancerService: {
            service?: components["schemas"]["StackService"] | components["schemas"]["StackVariable"] | null;
            config?: components["schemas"]["StackSpecLoadBalancerConfig"] | components["schemas"]["StackVariable"] | null;
        };
        /**
         * StackSpecSchedulerAccessKey
         * @description Custom authorization keys for the scheduler service.
         */
        StackSpecSchedulerAccessKey: {
            /** @description The name given to this access key. */
            name: string | components["schemas"]["StackVariable"];
            /** @description The access key secret. This should be submitted with requests to a publicly accessible scheduler service. */
            secret: string | components["schemas"]["StackVariable"];
            /** @description Whitelisted IPs that are allowed to make requests to the scheduler service. */
            ips?: string[] | components["schemas"]["StackVariable"];
        };
        /**
         * StackSpecSchedulerConfig
         * @description Scheduler specific configuration options.
         */
        StackSpecSchedulerConfig: {
            /** @description If true, this scheduler will be accessible over the public internet. It will enable a LINKED record to be pointed to the scheduler container, and inbound requests to trigger function containers. */
            public: boolean | components["schemas"]["StackVariable"];
            access_keys?: components["schemas"]["StackSpecSchedulerAccessKey"][] | components["schemas"]["StackVariable"];
        } | null;
        /**
         * StackSpecSchedulerService
         * @description Configuration options for the scheduler service.
         */
        StackSpecSchedulerService: {
            service?: components["schemas"]["StackService"] | components["schemas"]["StackVariable"] | null;
            config?: components["schemas"]["StackSpecSchedulerConfig"] | components["schemas"]["StackVariable"] | null;
        };
        /**
         * StackSpecVpnConfig
         * @description VPN specific configuraiton options.
         */
        StackSpecVpnConfig: {
            auth: {
                /** @description The endpoint to hit when attempting to authorize a VPN account. If the endpoint returns a 200 response, access is granted. Otherwise it is denied. */
                webhook?: string | components["schemas"]["StackVariable"];
                /** @description If true, any account with access to this environment on Cycle can use their Cycle credentials to log in to this VPN. */
                cycle_accounts: boolean | components["schemas"]["StackVariable"];
                /** @description If true, Cycle will allow custom accounts to be created for logging into this VPN. */
                vpn_accounts: boolean | components["schemas"]["StackVariable"];
            } | components["schemas"]["StackVariable"];
            allow_internet: boolean | components["schemas"]["StackVariable"];
        };
        /**
         * StackSpecVpnService
         * @description Configuration options for the VPN service.
         */
        StackSpecVpnService: {
            service?: components["schemas"]["StackService"] | components["schemas"]["StackVariable"] | null;
            config?: components["schemas"]["StackSpecVpnConfig"] | components["schemas"]["StackVariable"] | null;
        };
        /**
         * StackSpec
         * @description A Cycle stack file is an "environment as code". This allows an environment to be generated consistently based on a fixed specification.
         *     Stack files can describe multiple containers and their configurations, environment service settings, scoped variables, and important metadata.
         *
         */
        StackSpec: {
            /**
             * @description The version of the Cycle stack file used.
             * @enum {string}
             */
            version: "1.0";
            about?: ({
                /** @description A custom, user-defined version of the stack. */
                version: string;
                /** @description Custom, user-defined details about this stack. */
                description: string;
            } | null) | components["schemas"]["StackVariable"];
            /** @description Describes variables that are assigned to one or more containers at runtime. Can be assigned as an environment variable, written as a file inside the container(s), or accessed over the internal API. */
            scoped_variables?: (components["schemas"]["StackSpecScopedVariable"][] | null) | components["schemas"]["StackVariable"];
            containers: {
                [key: string]: components["schemas"]["StackSpecContainer"];
            } | components["schemas"]["StackVariable"];
            /** @description Settings for any auxillary services deployed as part of the environment, such as load balancer and discovery services. */
            services?: ({
                discovery?: components["schemas"]["StackSpecDiscoveryService"] | components["schemas"]["StackVariable"] | null;
                loadbalancer?: components["schemas"]["StackSpecLoadBalancerService"] | components["schemas"]["StackVariable"] | null;
                scheduler?: components["schemas"]["StackSpecSchedulerService"] | components["schemas"]["StackVariable"] | null;
                vpn?: components["schemas"]["StackSpecVpnService"] | components["schemas"]["StackVariable"] | null;
            } | null) | components["schemas"]["StackVariable"];
            /** @description Additional meta info about the stack. */
            annotations?: {
                [key: string]: unknown;
            } | components["schemas"]["StackVariable"];
        };
        /**
         * StackGitCommit
         * @description Information about the git commit this stack build was created from.
         */
        StackGitCommit: {
            /** @description The commit hash for the given stack build. */
            hash: string;
            /** @description The commit message for the given stack build hash. */
            message: string;
            /** @description The time the commit was made. */
            time: components["schemas"]["DateTime"];
            /** @description Inforamtion about the author of the commit. */
            author: {
                /** @description The commit authors name. */
                name: string;
                /** @description The commit authors email address. */
                email: string;
            };
        };
        /**
         * StackBuildInstructions
         * @description Additional instructions used when generating this stack build.
         */
        StackBuildInstructions: {
            /** @description Git information specifics. */
            git?: {
                /**
                 * @description The type of information the user is passing.
                 * @enum {string}
                 */
                type: "hash" | "tag" | "branch";
                /** @description The actual value to be passed. */
                value: string;
            };
            /** @description Custom variables applied to the stack during build. Any place in the stack where a `{{variable}}` is used is replaced with the value of the variable supplied in this map. */
            variables?: {
                [key: string]: string;
            };
        };
        /** StackBuildState */
        StackBuildState: {
            /**
             * @description The current state of the stack build.
             * @enum {string}
             */
            current: "new" | "importing" | "building" | "verifying" | "saving" | "live" | "deploying" | "deleting" | "deleted";
        } & components["schemas"]["State"];
        /**
         * StackBuildMeta
         * @description A list of meta fields that can be applied to a stack build.
         */
        StackBuildMeta: {
            containers_count?: components["schemas"]["StateCountSummary"];
        };
        /**
         * StackBuild
         * @description A stack build resource.
         */
        StackBuild: {
            id: components["schemas"]["ID"];
            hub_id: components["schemas"]["HubID"];
            /** @description An identifier for the stack related to this build. */
            stack_id: string;
            spec?: components["schemas"]["StackSpec"] | null;
            /** @description Information about the stack build. */
            about: {
                /** @description Information about the version of the stack. */
                version: string;
                /** @description Information describing the stack */
                description: string;
                git_commit?: components["schemas"]["StackGitCommit"];
            };
            instructions: components["schemas"]["StackBuildInstructions"];
            /**
             * StackBuildEvents
             * @description A collection of timestamps for each event in the stack build's lifetime.
             */
            events: {
                /** @description The timestamp of when the stack build was created. */
                created: components["schemas"]["DateTime"];
                /** @description The timestamp of when the stack build was updated. */
                updated: components["schemas"]["DateTime"];
                /** @description The timestamp of when the stack build was deleted. */
                deleted: components["schemas"]["DateTime"];
            };
            state: components["schemas"]["StackBuildState"];
            meta?: components["schemas"]["StackBuildMeta"];
        };
        /**
         * StackBuildInclude
         * @description A resource that is associated with a stack build.
         */
        StackBuildIncludes: {
            [key: string]: components["schemas"]["StackBuild"];
        };
        /**
         * StackRepoSource
         * @description A repo source type for a stack.
         */
        StackRepoSource: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "git-repo";
            details: {
                /** @description Specify which file in the repo contains the stack spec. By default, it is `cycle.json` in the root of the repo. */
                stack_file?: string | null;
                /** @description The URL of the repository. */
                url: string;
                /** @description An optional branch arguement.  Default value is `master`. */
                branch?: string;
                /** @description Authentication information for the repository. */
                auth?: components["schemas"]["CredentialsHTTP"] | components["schemas"]["CredentialsSSH"];
                /** @description Repository reference information. */
                ref?: {
                    /** @description The type of reference being used. */
                    type: string;
                    /** @description The value for the given reference type. */
                    value: string;
                };
            };
        };
        /**
         * StackRawSource
         * @description A stack spec resource.
         */
        StackRawSource: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "raw";
            details: components["schemas"]["StackSpec"] | null;
        };
        /**
         * StackSource
         * @description A source for a stack to be created from.
         */
        StackSource: components["schemas"]["StackRepoSource"] | components["schemas"]["StackRawSource"];
        /** StackState */
        StackState: {
            /**
             * @description The current state of the stack.
             * @enum {string}
             */
            current: "live" | "deleting" | "deleted";
        } & components["schemas"]["State"];
        /**
         * StackMeta
         * @description A list of meta fields that can be applied to this stack.
         */
        StackMeta: {
            containers_count?: components["schemas"]["StateCountSummary"];
            builds_count?: components["schemas"]["StateCountSummary"];
        };
        /**
         * Stack
         * @description Stacks are a way to orchestrate multiple containers atomically and automatically.
         */
        Stack: {
            id: components["schemas"]["ID"];
            /** @description A human readable slugged identifier for this stack. */
            identifier: components["schemas"]["Identifier"];
            /** @description A user defined name for the stack resource. */
            name: string;
            hub_id: components["schemas"]["HubID"];
            creator: components["schemas"]["UserScope"];
            source: components["schemas"]["StackSource"];
            state: components["schemas"]["StackState"];
            /** @description A map of default variable values used when building this stack. A variable can be added anywhere in a stack using the format `{{var}}` where `var` would be a key in this map. */
            variables?: {
                [key: string]: string;
            };
            acl?: components["schemas"]["ACL"] | null;
            /**
             * StackEvents
             * @description A collection of timestamps for each event in the Stacks lifetime.
             */
            events: {
                /** @description The timestamp of when the stack was created. */
                created: components["schemas"]["DateTime"];
                /** @description The timestamp of when the stack was updated. */
                updated: components["schemas"]["DateTime"];
                /** @description The timestamp of when the stack was deleted. */
                deleted: components["schemas"]["DateTime"];
                /** @description The timestamp for the last build of the stack. */
                last_build: components["schemas"]["DateTime"];
            };
            meta?: components["schemas"]["StackMeta"];
        };
        /**
         * StackIncludes
         * @description A resource associated with a stack.
         */
        StackIncludes: {
            [key: string]: components["schemas"]["Stack"];
        };
        /**
         * IdentifierIncludes
         * @description A map of identifiers to an array of resource IDs that are associated with it. All IDs point to the same type of resource.
         */
        IdentifierIncludes: {
            [key: string]: components["schemas"]["ID"][];
        };
        /**
         * EnvironmentInclude
         * @description An identity that is associated with an environment.
         */
        EnvironmentIncludes: {
            [key: string]: components["schemas"]["Environment"];
        };
        /**
         * ContainerIncludes
         * @description All includable resources linkable to the given container.
         */
        ContainerIncludes: {
            creators?: components["schemas"]["CreatorInclude"];
            images?: components["schemas"]["ImagesIncludes"];
            stack_builds?: components["schemas"]["StackBuildIncludes"];
            stacks?: components["schemas"]["StackIncludes"];
            "stacks:identifiers"?: components["schemas"]["IdentifierIncludes"];
            environments?: components["schemas"]["EnvironmentIncludes"];
            "environments:identifiers"?: components["schemas"]["IdentifierIncludes"];
        };
        /** ContainerStartActionTask */
        ContainerStartAction: {
            /**
             * @description The name of the action to perform. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "start";
        };
        /** ContainerStopActionTask */
        ContainerStopAction: {
            /**
             * @description The name of the action to perform. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "stop";
        };
        /** ReconfigureContainer */
        ReconfigureContainer: {
            /**
             * @description The action to take. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "reconfigure";
            contents: components["schemas"]["Config"];
        };
        /** ReconfigureVolumeTask */
        ReconfigureVolumes: {
            /**
             * @description The action to take. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "volumes.reconfigure";
            /** @description An array of volume objects to be reconfigured. */
            contents: components["schemas"]["VolumeSummary"][];
        };
        /** ReimageContainer */
        Reimage: {
            /**
             * @description The action to take. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "reimage";
            /** @description Additional information needed to complete the job. */
            contents: {
                /** @description The ID of the image to use when reimaging. */
                image_id: string;
                /** @description A boolean where true signifies the image being used to reimage does not have to have compatibility with the image being replaced. */
                allow_incompatible?: boolean;
                /** @description A boolean where true signifies the user wishes to overwrite the current runtime configuration for the given container during the reimage process. */
                overwrite_runtime_config?: boolean;
            };
        };
        /** ScaleContainer */
        Scale: {
            /**
             * @description The action to take. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "scale";
            /** @description Additional information needed to complete the job. */
            contents: {
                /** @description The number of desired instances to scale to. */
                instances: number;
            };
        };
        /**
         * ServerInstancesSummary
         * @description A Server ID and number of Instances of a specific Container it hosts.
         */
        ServerInstancesSummary: {
            server_id: components["schemas"]["ID"];
            instances: number;
        };
        /** ServerSharedFileSystems */
        ServerSharedFileSystems: {
            mounts?: {
                [key: string]: {
                    /** @description String describing the server mount type. */
                    type: string;
                    /** @description Comma separated string describing the server mount options. */
                    options: string;
                    /** @description String describing the server mount source. */
                    source: string;
                };
            } | null;
            /** @description An object describing directory identifiers with value {}. */
            directories?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * ServerProvider
         * @description A resource regarding the provider a given server is deployed from.
         */
        ServerProvider: {
            /** @description The vendor for the provider this server is deployed from. */
            vendor: string;
            integration_id: components["schemas"]["ID"];
            /** @description The model of the server that is deployed. */
            model: string;
            /** @description The zone of the server that is deployed, if defined. */
            zone?: string | null;
            /** @description A location where the server is deployed. */
            location: string;
            /** @description A provider specific identifier for the server. */
            server: string;
            /** @description The IP's assigned to this server during provisioning. */
            init_ips?: string[];
            /** @description The mac address for the server. */
            mac_addr?: string;
            extra?: {
                [key: string]: unknown;
            };
            provision_options?: {
                encrypt_storage?: boolean;
                storage_size?: number;
                reservation_id?: string;
            };
        };
        /**
         * ServerFeatures
         * @description A set of features a given server can have and their information.
         */
        ServerFeatures: {
            /** @description A boolean where true means the server accepts incoming SFTP connections through the remote volume integration. */
            sftp: boolean;
            /** @description The size of the base volume (where Cycle stores container images on this server). */
            base_volume_gb?: number | null;
            /** @description Configuration options for running gateway services on this server. */
            gateway?: {
                /**
                 * @description The type of gateway service that can be run on this server.
                 * @enum {string}
                 */
                type: "bgp" | "static";
            } | null;
        };
        /**
         * ServerConstraints
         * @description Constraints to apply to the server.
         */
        ServerConstraints: {
            /** @description A list of server tags to put on the given server. */
            tags: string[];
            /** @description Settings for the server, things that are or are not allowed. */
            allow: {
                /** @description A boolean where true means - allow containers with no tags specified to be deployed to this server. */
                pool: boolean;
                /** @description A boolean where true means - allow service containers to be deployed to this container. */
                services: boolean;
                /** @description A boolean where true means - allow twice the normal amount of CPU shares to be allocated to containers deployed to this server. */
                overcommit: boolean;
            };
        };
        /** ServerState */
        ServerState: {
            /**
             * @description The current state of the server.
             * @enum {string}
             */
            current: "new" | "provisioning" | "configuring" | "live" | "deleting" | "deleted";
        } & components["schemas"]["State"];
        /** NodeState */
        NodeState: {
            /**
             * @description The current state of the node.
             * @enum {string}
             */
            current: "new" | "offline" | "authorizing" | "online" | "decommissioned";
            changed: components["schemas"]["DateTime"];
        } & components["schemas"]["State"];
        /**
         * ServerStatsNetwork
         * @description Statistics about the networks on a given server.
         */
        ServerStatsNetwork: {
            /** @description Network interfaces for a given server. */
            interfaces?: {
                [key: string]: {
                    /** @description The interface name. */
                    interface?: string;
                    /** @description Flags for the given interface. */
                    flags?: string;
                    /** @description The maximum transmission unit for the interface. */
                    mtu?: number;
                    /** @description The mac address for the interface. */
                    mac_addr?: string;
                    /** @description An array of IP addresses associated with the interface. */
                    addrs?: string[] | null;
                };
            };
            /** @description The public IPv4 address used to connect to this server. */
            external_ipv4: string;
            /** @description The public IPv6 address used to connect to this server. */
            external_ipv6: string;
        };
        /**
         * ServerStatsUptime
         * @description Statistics describing the uptime of a given server.
         */
        ServerStatsUptime: {
            /** @description The amount in seconds the server has been up (resets on restart). */
            seconds?: number;
            /** @description CPU idle time. */
            cpu_idle?: number;
        };
        /** ServerStatsCpuUsage */
        ServerStatsCpuUsage: {
            user?: number;
            nice?: number;
            system?: number;
            idle?: number;
            iowait?: number;
            irq?: number;
            soft_irq?: number;
            steal?: number;
            guest?: number;
            guest_nice?: number;
        };
        /**
         * ServerStatsCpu
         * @description Statistics about the CPU resources on a server.
         */
        ServerStatsCpu: {
            /** @description The number of CPU's or vCPU's for a given server. */
            cores?: number;
            /** @description An array of processor information objects. */
            processors?: {
                /** @description The model of the processor. */
                model?: string;
                /**
                 * Format: float
                 * @description The speed of the processor.
                 */
                speed?: number;
            }[];
            usage?: components["schemas"]["ServerStatsCpuUsage"];
        };
        /**
         * ServerStatsLoad
         * @description Statistics about the current load on the server.
         */
        ServerStatsLoad: {
            /**
             * Format: float
             * @description The 1 minute load average.
             */
            avg1m: number;
            /**
             * Format: float
             * @description The 5 minute load average.
             */
            avg5m: number;
            /**
             * Format: float
             * @description the 15 minute load average.
             */
            avg15m: number;
        };
        /**
         * ServerStatsRam
         * @description Statistics about the RAM on a given server.
         */
        ServerStatsRam: {
            /** @description The available RAM on the server. */
            available: number;
            /** @description The free RAM on the server. */
            free: number;
            /** @description The total RAM on the server. */
            total: number;
        };
        /**
         * ServerStatsStorage
         * @description Statistics about storage for a given server.
         */
        ServerStatsStorage: {
            /** @description An array of volume group objects. */
            volume_groups: {
                [key: string]: {
                    /** @description A name for the volume group. */
                    name: string;
                    /** @description A number representing the aggregate group volume size in megabytes. */
                    size: number;
                    /** @description The actual volumes. */
                    volumes: {
                        [key: string]: {
                            /** @description The name of the volume. */
                            name: string;
                            /** @description The size in megabytes of the volume. */
                            size: number;
                            /** @description The percent of the volumes size being used by data. */
                            data_percent: number;
                            /** @description The percent of the volumes size being used by meta data. */
                            meta_percent: number;
                            /** @description The name of the volume pool this volume is associated with. */
                            pool: string;
                        };
                    };
                };
            };
            /** @description Records that show information about mounted filesystems where the key is the path to the mount. */
            mounts: {
                [key: string]: {
                    /** @description The device assocaited with the mount. */
                    device?: string;
                    /** @description The type of filesystem in use by the mount. */
                    type: string;
                    /** @description The path the mount is associated with. */
                    mountpoint?: string;
                    /** @description The total amount of storage in KB available at this mount. */
                    total: number;
                    /** @description The amount of uninitialized storage in KB. */
                    free: number;
                    /** @description The amount of storage being used in KB. */
                    used: number;
                };
            };
        };
        /**
         * ServerStatsOS
         * @description Statistics about the operating system installed on the server (CycleOS).
         */
        ServerStatsOS: {
            /** @description The currently installed release version of the OS. */
            release?: string;
            /** @description The currently installed kernel version. */
            kernel?: string;
            /** @description The hostname as set by the given server's OS. */
            hostname?: string;
        };
        /**
         * ServerStatsVersions
         * @description Information about the versions of Cycle services on a given server.
         */
        ServerStatsVersions: {
            /** @description A list of records about Cycle services. */
            services: {
                [key: string]: string;
            };
        };
        /**
         * NodeMetaStats
         * @description Statistics that pertain to a specific node.
         */
        NodeMetaStats: {
            network: components["schemas"]["ServerStatsNetwork"];
            uptime: components["schemas"]["ServerStatsUptime"];
            cpu: components["schemas"]["ServerStatsCpu"];
            load: components["schemas"]["ServerStatsLoad"];
            ram: components["schemas"]["ServerStatsRam"];
            storage: components["schemas"]["ServerStatsStorage"];
            os: components["schemas"]["ServerStatsOS"];
            versions: components["schemas"]["ServerStatsVersions"];
        };
        /**
         * ServerMeta
         * @description A list of meta fields that can be applied to a server.
         */
        ServerMeta: {
            /** @description Infrormation about the status of the server. */
            node?: {
                /** @description The last time this server checked in with the platform. */
                last_checkin: components["schemas"]["DateTime"];
                /** @description An array a drivers associated with the given server. */
                drivers: string[];
                state: components["schemas"]["NodeState"];
                stats: components["schemas"]["NodeMetaStats"];
                /** @description A boolean where true means the platform is reporting the server as healthy. */
                healthy: boolean;
                /** @description A boolean where true means the server is online and reachable by the platform. */
                online: boolean;
            };
            instances_count?: components["schemas"]["StateCountSummary"];
            allocations?: {
                cpu_shares: {
                    total: number;
                    allocatable: number;
                    allocated: number;
                };
                ram: {
                    total_mb: number;
                    allocatable_mb: number;
                    allocated_mb: number;
                };
            };
        };
        /**
         * Server
         * @description The server resource, referring to servers that have been deployed to a Cycle hub.
         */
        Server: {
            id: components["schemas"]["ID"];
            hub_id: components["schemas"]["HubID"];
            /** @description An identifier for the location this server is deployed to. */
            location_id: string;
            /** @description An identifier for the model of server that is deployed. */
            model_id: string;
            /** @description An identifier for the node. */
            node_id: string;
            shared_file_systems: components["schemas"]["ServerSharedFileSystems"];
            /** @description The server hostname. */
            hostname: string;
            creator: components["schemas"]["CreatorScope"];
            provider: components["schemas"]["ServerProvider"];
            /** @description The cluster the given server is deployed to. */
            cluster: string;
            features: components["schemas"]["ServerFeatures"];
            constraints: components["schemas"]["ServerConstraints"];
            autoscale?: {
                group_id: components["schemas"]["ID"];
            } | null;
            /** @description Set to true when a server is created as part of an auto-scale event. */
            ephemeral: boolean;
            /** @description Details about a server's evacuation status. When an evacuation is in progress, no new container instances will be permitted on the server. */
            evacuate?: {
                /** @description The time when this server began evacuating instances. */
                started: components["schemas"]["DateTime"];
            } | null;
            state: components["schemas"]["ServerState"];
            /**
             * ServerEvents
             * @description A collection of timestamps for each event in the server's lifetime.
             */
            events: {
                /** @description The timestamp of when the server was created. */
                created: components["schemas"]["DateTime"];
                /** @description The timestamp of when the server was updated. */
                updated: components["schemas"]["DateTime"];
                /** @description The timestamp of when the server was deleted. */
                deleted: components["schemas"]["DateTime"];
                /** @description The timestamp of when the latest instance was deployed to this server. */
                latest_instance: components["schemas"]["DateTime"];
                /** @description Information about the provisioning of the server. */
                provisioning: {
                    /** @description A timestamp of when the server started provisioning. */
                    started: components["schemas"]["DateTime"];
                    /** @description A timestamp of when the server failed provisioning. */
                    failed: components["schemas"]["DateTime"];
                    /** @description A timestamp of when the server completed provisioning. */
                    completed: components["schemas"]["DateTime"];
                };
            };
            meta?: components["schemas"]["ServerMeta"];
        };
        /**
         * ProviderLocationGeography
         * @description Geographic information about a provider location.
         */
        ProviderLocationGeography: {
            /** @description The latitude of the given provider datacenter. */
            latitude: number;
            /** @description The longitude of the given provider datacenter. */
            longitude: number;
            /** @description The city the datacenter resides in. */
            city: string;
            /** @description The state the datacenter resides in. */
            state: string;
            /** @description The country the datacenter resides in. */
            country: string;
            /** @description The region the datacenter resides in. */
            region: string;
        };
        /**
         * LocationProvider
         * @description Information about the locaiton of the provider.
         */
        ProviderLocationDetails: {
            /** @description An identifier for the given provider */
            identifier: string;
            /** @description The ID of the provider integration associated with this location. */
            integration_id?: components["schemas"]["ID"];
            /** @description A location name returned from the provider. */
            location: string;
            /** @description A location code returned from the provider. */
            code: string;
            availability_zones?: string[];
        };
        /**
         * ProviderLocation
         * @description Location information for a given provider.
         */
        ProviderLocation: {
            id: string;
            /** @description A name for the location. */
            name: string;
            geographic?: components["schemas"]["ProviderLocationGeography"] | null;
            provider: components["schemas"]["ProviderLocationDetails"];
            /** @description A boolean where true means the locaiton is supported by the platform. */
            compatible: boolean;
            /** @description Additional information about available and supported features of the provider location. */
            features: {
                /** @description Available features for the provider location. */
                available: string[];
                /** @description Supported features for the provider location. */
                supported: string[];
            };
            /** @description An abbreviation for the given provider locaiton. */
            abbreviation: string;
            /** @description Additional information about the given provider locaiton. */
            annotations: {
                [key: string]: unknown;
            };
        };
        /**
         * LocationIncludes
         * @description A resource that is associated with a provider location.
         */
        LocationsIncludes: {
            [key: string]: components["schemas"]["ProviderLocation"];
        };
        /** ClusterState */
        ClusterState: {
            /**
             * @description The current state of the cluster.
             * @enum {string}
             */
            current: "live" | "deleting" | "deleted";
        } & components["schemas"]["State"];
        /**
         * Cluster
         * @description Clusters are groups of servers that allow physical separation of resources.
         */
        Cluster: {
            id: string;
            /** @description A human readable slugged identifier for this cluster. */
            identifier: components["schemas"]["Identifier"];
            creator: components["schemas"]["CreatorScope"];
            hub_id: components["schemas"]["HubID"];
            acl?: components["schemas"]["ACL"] | null;
            state: components["schemas"]["ClusterState"];
            /**
             * ClusterEvents
             * @description A collection of timestamps for each event in the cluster's lifetime.
             */
            events: {
                /** @description The timestamp of when the cluster was created. */
                created: components["schemas"]["DateTime"];
                /** @description The timestamp of when the cluster was updated. */
                updated: components["schemas"]["DateTime"];
                /** @description The timestamp of when the cluster was deleted. */
                deleted: components["schemas"]["DateTime"];
            };
        };
        /**
         * CPUServerSpec
         * @description Information about the CPU for a given server.
         */
        CPUSpec: {
            /** @description The number of CPUs. */
            count: number;
            /** @description The number of cores. */
            cores?: number;
            /** @description The number of threads. */
            threads?: number;
            /** @description The type of the CPU. */
            type: string;
            /** @description A boolean where true represents the CPU is shared. */
            shared?: boolean;
            /** @description Extra information about the CPU if there is any. */
            extra?: {
                [key: string]: string;
            };
        };
        /**
         * GPUServerSpec
         * @description Information about a given servers GPU resources.
         */
        GPUSpec: {
            /** @description The number of GPUs. */
            count: number;
            /** @description The number of cores. */
            cores?: number;
            /** @description The amount of virtaul RAM for the GPU. */
            vram_gb?: number;
            /** @description The type of the GPU. */
            type: string;
            /** @description A boolean where true represents the GPU is shared. */
            shared?: boolean;
            /** @description Extra information about the GPU if there is any. */
            extra?: {
                [key: string]: string;
            };
        };
        /**
         * MemoryServerSpec
         * @description Information about the memory resources of a given server.
         */
        MemorySpec: {
            /** @description A number that represents the memory resources in GB. */
            size_gb: number;
            /** @description The type of the memory resources. */
            type: string;
            /** @description Extra inforamtion about the memory resources. */
            extra: {
                [key: string]: string;
            };
        };
        /**
         * StorageServerSpec
         * @description Information about the storage resources for a given server.
         */
        StorageSpec: {
            /** @description The number of storage devices for a given server. */
            count: number;
            /** @description The total amount of storage on a given server, in GB. */
            size_gb: number;
            /** @description The type of the storage device(s). */
            type: string;
            /** @description Extra information about the storage resources for a given server. */
            extra: {
                [key: string]: string;
            };
        };
        /**
         * NetworkServerSpec
         * @description Information about the network resources for a given server.
         */
        NetworkSpec: {
            /** @description The number of network resources for a given server. */
            count: number;
            /**
             * @description The scope of the interfaces.
             * @enum {string}
             */
            scope: "public" | "private" | "shared";
            /** @description The network throughput in MB(per second). */
            throughput: number;
            /** @description The type of the NIC. */
            type: string;
        };
        /**
         * FeaturesServerSpec
         * @description The spec for server features.
         */
        FeaturesSpec: {
            /** @description The type of RAID supported, if any. */
            raid: string | null;
            /** @description Indicates if the model supports virtual machines. */
            hypervisor?: boolean | null;
            /** @description Provider specific features, allowing for additional, unspecified properties. This is an open map for any key-value pairs, accommodating various types of values. */
            extra?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * ServerSpecs
         * @description Specs for a given server
         */
        ServerSpecs: {
            cpu: components["schemas"]["CPUSpec"];
            gpu: components["schemas"]["GPUSpec"];
            memory: components["schemas"]["MemorySpec"];
            storage: components["schemas"]["StorageSpec"][];
            network: components["schemas"]["NetworkSpec"][];
            features: components["schemas"]["FeaturesSpec"];
        };
        /**
         * ProviderServerSpec
         * @description Higher level information about a providers server.
         */
        ProviderServerSpec: {
            /** @description A provider identifier */
            identifier: string;
            integration_id?: components["schemas"]["ID"] | null;
            /** @description A category for the server. */
            category: string;
            /** @description A class for the server. */
            class?: string;
            /** @description The model of the server. */
            model: string;
            /** @description A list of location ID's this server is available. */
            locations: string[];
            availability_zones?: {
                [key: string]: string[];
            };
        };
        /**
         * ProviderServerModel
         * @description A server from a provider.
         */
        ProviderServerModel: {
            id: components["schemas"]["ID"];
            /** @description A name for the server. */
            name: string;
            /** @description A description of the server. */
            description: string;
            specs: components["schemas"]["ServerSpecs"];
            provider: components["schemas"]["ProviderServerSpec"];
            price: components["schemas"]["BillingAmount"];
            /** @description A boolean where true signifies this server is compatible with the platform. */
            compatible: boolean;
            /** @description A boolean where true signifies the server has a limited amount of resources and should only be used for very lightweight workloads. */
            low_resource: boolean;
            /** @description An array of location IDs where this server type is available. */
            location_ids: string[];
        };
        /**
         * ServerModelIncludes
         * @description A resources that assocaited with a provider server.
         */
        ServerModelIncludes: {
            [key: string]: components["schemas"]["ProviderServerModel"];
        };
        /** IntegrationAuth */
        IntegrationAuth: {
            /** @description The region associated with the Integration. */
            region?: string | null;
            /** @description The namespace associated with the Integration. */
            namespace?: string | null;
            /** @description API key for accessing the Integration. */
            api_key?: string | null;
            /** @description Key ID for accessing the Integration. */
            key_id?: string | null;
            /** @description Secret for accessing the Integration. */
            secret?: string | null;
            /** @description Subscription ID for the Integration. */
            subscription_id?: string | null;
            /** @description Client ID for the Integration. */
            client_id?: string | null;
            /** @description Base64 encoded configuration for the Integration. */
            base64_config?: string | null;
        };
        /** IntegrationState */
        IntegrationState: {
            /**
             * @description The current state of the integration.
             * @enum {string}
             */
            current: "new" | "verifying" | "live" | "deleting" | "deleted";
        } & components["schemas"]["State"];
        /** IntegrationAdvancedOptionBoolean */
        IntegrationAdvancedOptionBoolean: {
            title: string;
            key: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "bool";
            default?: boolean | null;
        };
        /** IntegrationAdvancedOptionInt */
        IntegrationAdvancedOptionInt: {
            title: string;
            key: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "int";
            default?: number | null;
        };
        /** IntegrationAdvancedOptionString */
        IntegrationAdvancedOptionString: {
            title: string;
            key: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "string";
            default?: string | null;
        };
        /**
         * IntegrationDefinition
         * @description Describes an integration for a Cycle Hub that can be enabled by the Hub owner.
         */
        IntegrationDefinition: {
            vendor: string;
            name: string;
            supports_verification: boolean;
            supports_multiple: boolean;
            /** @description A list of additional features supported by this Integration. */
            features?: string[] | null;
            /** @description A list of functionality that this integration extends. i.e. ["backups"] */
            extends?: string[] | null;
            /** @description Additional configuration options that are available when using this Integration. These describe additional functionality that Cycle may utilize. */
            extended_configuration?: {
                options?: (components["schemas"]["IntegrationAdvancedOptionBoolean"] | components["schemas"]["IntegrationAdvancedOptionInt"] | components["schemas"]["IntegrationAdvancedOptionString"])[] | null;
            } | null;
            fields?: {
                extra?: {
                    [key: string]: {
                        regex?: string | null;
                        required: boolean;
                        description: string;
                    };
                } | null;
                auth?: {
                    [key: string]: {
                        regex?: string | null;
                        required: boolean;
                        description: string;
                    };
                } | null;
            };
            /** Format: uri */
            url: string;
            public: boolean;
            usable: boolean;
            /** @description If true, the Integration can be edited. Otherwise, to make a change it will need to be deleted and recreated. */
            editable: boolean;
        };
        /**
         * IntegrationMeta
         * @description Additional fields that can be requested for an Integration on fetch.
         */
        IntegrationMeta: {
            /** @description The full Integration definition associated with this Integration. */
            definition?: components["schemas"]["IntegrationDefinition"];
        };
        /** Integration */
        Integration: {
            id: components["schemas"]["ID"];
            /** @description Name of the integration. */
            name: string;
            /** @description Which vendor this integration is associated with. */
            vendor: string;
            identifier: components["schemas"]["Identifier"];
            /** @description Authentication information for the integration, can be null. */
            auth?: components["schemas"]["IntegrationAuth"] | null;
            /** @description Additional key-value pairs associated with the integration. */
            extra?: {
                [key: string]: string;
            } | null;
            creator: components["schemas"]["CreatorScope"];
            /** @description Identifier of the hub associated with the integration. */
            hub_id: components["schemas"]["ID"];
            state: components["schemas"]["IntegrationState"];
            /**
             * IntegrationEvents
             * @description A collection of timestamps for each event in the integration's lifetime.
             */
            events: {
                /** @description The timestamp of when the integration was created. */
                created: components["schemas"]["DateTime"];
                /** @description The timestamp of when the integration was updated. */
                updated: components["schemas"]["DateTime"];
                /** @description The timestamp of when the integration was deleted. */
                deleted: components["schemas"]["DateTime"];
            };
            meta?: components["schemas"]["IntegrationMeta"] | null;
        };
        /**
         * IntegrationsIncludes
         * @description A resource that is associated with an integration.
         */
        IntegrationsIncludes: {
            [key: string]: components["schemas"]["Integration"];
        };
        /**
         * ServerIncludes
         * @description A resource associated with a server.
         */
        ServerIncludes: {
            locations?: components["schemas"]["LocationsIncludes"];
            clusters?: {
                [key: string]: components["schemas"]["Cluster"];
            };
            models?: components["schemas"]["ServerModelIncludes"];
            integrations?: components["schemas"]["IntegrationsIncludes"];
        };
        /**
         * EnvironmentNetworkSummary
         * @description Details about the environment network this instance is a member of.
         */
        EnvironmentNetworkSummary: {
            id: components["schemas"]["ID"];
            network_subnet: string;
            subnet: string;
            ipv6: components["schemas"]["IPNet"] | null;
            legacy: {
                host: number;
                subnet: number;
                ipv4: components["schemas"]["IPNet"] | null;
            } | null;
            mac_addr: string;
            vxlan_tag: number;
        };
        /** InstanceProvider */
        InstanceProvider: {
            /** @description The vendor of the hub provider integration related to the server this instance runs on. */
            vendor: string;
            /** @description An ID of the provider Hub integration that this instance's host node is related to. */
            integration_id: components["schemas"]["ID"];
            /** @description The identifier of the location related to the server this instance runs on. */
            location: string;
        };
        /**
         * InstanceState
         * @description Information about the state of an instance.
         */
        InstanceState: {
            /**
             * @description The current state of the instance.
             * @enum {string}
             */
            current: "new" | "starting" | "migrating" | "running" | "stopping" | "stopped" | "failed" | "deleting" | "deleted";
            /** @description information about the health of the instance. */
            health?: {
                /** @description Describes the healthiness of the instance. Health checks can be configured at the container level.
                 *     - `true`: The instance is considered healthy.
                 *     - `false`: The instance is considered unhealthy.
                 *     - `null`: The instance has not yet reported its health, or a health check has not yet been performed.
                 *      */
                healthy: boolean | null;
                /** @description A timestamp of the last time the instance health was updated. */
                updated: components["schemas"]["DateTime"];
            } | null;
        } & components["schemas"]["State"];
        /**
         * InstanceAutoScale
         * @description Auto-scale details for instances created by auto-scale events.
         */
        InstanceAutoScale: {
            min_ttl: components["schemas"]["DateTime"];
        };
        /**
         * MigrationInstance
         * @description Information about a migrated instance.
         */
        MigrationInstance: {
            /** @description The ID of the instance. */
            instance_id: string;
            /** @description The ID of the server. */
            server_id: string;
        };
        /**
         * InstanceMigration
         * @description Information regarding the migration of an instance, such as the server that the instance came from or the server that the instance was moved to.
         */
        InstanceMigration: {
            to?: components["schemas"]["MigrationInstance"] | null;
            from?: components["schemas"]["MigrationInstance"] | null;
            /** @description A timestamp of when the migration was started. */
            started?: components["schemas"]["DateTime"];
            /** @description A timestamp of when the migration was completed. */
            completed?: components["schemas"]["DateTime"];
            /** @description A key used by the platform to verify the migration. */
            key: string;
            /** @description A boolean where true represents the volumes for the instance should be copied to the new server as well. */
            copy_volumes: boolean;
        };
        /**
         * Instance
         * @description An instance of a Container.
         */
        Instance: {
            id: components["schemas"]["ID"];
            creator: components["schemas"]["CreatorScope"];
            hub_id: components["schemas"]["HubID"];
            /** @description A container identifier for the container that is associated with this instance. */
            container_id: string;
            /** @description A location identifier that's associated with the server this instance is deployed to. */
            location_id: string;
            environment: components["schemas"]["EnvironmentNetworkSummary"];
            /** @description If the instance is stateful, additional details relating to its stateful properties. */
            stateful?: {
                id: components["schemas"]["ID"];
                /** @description The base hostname for the given instance. */
                base_hostname: string;
            } | null;
            /** @description If the instance is a function, additional details relating to its function properties */
            function?: {
                /** @description The seed used for this function. */
                seed: number;
            };
            provider: components["schemas"]["InstanceProvider"];
            /** @description An identifier for the server this instance is deployed to. */
            server_id: components["schemas"]["ID"];
            /**
             * @description The state as it relates to the following. * `active` - instance can be started or stopped. * `purge` - instance should be deleted. * `hibernate` - instance is active but not allowed to run. * `configuring` - this instance is not allowed to start yet
             * @enum {string}
             */
            ready_state: "active" | "purge" | "hibernate" | "configuring";
            /** @description The timestamp of when the instance was purged. */
            purge_time?: components["schemas"]["DateTime"] | null;
            /** @description The hostname of the instance. */
            hostname: string;
            /** @description The type of service this instance is within the environment, if any. */
            service?: components["schemas"]["ServiceContainerIdentifier"];
            extension?: components["schemas"]["ContainerExtension"] | null;
            state: components["schemas"]["InstanceState"];
            autoscale?: components["schemas"]["InstanceAutoScale"] | null;
            migration?: components["schemas"]["InstanceMigration"] | null;
            deployment?: components["schemas"]["Deployment"] | null;
            /**
             * InstanceEvents
             * @description A collection of timestamps for each event in the instance's lifetime.
             */
            events: {
                /** @description The timestamp of when the instance was created. */
                created: components["schemas"]["DateTime"];
                /** @description The timestamp of when the instance was updated. */
                updated: components["schemas"]["DateTime"];
                /** @description The timestamp of when the instance was deleted. */
                deleted: components["schemas"]["DateTime"];
            };
        };
        /**
         * ServerIncludes
         * @description A resource that is associated with a server.
         */
        ServersIncludes: {
            [key: string]: components["schemas"]["Server"];
        };
        /**
         * ContainersIncludes
         * @description A resource that is associated with a container.
         */
        ContainersIncludes: {
            [key: string]: components["schemas"]["Container"];
        };
        /**
         * InstanceIncludes
         * @description A resource associated with an instance.
         */
        InstanceIncludes: {
            creators?: components["schemas"]["CreatorInclude"];
            servers?: components["schemas"]["ServersIncludes"];
            locations?: components["schemas"]["LocationsIncludes"];
            integrations?: components["schemas"]["IntegrationsIncludes"];
            "integrations:identifiers"?: components["schemas"]["IdentifierIncludes"];
            containers?: components["schemas"]["ContainersIncludes"];
            "containers:identifiers"?: components["schemas"]["IdentifierIncludes"];
            environments?: components["schemas"]["EnvironmentIncludes"];
            "environments:identifiers"?: components["schemas"]["IdentifierIncludes"];
        };
        /**
         * SSHToken
         * @description An Instance SSH token.
         */
        SSHToken: {
            id: components["schemas"]["ID"];
            /** @description The ID of the instance being connected to. */
            instance_id: string;
            /** @description The ID of the container from which the instance was created. */
            container_id: string;
            hub_id: components["schemas"]["HubID"];
            creator: components["schemas"]["CreatorScope"];
            /**
             * SSHTokenEvents
             * @description A collection of timestamps for each event in the SSH token's lifetime.
             */
            events: {
                /** @description The timestamp of when the SSH token was created. */
                created: components["schemas"]["DateTime"];
                /** @description The timestamp of when the SSH token was used. */
                used: components["schemas"]["DateTime"];
                /** @description The timestamp of when the SSH token expires. */
                expires: components["schemas"]["DateTime"];
            };
            /** @description A boolean where true represents the token as being a valid token to be used for connection. */
            valid: boolean;
        };
        /**
         * SSHConnectionResponse
         * @description SSH connection information for a given container instance.
         */
        SSHResponse: {
            token: components["schemas"]["SSHToken"];
            /** @description The SSH connection response secret. */
            secret: string;
            /** @description The SSH connection response address. */
            address: string;
        };
        /** MigrateAction */
        Migrate: {
            /**
             * @description The name of the action to perform. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "migration.start";
            contents: {
                /** @description The ID of the server being migrated to. */
                destination_server_id: string;
                /** @description Information about additonal configuration settings used when migrating a stateful instance. */
                stateful?: {
                    /** @description A boolean where true represents the desire to copy the contents of the volume for a given stateful instance with the migration. */
                    copy_volumes: boolean;
                };
            };
        };
        /** RevertMigrationAction */
        RevertMigration: {
            /**
             * @description The name of the action to perform. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "migration.revert";
        };
        /** ExtendVolumeAction */
        ExtendVolume: {
            /**
             * @description The name of the action to perform. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "volume.extend";
            contents: {
                /** @description The ID of the volume that will be extended through this task. */
                volume_id: string;
                /** @description The amount of storage to extend the volume by. Container volumes on Cycle are thinly provisioned, meaning this isn't an allocation - the volume will only use the space it needs up to this size. */
                extend_size: string;
            };
        };
        /**
         * DeployedVolume
         * @description A deployed volume resource.
         */
        DeployedVolume: {
            /** @description The ID of the deployed volume. */
            id: string;
            /** @description The ID of the server the instance is deployed to. */
            server_id: string;
            /** @description The ID of the container the instance was created from. */
            container_id: string;
            /** @description The ID for the volume withing the context of the container. */
            container_volume_id: string;
            /** @description The ID for the container instance this volume is attached to. */
            instance_id: string;
            /** @description A hash used as part of the identification mechanisms for the platform and API. */
            hash: string;
            /** @description The path where the volume is mounted on the instnace filesystem. */
            path: string;
            /** @description Storage information for the volume. */
            storage: {
                /** @description The amount of volume storage used, in MB's */
                used: number;
                /** @description The total amount of volume storage available, in MB's. */
                total: number;
            };
        };
        /**
         * InstanceVolumeSFTP
         * @description Information about connecting to a instance volume over SFTP.
         */
        SFTP: {
            /** @description The hostname for connecting to the volume over SFTP. */
            host: string;
            /** @description The port number to use when connecting. */
            port: number;
            /** @description The username to use when connecting. */
            username: string;
            /** @description Password configuration settings for the remote access of the container volume. */
            password: {
                /**
                 * @description The hashing algorithm used to has the password.
                 * @enum {string}
                 */
                algorithm: "raw" | "sha512" | "md5";
                /** @description The raw or hashed password. */
                data: string;
            };
        };
        /**
         * InstanceVolume
         * @description A container instance volume resource.
         */
        InstanceVolume: {
            id: components["schemas"]["ID"];
            config: components["schemas"]["ContainerVolume"];
            deployed: components["schemas"]["DeployedVolume"];
            sftp: components["schemas"]["SFTP"];
        };
        /**
         * InstanceTelemetryReportRequest
         * @description A summary of report requests and when they occured.
         */
        TelemetryReportRequest: {
            /** @description The ID of the instance this telemetry reporting pertains to. */
            instance_id: string;
            /** @description A timestamp of when the snapshot began. */
            start: components["schemas"]["DateTime"];
            /** @description A timestamp of when the snapshot ended. */
            end: components["schemas"]["DateTime"];
        };
        /**
         * InstanceTelemetryCPUSnapshot
         * @description A telemetry snapshot pertaining to CPU usage.
         */
        CPUSnapshot: {
            /** @description The total number of cores on the originating node the instance is running on. */
            num_cores: number;
            /** @description Usage statistics. */
            usage: {
                /** @description Total amount of VPU time since last restart. */
                total: number;
                /** @description The amount of time in nanoseconds used by the kernel since last restart. */
                kernel: number;
                /** @description The amount of time in nanoseconds taken up for user processes. */
                user: number;
            };
            /** @description Throttling statistics. */
            throttling: {
                /** @description The amount of periods that have passed since the last restart. */
                periods?: number;
                /** @description How many times the instance has been throttled for using all its alloted CPU during a period. */
                throttled_periods?: number;
                /** @description The amount of time in nanoseconds this instnace has spent with throttled CPU resources. */
                throttled_time?: number;
            };
        };
        /** MemoryData */
        MemoryData: {
            /** @description The number in bytes of memory being used by the instance at the time of the snapshot. */
            usage?: number;
            /** @description The highest amoun tof memory usage since the last restart. */
            max_usage?: number;
            /** @description The number of times the memory liimit was exceeded for the instance. */
            fail_count?: number;
            /** @description The maximum number of bytes of memory this instance has acess to. */
            limit?: number;
        };
        /**
         * InstanceTelemetryMemorySnapshot
         * @description A snapshot of memory usage statistics.
         */
        MemorySnapshot: {
            /** @description The number of bytes of page cache memory being used by this instance. */
            cache?: number;
            /** @description The memory usage data. */
            usage?: components["schemas"]["MemoryData"];
            /** @description Memory swap usage data. */
            swap_usage?: components["schemas"]["MemoryData"];
            /** @description Kernal memory usage. */
            kernel_usage?: components["schemas"]["MemoryData"];
            /** @description Kernel TCP buffer usage. */
            kernel_tcp_usage?: components["schemas"]["MemoryData"];
        };
        /**
         * InstanceTelemetryProcessesSnapshot
         * @description Process information for a given snapshot.
         */
        ProcessesSnapshot: {
            /** @description The current number of running processes in the instance. */
            current?: number;
            /** @description The maximum number of running processes for the instance. */
            limit?: number;
        };
        /**
         * InstanceTelemetryNetworkSnapshot
         * @description A snapshot of network usage statistics.
         */
        NetworkSnapshot: {
            /** @description An array of network interfaces attached to this instance. */
            interfaces: {
                name: string;
                rx_bytes: number;
                tx_bytes: number;
            }[];
        };
        /**
         * HugeTLB
         * @description HugeTLB data.
         */
        HugeTLB: {
            /** @description The number of bytes being consumed by huge pages of all sizes. */
            usage?: number;
            /** @description The maximum number of bytes allowed to be used for huge pages for this instance. */
            max?: number;
            /** @description The number of times the hugeTLB memory limit has been exceeded by this instance. */
            fail_count?: number;
        };
        /**
         * InstanceTelemetryResourceSnapshot
         * @description A resource snapshot that shows instance telemetry.
         */
        ResourceSnapshot: {
            /** @description A timestamp of the time this snapshot was captured at. */
            time: components["schemas"]["DateTime"];
            hub_id?: components["schemas"]["HubID"] | null;
            container_id?: components["schemas"]["ID"] | null;
            instance_id?: components["schemas"]["ID"] | null;
            environment_id?: components["schemas"]["ID"] | null;
            server_id?: components["schemas"]["ID"] | null;
            cluster?: components["schemas"]["Identifier"] | null;
            cpu: components["schemas"]["CPUSnapshot"];
            memory: components["schemas"]["MemorySnapshot"];
            processes: components["schemas"]["ProcessesSnapshot"];
            network: components["schemas"]["NetworkSnapshot"];
            hugetlb?: components["schemas"]["HugeTLB"];
        };
        /**
         * InstanceTelemetryReport
         * @description An Instance telemetry report.
         */
        InstanceTelemetryReport: {
            request: components["schemas"]["TelemetryReportRequest"];
            /** @description An array of telemetry snapshots. */
            snapshots: components["schemas"]["ResourceSnapshot"][];
        };
        /**
         * FunctionRuntimeVariables
         * @description Variables that affect the runtime of a function container.
         */
        FunctionRuntimeVariables: {
            /** @description Environment variables to inject into the container. */
            environment_variables?: {
                [key: string]: string;
            } | null;
        };
        /** TriggerAction */
        trigger: {
            /**
             * @description The name of the action to perform. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "trigger";
            contents: {
                /** @description A custom token used for identifying and managing a claim. Can be any valid string 5 characters or more. */
                token: string;
                runtime_variables: components["schemas"]["FunctionRuntimeVariables"];
            };
        };
        /**
         * ContainerBackupTarget
         * @description A target for the given Container Backup.
         */
        ContainerBackupTarget: {
            integration_id: components["schemas"]["HybridIdentifier"];
            /** @description The target for where to store the Container Backup on the destination service. */
            path: string;
            file_id: string;
            /** @description The total size of the backup. */
            size: number;
        };
        /** ContainerBackupState */
        ContainerBackupState: {
            /**
             * @description The current state of the Container Backup.
             * @enum {string}
             */
            current: "saving" | "live" | "deleting" | "deleted";
        } & components["schemas"]["State"];
        /**
         * ContainerBackup
         * @description A Container Backup.
         */
        ContainerBackup: {
            id: components["schemas"]["ID"];
            hub_id: components["schemas"]["HubID"];
            /** @description The ID of the given container. */
            container_id: string;
            /** @description The ID of the instance the backup belongs to. */
            instance_id: string;
            target: components["schemas"]["ContainerBackupTarget"];
            state: components["schemas"]["ContainerBackupState"];
            /**
             * BackupEvents
             * @description A collection of timestamps for each event in the backup's lifetime.
             */
            events: {
                /** @description The timestamp of when the backup was created. */
                created: components["schemas"]["DateTime"];
                /** @description The timestamp of when the backup was updated. */
                updated: components["schemas"]["DateTime"];
                /** @description The timestamp of when the backup was deleted. */
                deleted: components["schemas"]["DateTime"];
            };
        };
        /**
         * ContainerBackupIncludes
         * @description All includable resources linkable to the given Zone.
         */
        ContainerBackupIncludes: {
            integrations?: components["schemas"]["IntegrationsIncludes"];
        };
        /**
         * ContainerBackupLogs
         * @description Backup logs for a given container.
         */
        ContainerBackupLogs: {
            id: components["schemas"]["ID"];
            /** @description An identifier for the container. */
            container_id: string;
            /** @description An identifier for the instance. */
            instance_id: string;
            /** @description An identifier for the backup. */
            backup_id: string;
            hub_id: components["schemas"]["HubID"];
            /**
             * @description The type of the backup log.
             * @enum {string}
             */
            type: "restore" | "backup";
            /** @description The log. */
            log: string;
            error?: {
                message: string;
                message_internal?: string;
                stack?: {
                    file: string;
                    function: string;
                    line: number;
                }[];
            } | null;
            /**
             * BackupLogEvents
             * @description A collection of timestamps for each event in the backup log's lifetime.
             */
            events: {
                /** @description The timestamp of when the backup log was created. */
                created: components["schemas"]["DateTime"];
                /** @description The timestamp of when the backup log was updated. */
                updated: components["schemas"]["DateTime"];
                /** @description The timestamp of when the backup log was deleted. */
                deleted: components["schemas"]["DateTime"];
            };
        };
        /** DNSZoneState */
        ZoneState: {
            /**
             * @description The current state of the zone.
             * @enum {string}
             */
            current: "new" | "pending" | "verifying" | "live" | "disabled" | "deleting" | "deleted";
        } & components["schemas"]["State"];
        /**
         * DNSZone
         * @description DNS (Domain Name System), in short, is a decentralized naming system for computers, services, or other resources connected to the internet or a private network. It is what allows the translation of a URL, such as http://example.com, to an IP address.
         */
        Zone: {
            id: components["schemas"]["ID"];
            hub_id: components["schemas"]["HubID"];
            creator: components["schemas"]["CreatorScope"];
            /** @description The origin for the given DNS zone. */
            origin: string;
            /** @description A boolean where true represents this zone is a hosted zone. */
            hosted: boolean;
            acl?: components["schemas"]["ACL"] | null;
            state: components["schemas"]["ZoneState"];
            /**
             * ZoneEvents
             * @description A collection of timestamps for each event in the DNS zone's lifetime.
             */
            events: {
                /** @description The timestamp of when the DNS zone was created. */
                created: components["schemas"]["DateTime"];
                /** @description The timestamp of when the DNS zone was updated. */
                updated: components["schemas"]["DateTime"];
                /** @description The timestamp of when the DNS zone was deleted. */
                deleted: components["schemas"]["DateTime"];
                /** @description The timestamp of when the DNS zone was last_verification. */
                last_verification: components["schemas"]["DateTime"];
                /** @description The timestamp of when the DNS zone was verified. */
                verified: components["schemas"]["DateTime"];
            };
        };
        /**
         * ZoneIncludes
         * @description All includable resources linkable to the given Zone.
         */
        ZoneIncludes: {
            creators?: components["schemas"]["CreatorInclude"];
        };
        /**
         * RecordIncludes
         * @description All includable resources linkable to the given records.
         */
        RecordIncludes: {
            creators?: components["schemas"]["CreatorInclude"];
            containers?: components["schemas"]["ContainersIncludes"];
            "containers:identifiers"?: components["schemas"]["IdentifierIncludes"];
        };
        /**
         * DNSTLSAttempt
         * @description A DNS TLS certificate generation attempt resource.
         */
        Attempt: {
            id: components["schemas"]["ID"];
            hub_id: components["schemas"]["HubID"];
            /** @description A list of domains associated with the attempt. */
            domains: string[];
            /** @description A timestamp for when the attempt took place. */
            time: components["schemas"]["DateTime"];
            /** @description A boolean where true means the attept was successful at creating the TLS certificate. */
            success: boolean;
            /** @description If success is false this property will be populated with an error. */
            error?: string;
        };
        /**
         * TlsCertificate
         * @description A TLS certificate.
         */
        TlsCertificate: {
            id: components["schemas"]["ID"];
            /** @description Whether or not this certificate was uploaded instead of generated by the platform. */
            user_supplied: boolean;
            domains: string[] | null;
            hub_id?: components["schemas"]["ID"] | null;
            expires: components["schemas"]["DateTime"];
            state: {
                /**
                 * @description The current state of the TLS certificate.
                 * @enum {string}
                 */
                current: "new" | "processing" | "live" | "deprecated";
            } & components["schemas"]["State"];
            /**
             * TlsCertificateEvents
             * @description A collection of timestamps for each event in the TLS certificate's lifetime.
             */
            events: {
                /** @description The timestamp of when the TLS certificate was created. */
                created: components["schemas"]["DateTime"];
                /** @description The timestamp of when the TLS certificate was updated. */
                updated: components["schemas"]["DateTime"];
                /** @description The timestamp of when the TLS certificate was deleted. */
                deleted: components["schemas"]["DateTime"];
                /** @description The timestamp of when the TLS certificate was generated. */
                generated: components["schemas"]["DateTime"];
            };
        };
        /**
         * MonitoringTierDetails
         * @description Detailed information about a monitoring tier's features.
         */
        MonitoringTierDetails: {
            /** @description Whether or not this tier is a selectable monitoring tier for an environment. A disabled tier may be either one coming in the future, or a legacy tier that is no longer available, but saved for historical reasons. */
            enabled: boolean;
            /** @description Details on how metrics are handled for this tier. */
            metrics: {
                service_granularity: components["schemas"]["Duration"];
                container_telemetry_granularity: components["schemas"]["Duration"];
                retention_period: components["schemas"]["Duration"];
                downsample_period: components["schemas"]["Duration"];
                /** @description Whether or not custom user-submitted metrics are supported on this tier. */
                custom: boolean;
            };
            /** @description Details on how events are handled for this tier. */
            events: {
                retention_period: components["schemas"]["Duration"];
                /** @description Whether or not custom user-submitted events are supported on this tier. */
                custom: boolean;
            };
            /** @description Details on how logs are handled for this tier. */
            logs: {
                /** @description Whether or not log analysis is enabled on this tier. */
                analysis: boolean;
                /** @description Whether or not log aggregation is enabled on this tier. */
                aggregation: boolean;
                /** @description Whether or not custom user-submitted logs are supported on this tier. */
                custom: boolean;
            };
            features: {
                public_ping_monitor: boolean;
            };
            /** @description The monthly cost (in mills) of enabling this tier on an environment. */
            cost_mills: number;
        };
        /**
         * EnvironmentStartAction
         * @description A task to start an environment.
         */
        EnvironmentStartAction: {
            /**
             * @description The name of the action to perform. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "start";
        };
        /**
         * EnvironmentStopAction
         * @description A task to stop an environment.
         */
        EnvironmentStopAction: {
            /**
             * @description The name of the action to perform. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "stop";
        };
        /**
         * EnvironmentInitializeAction
         * @description A task to initialize an environment.
         */
        EnvironmentInitializeAction: {
            /**
             * @description The name of the action to perform. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "initialize";
        };
        /**
         * EnvironmentReconfigureDeploymentsAction
         * @description A task to reconfigure deployment mappings on an environment.
         */
        EnvironmentReconfigureDeploymentsAction: {
            /**
             * @description The action to take. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "deployments.reconfigure";
            contents: {
                tags: components["schemas"]["EnvironmentDeploymentTags"];
            };
        };
        /**
         * EnvironmentServiceContainerSummary
         * @description An object containing information about a service container associated with this environment.
         */
        EnvironmentServiceContainerSummary: {
            /** @description Whether or not the service is enabled. */
            enable: boolean;
            container_id?: components["schemas"]["ID"] | null;
            state: components["schemas"]["ContainerState"];
            /** @description Whether or not the service is deployed in high availability */
            high_availability: boolean;
            /** @description Whether or not the service will be automatically updated as new versions are released. Otherwise, the service will need to be restarted manually. */
            auto_update?: boolean;
        };
        /**
         * EnvironmentSummary
         * @description Contains useful and relevant data/statistics for an environment that would otherwise be several separate API calls.
         */
        EnvironmentSummary: {
            id: components["schemas"]["ID"];
            state: components["schemas"]["EnvironmentState"];
            /**
             * EnvironmentServiceSummary
             * @description An object containing information about the service containers associated with this container. Each key is the name of a service, one of `discovery`, `vpn`, or `loadbalancer`.
             */
            services: {
                loadbalancer?: components["schemas"]["EnvironmentServiceContainerSummary"] | null;
                discovery?: components["schemas"]["EnvironmentServiceContainerSummary"] | null;
                vpn?: components["schemas"]["EnvironmentServiceContainerSummary"] | null;
                scheduler?: components["schemas"]["EnvironmentServiceContainerSummary"] | null;
                gateway?: components["schemas"]["EnvironmentServiceContainerSummary"] | null;
            };
            /**
             * EnvironmentSummaryStats
             * @description Statistics about the containers and instances associated with this environment.
             */
            stats: {
                containers: components["schemas"]["StateCountSummary"];
                instances: components["schemas"]["StateCountSummary"];
                /** @description A summary of instance counts, keyed by the host server ID. */
                servers?: {
                    [key: string]: components["schemas"]["StateCountSummary"];
                };
            };
        };
        /**
         * ScopedVariableScope
         * @description Information about the assignment of the scoped variable and how it is invoked.
         */
        ScopedVariableScope: {
            /** @description Information about the assignment of the scoped variable to different containers in the environment. */
            containers: {
                /** @description A boolean where true represents the scoped variables is globally assigned to all current and future containers in the environment. */
                global: boolean;
                /** @description An array of container IDs, where each container identified will have access to the scoped variable. */
                ids: string[];
                /** @description An array of container identifiers, where each container identfied will have access to the scoped variable. */
                identifiers: string[];
            };
        };
        /**
         * ScopedVariableAccess
         * @description The way the scoped variable is accessed.
         */
        ScopedVariableAccess: {
            /** @description When set to true, this scoped variable is set as an environment variable inside the container. */
            env_variable?: {
                /** @description The name of the environment variable set on the target container. */
                key: string;
            } | null;
            /** @description If set, this scoped variable will be available over the internal API. Contains settings for accessing this variable over the internal API. */
            internal_api?: {
                /** @description Duration is a time string that the internal API will serve that variable after runtime starts. */
                duration?: components["schemas"]["Duration"] | null;
            } | null;
            /** @description File is an object that describes a path to mount the file to inside the container. */
            file?: {
                /** @description When true, Cycle will interpret this variable as a base-64 encoded string, and decode it before passing it into the container. */
                decode: boolean;
                /** @description The path to mount the file to inside the container. */
                path: string | null;
            } | null;
        };
        /**
         * URLScopedVariableSource
         * @description The `URL` type of scoped variable `value`, referred to as a source. This means the value of this variable is the result of calling the given URL. It is dynamic, in that Cycle will refetch the contents on every start.
         */
        URLSource: {
            /**
             * @description The type of source value, can be either `raw` or `url`. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "url";
            details: {
                /** @description The URL to call to produce the value. */
                url: string;
                /** @description Additional headers that can be attached to the URL request. Useful for adding metadata to third-party services. */
                headers: {
                    [key: string]: unknown;
                };
                /** @description A URL that can be provided to authenticate with a third party secret service. Cycle will make a request to this URL before fetching the secret URL, and use the response as the value of an Authorization header when requesting the secret. */
                auth_token_url: string | null;
            };
        };
        /**
         * RawScopedVariableSource
         * @description The `raw` type of scoped variable `value`, referred to as a source.  This means that the value is static, not the result of a call to an external or internal URL.
         */
        RawSource: {
            /**
             * @description The type of source value, can be either `raw` or `url`. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "raw";
            details: {
                /** @description The value of the variable. */
                value: string;
                /** @description A boolean where true represents the text the user is entering will be multi line. */
                blob: boolean;
                secret?: {
                    /** @description A string describing the IV Hex associated with the encryption of the variable */
                    iv?: string;
                    /** @description A user specified hint that will suggest what the encryption key might be */
                    hint?: string | null;
                } | null;
            };
        };
        /** ScopedVariableState */
        ScopedVariableState: {
            /**
             * @description The current state of the scoped variable.
             * @enum {string}
             */
            current: "live" | "deleting" | "deleted";
        } & components["schemas"]["State"];
        /**
         * ScopedVariable
         * @description Scoped variables are a way for users to dynamically allocate runtime specific environment variables across any number of containers in an environment.
         */
        ScopedVariable: {
            id: components["schemas"]["ID"];
            creator: components["schemas"]["CreatorScope"];
            hub_id: components["schemas"]["HubID"];
            /** @description An identifier used to reference the environment this resource is scoped to. */
            environment_id: string;
            identifier: components["schemas"]["Identifier"];
            scope: components["schemas"]["ScopedVariableScope"];
            access: components["schemas"]["ScopedVariableAccess"];
            source: null | (components["schemas"]["URLSource"] | components["schemas"]["RawSource"]);
            state: components["schemas"]["ScopedVariableState"];
            /**
             * ScopedVariableEvents
             * @description A collection of timestamps for each event in the Scoped Variable's lifetime.
             */
            events: {
                /** @description The timestamp of when the scoped variable was created. */
                created: components["schemas"]["DateTime"];
                /** @description The timestamp of when the scoped variable was updated. */
                updated: components["schemas"]["DateTime"];
                /** @description The timestamp of when the scoped variable was deleted. */
                deleted: components["schemas"]["DateTime"];
            };
        };
        /**
         * Range
         * @description A start and end date-time pair indicating a range of time
         */
        Range: {
            start: components["schemas"]["DateTime"];
            end: components["schemas"]["DateTime"];
        };
        /** LoadBalancerTelemetryControllerMetrics */
        LoadBalancerTelemetryControllerMetrics: {
            /** LoadBalancerTelemetryControllerDisconnectsMetrics */
            disconnects: {
                no_error: number;
                request_invalid: number;
                timeout_idle: number;
                router_none: number;
                router_nomatch: number;
                destination_unavailable: number;
                unknown_error: number;
            };
            connections: number;
            requests: number;
            bytes_transmitted: number;
            bytes_received: number;
        };
        /**
         * LoadBalancerTelemetryReport
         * @description Aggregated load balancer telemetry across all instances for a given range.
         */
        LoadBalancerTelemetryReport: {
            created: components["schemas"]["DateTime"];
            range: components["schemas"]["Range"];
            snapshots: {
                time: components["schemas"]["DateTime"];
                controller: components["schemas"]["Identifier"];
                metrics: components["schemas"]["LoadBalancerTelemetryControllerMetrics"];
            }[] | null;
        };
        /** LoadBalancerTelemetryRouterMetrics */
        LoadBalancerTelemetryRouterMetrics: {
            destinations: {
                [key: string]: {
                    connections: {
                        success: number;
                        unavailable: number;
                        errors?: {
                            [key: string]: number;
                        };
                        bytes_transmitted?: number;
                        bytes_received?: number;
                    } | null;
                    requests: {
                        total: number;
                        responses?: {
                            [key: string]: number;
                        };
                        errors?: {
                            [key: string]: number;
                        };
                    } | null;
                    latency_ms?: number[];
                    instance_id: string;
                    container_id: string;
                };
            };
        };
        /** LoadBalancerTelemetryUrlRequestHandler */
        LoadBalancerTelemetryUrlRequestHandler: {
            /** @description The number of hits to a specific URL handler. */
            hits: number;
            /** @description The cumulative ms of response time across all hits. */
            timing_ms: number;
        };
        /** LoadBalancerTelemetryUrlMetrics */
        LoadBalancerTelemetryUrlMetrics: {
            destinations: {
                [key: string]: {
                    requests: {
                        /** @description The host name of the URL request. */
                        host: string;
                        /** @description The HTTP method of the URL request. */
                        method: string;
                        /** @description The path portion of the inbound URL request. */
                        path: string;
                        /** @description The number of requests to a this URL. */
                        total: number;
                        /** @description The date of the most recent hit to the URL. */
                        last_hit: components["schemas"]["DateTime"];
                        /** @description An object describing the relative breakdown of proxy, cache, forward, and redirect URL responses. */
                        handlers: {
                            /** @description Object containing hit count and timing data for proxy responses. */
                            proxy: components["schemas"]["LoadBalancerTelemetryUrlRequestHandler"];
                            /** @description Object containing hit count and timing data for cache responses. */
                            cache: components["schemas"]["LoadBalancerTelemetryUrlRequestHandler"];
                            /** @description Object containing hit count and timing data for forward responses. */
                            forward: components["schemas"]["LoadBalancerTelemetryUrlRequestHandler"];
                            /** @description Object containing hit count and timing data for redirect responses. */
                            redirect: components["schemas"]["LoadBalancerTelemetryUrlRequestHandler"];
                        };
                        /** @description An object where the key is the response type and the value is the number of hits with that response. */
                        responses?: {
                            [key: string]: number;
                        };
                        /** @description An object where the key is the error type and the value is the number of hits with that error. */
                        errors?: {
                            [key: string]: number;
                        };
                    } | null;
                };
            };
        };
        /** LoadBalancerTelemetrySnapshot */
        LoadBalancerTelemetrySnapshot: {
            time: components["schemas"]["DateTime"];
            started: components["schemas"]["DateTime"];
            version?: string;
            dataset_id: number;
            current: {
                router?: components["schemas"]["LoadBalancerTelemetryRouterMetrics"] | null;
                urls?: components["schemas"]["LoadBalancerTelemetryUrlMetrics"] | null;
                metrics: components["schemas"]["LoadBalancerTelemetryControllerMetrics"];
            };
            cumulative: {
                router?: components["schemas"]["LoadBalancerTelemetryRouterMetrics"] | null;
                urls?: components["schemas"]["LoadBalancerTelemetryUrlMetrics"] | null;
                metrics: components["schemas"]["LoadBalancerTelemetryControllerMetrics"];
            };
        };
        /**
         * LoadBalancerLatestTelemetryInstance
         * @description Detailed telemetry for a load balancer instance at a point in time.
         */
        LoadBalancerLatestTelemetryInstance: {
            id: components["schemas"]["ID"];
            hub_id: components["schemas"]["HubID"];
            environment_id: components["schemas"]["ID"];
            container_id: components["schemas"]["ID"];
            instance_id: components["schemas"]["ID"];
            server_id: components["schemas"]["ID"];
            cluster: components["schemas"]["Identifier"];
            time: components["schemas"]["DateTime"];
            controller: components["schemas"]["Identifier"];
            latest?: components["schemas"]["LoadBalancerTelemetrySnapshot"] | null;
            snapshots?: components["schemas"]["LoadBalancerTelemetrySnapshot"][] | null;
        };
        /** LoadBalancerLatestTelemetryController */
        LoadBalancerLatestTelemetryController: {
            time: components["schemas"]["DateTime"];
            controller: components["schemas"]["Identifier"];
            instances?: components["schemas"]["LoadBalancerLatestTelemetryInstance"][] | null;
        };
        /**
         * LoadBalancerLatestTelemetry
         * @description Snapshots of the latest load balancer telemetry
         */
        LoadBalancerLatestTelemetry: {
            created: components["schemas"]["DateTime"];
            controllers?: components["schemas"]["LoadBalancerLatestTelemetryController"][] | null;
        };
        /**
         * LoadBalancerLatestControllers
         * @description Information about the latest controllers that generated traffic.
         */
        LoadBalancerLatestControllers: {
            created: components["schemas"]["DateTime"];
            controllers?: components["schemas"]["LoadBalancerLatestTelemetryController"][] | null;
        };
        /**
         * ImageSourceType
         * @description The type of images in this source.
         * @enum {string}
         */
        ImageSourceType: "stack-build" | "direct" | "bucket";
        /**
         * ImageSourceAbout
         * @description Information about the image source resource.
         */
        ImageSourceAbout: {
            /** @description Some information about the image source resource. */
            description?: string | null;
        };
        /** ImageSourceState */
        ImageSourceState: {
            /**
             * @description The current state of the image source.
             * @enum {string}
             */
            current: "live" | "deleting" | "deleted";
        } & components["schemas"]["State"];
        /**
         * ImageSourceMeta
         * @description A list of meta fields that can be applied to this environment.
         */
        ImageSourceMeta: {
            images_count?: {
                /** @description Number of image sources */
                total: number;
                state: {
                    /** @description Number of images in this source with state new */
                    new: number;
                    /** @description Number of images in this source with state downloading */
                    downloading: number;
                    /** @description Number of images in this source with state building */
                    building: number;
                    /** @description Number of images in this source with state verifying */
                    verifying: number;
                    /** @description Number of images in this source with state saving */
                    saving: number;
                    /** @description Number of images in this source with state live */
                    live: number;
                    /** @description Number of images in this source with state deleting */
                    deleting: number;
                };
            };
        };
        /**
         * ImageSource
         * @description An image source is a set of resources that direct the platform on where it can find the resources needed to build an image resource.
         */
        ImageSource: {
            id: components["schemas"]["ID"];
            /** @description A human readable slugged identifier for this image source. */
            identifier: components["schemas"]["Identifier"];
            type: components["schemas"]["ImageSourceType"];
            hub_id: components["schemas"]["HubID"];
            /** @description A name for the image source resource. */
            name: string;
            about?: components["schemas"]["ImageSourceAbout"];
            origin: components["schemas"]["ImageOrigin"];
            /** @description Configuration options regarding the builder used to create/import Images using this Image Source. */
            builder?: {
                /** @description The ID or Identifier of the Integration used to do the build. */
                integration_id?: components["schemas"]["HybridIdentifier"] | null;
            } | null;
            creator: components["schemas"]["CreatorScope"];
            acl?: components["schemas"]["ACL"] | null;
            state: components["schemas"]["ImageSourceState"];
            /**
             * ImageSourceEvents
             * @description A collection of timestamps for each event in the image source's lifetime.
             */
            events: {
                /** @description The timestamp of when the image source was created. */
                created: components["schemas"]["DateTime"];
                /** @description The timestamp of when the image source was updated. */
                updated: components["schemas"]["DateTime"];
                /** @description The timestamp of when the image source was deleted. */
                deleted: components["schemas"]["DateTime"];
            };
            meta?: components["schemas"]["ImageSourceMeta"];
        };
        /**
         * ImageSourceIncludes
         * @description A resource associated with an image source.
         */
        ImageSourceIncludes: {
            [key: string]: components["schemas"]["ImageSource"];
        };
        /**
         * LoadBalancerLatestControllersIncludes
         * @description Optionally included resources for load balancer controllers
         */
        controllers: {
            creators?: components["schemas"]["CreatorInclude"];
            stack_builds?: components["schemas"]["StackBuildIncludes"];
            stacks?: components["schemas"]["StackIncludes"];
            sources?: components["schemas"]["ImageSourceIncludes"];
        };
        /**
         * VPNInfo
         * @description A summary of a VPN service for a given environment.
         */
        VPNInfoReturn: {
            /** @description A url associated with the VPN service. */
            url: string;
            service: components["schemas"]["VpnEnvironmentService"] | null;
        };
        /**
         * VPNLogin
         * @description A VPN login event record.
         */
        VPNLogin: {
            id: components["schemas"]["ID"];
            /** @description The username used when logging in. */
            username: string;
            /** @description The ID of the environment the VPN service is in. */
            environment_id: string;
            /** @description The IP address of the machine the user has logged in from. */
            ip: string;
            /** @description The timestamp for when the login occured. */
            time: components["schemas"]["DateTime"];
            /** @description A boolean where true means the login attempt was successful. */
            success: boolean;
        };
        /**
         * VPNUser
         * @description A VPN user for a given VPN.
         */
        VPNUsers: {
            id: components["schemas"]["ID"];
            /** @description The username for the login. */
            username: string;
            creator: components["schemas"]["CreatorScope"];
            /** @description A timestamp of the last time the user logged into the VPN. */
            last_login: components["schemas"]["DateTime"];
            hub_id: components["schemas"]["HubID"];
            /** @description An identifier for the environment the VPN service is associated with. */
            environment_id: string;
            /**
             * VPNUserEvents
             * @description A collection of timestamps for each event in the VPN user's lifetime.
             */
            events: {
                /** @description The timestamp of when the VPN user was created. */
                created: components["schemas"]["DateTime"];
                /** @description The timestamp of when the VPN user was updated. */
                updated: components["schemas"]["DateTime"];
                /** @description The timestamp of when the VPN user was deleted. */
                deleted: components["schemas"]["DateTime"];
            };
        };
        /**
         * VpnResetTask
         * @description This will reset the VPN certificates and restart the container. Should be done when the certificates expire, every 1000 days. Then, you will need to redownload the VPN config in order to connect.
         */
        VpnResetTask: {
            /**
             * @description The name of the action to perform. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "reset";
        };
        /** VpnReconfigureTask */
        VpnReconfigureTask: {
            /**
             * @description The action to take. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "reconfigure";
            /** @description Additional information the platform needs to create this job. */
            contents: {
                /** @description A boolean where true means the VPN service is enabled. */
                enable?: boolean;
                /** @description A boolean where `true` represents the desire to run the environment vpn service in high availability mode. */
                high_availability?: boolean | null;
                /** @description A boolean representing if this service container is set to autoupdate or not */
                auto_update?: boolean | null;
                /** @description The config object for the VPN service, in this case without the required fields normally found in a VPN config object. */
                config?: {
                    /** @description If true, routes all traffic through the VPN, even non-Cycle traffic. */
                    allow_internet?: boolean;
                    /** @description Auth configuration for the VPN. */
                    auth?: {
                        /** @description A webhook endpoint to hit. Will be passed the login credentials provided to the user, and should return a 200 status if the login is permitted. */
                        webhook: string | null;
                        /** @description If true, allows any Cycle account with access to the environment to log in to the VPN using their Cycle email and password. */
                        cycle_accounts: boolean;
                        /** @description If true, allows the custom VPN accounts to log in to the VPN. */
                        vpn_accounts?: boolean;
                    };
                } | null;
            };
        };
        /**
         * HubUsageDatum
         * @description A hub usage data point
         */
        HubUsageDatum: {
            time: string;
            servers: number;
            members: number;
            environments: number;
            containers: number;
        };
        /**
         * ActivityContext
         * @description ID context for resources associated with an activity.
         */
        Context: {
            /** @description An ID for the given resource. */
            environment_id?: string;
            /** @description An ID for the given resource. */
            container_id?: string;
            /** @description The identifier of a specific cluster. */
            cluster?: string;
            /** @description An ID for the given resource. */
            instance_id?: string;
            /** @description An ID for the given resource. */
            server_id?: string;
            /** @description An ID for the given resource. */
            stack_id?: string;
            /** @description An ID for the given resource. */
            dns_zone_id?: string;
            /** @description A virtual machine ID. */
            virtual_machine_id?: string;
        };
        /**
         * ActivitySession
         * @description Session info about the activity entry.
         */
        Session: {
            /** @description URL endpoint assocaited with the activity context - does not include domain. */
            url: string;
            /** @description The IP of the account associated with the session. */
            ip: string;
            token: {
                application_id: components["schemas"]["ID"];
                application_capabilities_version: number;
            } | null;
            /** @description The API key ID. */
            api_key: string | null;
        };
        /**
         * ActivityDetail
         * @description Details about a given event that is part of an activity.
         */
        Detail: {
            id?: components["schemas"]["ID"];
            /** @description A number describing the amount of the resource that exists. */
            number?: number;
            /** @description Additional information. */
            string?: string;
        };
        /**
         * ActivityChange
         * @description An object with information of details for before and after a resource changed.
         */
        Change: {
            /** @description A description of the resource that was changed. */
            component: string;
            before?: components["schemas"]["Detail"];
            after?: components["schemas"]["Detail"];
        };
        /**
         * ActivitySecurity
         * @description Security information pertaining to this activity.
         */
        ActivitySecurity: {
            /**
             * @description A risk level assessed by the platform. Depending on the nature of the incident, this may change even if the event type is the same.
             *
             * @enum {string}
             */
            risk: "info" | "low" | "medium" | "high" | "critical";
            /**
             * @description From where the platform has determined this security event originated from.
             * @enum {string}
             */
            surface: "network" | "service" | "fs" | "api";
            /**
             * @description How the platform has handled this security event.
             * @enum {string}
             */
            event: "suggestion" | "notice" | "prevention" | "detection" | "reaction";
            /**
             * @description The type of attack the platform has determined has occurred.
             * @enum {string}
             */
            attack: "none" | "auth-failure" | "brute-force" | "exploit-vulnerability" | "social-engineer" | "service-interruption" | "access-elevation";
        };
        /**
         * ActivityMonitor
         * @description Details related to the monitor that raised this activity event.
         */
        ActivityMonitor: {
            /**
             * @description The severity of the event.
             *
             * @enum {string}
             */
            level: "info" | "low" | "medium" | "high" | "critical";
            /**
             * @description How the platform has handled this monitor event.
             * @enum {string}
             */
            event: "suggestion" | "notice" | "prevention" | "detection" | "reaction";
            /**
             * @description The current state of the monitored resource
             * @enum {string}
             */
            state: "none" | "unknown" | "unreachable" | "flux" | "recovered";
        };
        /**
         * Activity
         * @description A resource representing information about activity taking place on a given hub.
         */
        Activity: {
            id: components["schemas"]["ID"];
            hub_id: components["schemas"]["HubID"];
            /** @description Userscope */
            user: {
                /**
                 * @description The type of user.
                 * @enum {string}
                 */
                type: "account" | "environment" | "platform" | "platform-pipeline" | "employee" | "api-key" | "visitor";
                /** @description The given user's ID. */
                id: string;
            };
            /** @description A number representing the detail level (verbosity) of this activity.
             *
             *     ## Levels
             *     - 0: activity that other users would find useful
             *     - 1: activity that can be useful in tracking down how a user did something
             *     - 2: full activity, can be useful in debugging problems
             *      */
            verbosity: number;
            context: components["schemas"]["Context"];
            session: components["schemas"]["Session"] | null;
            /** @description An array of changes. */
            changes: components["schemas"]["Change"][];
            /** @description A record of additional annotations for the activity. */
            annotations: {
                [key: string]: unknown;
            };
            /** @description An object describing a given activity error. */
            error: {
                /** @description The error message. */
                message: string;
            } | null;
            /** @description An object holding information about a component. */
            component: {
                id: components["schemas"]["ID"];
                /** @description The type of component. */
                type: string;
            } | null;
            /** @description An array of tags that denote things such as a type of security event, or can be user-provided. */
            tags?: string[];
            /**
             * @description A status for the given activity.
             * @enum {string}
             */
            status: "info" | "warn" | "request" | "success" | "error" | "alert";
            security?: components["schemas"]["ActivitySecurity"];
            monitor?: components["schemas"]["ActivityMonitor"];
            /**
             * @description The activity event.
             * @enum {string}
             */
            event: "hub.images.prune" | "hub.update" | "hub.create" | "hub.task.delete" | "hub.task.images.prune" | "environment.services.discovery.reconfigure" | "environment.services.lb.reconfigure" | "environment.services.vpn.reconfigure" | "environment.services.scheduler.reconfigure" | "environment.delete" | "environment.initialize" | "environment.start" | "environment.stop" | "environment.create" | "environment.update" | "environment.task.delete" | "environment.services.discovery.task.reconfigure" | "environment.services.lb.task.reconfigure" | "environment.services.vpn.task.reconfigure" | "environment.services.scheduler.task.reconfigure" | "environment.services.vpn.user.create" | "environment.services.vpn.login" | "environment.services.vpn.reset" | "environment.services.vpn.task.reset" | "environment.task.initialize" | "environment.task.start" | "environment.task.stop" | "environment.task.deployments.reconfigure" | "environment.deployments.reconfigure" | "environment.deployments.prune" | "environment.deployment.start" | "environment.deployment.stop" | "environment.scoped-variable.delete" | "environment.scoped-variable.update" | "environment.scoped-variable.task.delete" | "environment.scoped-variable.create" | "image.delete" | "image.import" | "image.create" | "image.update" | "image.task.delete" | "image.task.import" | "image.source.delete" | "image.source.create" | "image.source.update" | "image.source.task.delete" | "billing.invoice.task.void" | "billing.invoice.task.credit" | "billing.invoice.task.refund" | "billing.invoice.pay" | "billing.invoice.task.pay" | "billing.order.confirm" | "billing.order.task.confirm" | "billing.method.update" | "billing.method.delete" | "billing.method.task.delete" | "billing.method.create" | "hub.apikey.update" | "hub.apikey.delete" | "hub.apikey.create" | "hub.role.update" | "hub.role.delete" | "hub.role.create" | "hub.role.task.delete" | "hub.membership.delete" | "hub.membership.create" | "hub.membership.update" | "hub.integration.create" | "hub.integration.update" | "hub.integration.delete" | "hub.inactive" | "container.initialize" | "container.task.start" | "container.start" | "container.task.stop" | "container.stop" | "container.task.reconfigure" | "container.reconfigure" | "container.task.volumes.reconfigure" | "container.function.trigger" | "container.function.task.trigger" | "container.volumes.reconfigure" | "container.create" | "container.restart" | "container.task.reimage" | "container.reimage" | "container.update" | "container.task.delete" | "container.delete" | "container.task.scale" | "container.scale" | "container.instances.create" | "container.instances.delete" | "container.instances.autoscale.up" | "container.instances.autoscale.down" | "container.instance.healthcheck.restarted" | "container.instance.volume.extend" | "container.instance.task.volume.extend" | "container.instance.healthcheck.failed" | "container.instance.error" | "container.instance.ssh.login" | "container.instance.migration.start" | "container.instance.migration.revert" | "container.instance.delete" | "container.instance.task.migration.revert" | "container.instance.task.migration.start" | "container.backup.create" | "container.backup.restore" | "container.backup.delete" | "container.backup.task.delete" | "container.backup.task.restore" | "dns.zone.verify" | "dns.zone.delete" | "dns.zone.task.verify" | "dns.zone.update" | "dns.zone.task.delete" | "dns.zone.create" | "dns.zone.record.delete" | "dns.zone.record.cert.generate" | "dns.zone.record.cert.generate.auto" | "dns.zone.record.task.cert.generate" | "dns.zone.record.update" | "dns.zone.record.task.delete" | "dns.zone.record.create" | "dns.certificate.associate" | "dns.certificate.deprecate" | "dns.certificate.create" | "dns.certificate.task.deprecate" | "stack.update" | "stack.task.delete" | "stack.delete" | "stack.create" | "stack.task.prune" | "stack.prune" | "stack.build.create" | "stack.build.generate" | "stack.build.deploy" | "stack.build.delete" | "stack.build.task.delete" | "stack.build.task.generate" | "stack.build.task.deploy" | "infrastructure.provider.update" | "infrastructure.provider.task.delete" | "infrastructure.provider.create" | "infrastructure.provider.task.verify" | "infrastructure.server.task.delete" | "infrastructure.server.task.restart" | "infrastructure.server.services.sftp.auth" | "infrastructure.server.live" | "infrastructure.server.delete" | "infrastructure.server.restart" | "infrastructure.server.compute.restart" | "infrastructure.server.compute.spawner.restart" | "infrastructure.server.features.reconfigure" | "infrastructure.server.sharedfs.reconfigure" | "infrastructure.server.provision" | "infrastructure.server.console" | "infrastructure.server.update" | "infrastructure.server.task.provision" | "infrastructure.server.ssh.token" | "infrastructure.server.task.features.reconfigure" | "infrastructure.server.task.sharedfs.reconfigure" | "infrastructure.server.services.sftp.lockdown" | "infrastructure.server.services.internal-api.throttle" | "infrastructure.server.evacuation.start" | "infrastructure.server.task.evacuation.start" | "infrastructure.server.evacuation.reset" | "infrastructure.server.task.evacuation.reset" | "infrastructure.autoscale.group.create" | "infrastructure.autoscale.group.update" | "infrastructure.autoscale.group.task.delete" | "infrastructure.autoscale.group.delete" | "infrastructure.cluster.create" | "infrastructure.cluster.update" | "infrastructure.cluster.delete" | "infrastructure.ips.pool.task.delete" | "sdn.network.update" | "sdn.network.task.delete" | "sdn.network.create" | "sdn.network.task.reconfigure" | "pipeline.delete" | "pipeline.trigger" | "pipeline.update" | "pipeline.task.delete" | "pipeline.create" | "pipeline.task.trigger" | "pipeline.run.completed" | "pipeline.key.update" | "pipeline.key.delete" | "pipeline.key.create" | "virtual-machine.create" | "virtual-machine.initialize" | "virtual-machine.task.start" | "virtual-machine.start" | "virtual-machine.task.stop" | "virtual-machine.stop" | "virtual-machine.reconfigure" | "virtual-machine.task.reconfigure" | "virtual-machine.update" | "virtual-machine.task.delete" | "virtual-machine.delete" | "virtual-machine.sos.login" | "virtual-machine.ssh-key.create" | "virtual-machine.ssh-key.update" | "virtual-machine.ssh-key.task.delete" | "virtual-machine.ssh-key.delete" | "virtual-machine.ip.allocate" | "virtual-machine.task.ip.allocate" | "virtual-machine.ip.unallocate" | "virtual-machine.task.ip.unallocate";
            /** @description A timestamp for when the activity took place. */
            time: components["schemas"]["DateTime"];
        };
        /**
         * VirtualMachineNetworkConfig
         * @description Defines the network settings for a virtual machine, including public access mode, hostname, and ports.
         *
         */
        VirtualMachineNetworkConfig: {
            /**
             * @description Controls the public network mode for the virtual machine.
             * @enum {string}
             */
            public: "enable" | "disable" | "egress-only";
            /** @description The hostname assigned to the virtual machine. */
            hostname: string;
            /** @description Port configurations for the virtual machine. */
            ports?: string[] | null;
        };
        /**
         * VirtualMachineDeployTags
         * @description Tags that define node requirements for the deployment. The `any` tag must match at least one condition, while `all` must match all conditions.
         *
         */
        VirtualMachineDeployTags: {
            any?: string[] | null;
            all?: string[] | null;
        };
        /**
         * VirtualMachineNodeConstraints
         * @description Node-level constraints for the virtual machine deployment, specifying tags that must or must not be present.
         *
         */
        VirtualMachineNodeConstraints: {
            tags: components["schemas"]["VirtualMachineDeployTags"];
        };
        /**
         * VirtualMachineDeployConstraints
         * @description Constraints define node-level and resource restrictions for the virtual machine deployment.
         *
         */
        VirtualMachineDeployConstraints: {
            node?: components["schemas"]["VirtualMachineNodeConstraints"] | null;
            secrets?: string[] | null;
            containers?: string[] | null;
        };
        /**
         * VirtualMachineShutdownPolicy
         * @description The shutdown policy defines how the virtual machine should handle shutdown, including a timeout and signals to be sent during shutdown.
         *
         */
        VirtualMachineShutdownPolicy: {
            /** @description The timeout period for graceful shutdown. */
            graceful_timeout?: components["schemas"]["Duration"] | null;
        };
        /**
         * VirtualMachineStartupPolicy
         * @description The startup policy defines how the virtual machine should handle startup, including a possible delay before starting the machine.
         *
         */
        VirtualMachineStartupPolicy: {
            /** @description Delay before startup. */
            delay?: components["schemas"]["Duration"] | null;
        };
        /**
         * VirtualMachineTelemetryConfig
         * @description The telemetry configuration defines how telemetry data is handled, including retention, interval, and whether telemetry is disabled.
         *
         */
        VirtualMachineTelemetryConfig: {
            /** @description Data retention duration for telemetry. */
            retention?: components["schemas"]["Duration"] | null;
            /** @description Telemetry collection interval. */
            interval?: components["schemas"]["Duration"] | null;
            /** @description Whether telemetry collection is disabled. */
            disable: boolean;
        };
        /**
         * VirtualMachineDeployConfig
         * @description Represents the deployment configuration for a virtual machine, including constraints, shutdown/startup policies, restart conditions, and telemetry settings.
         *
         */
        VirtualMachineDeployConfig: {
            constraints?: components["schemas"]["VirtualMachineDeployConstraints"] | null;
            shutdown?: components["schemas"]["VirtualMachineShutdownPolicy"] | null;
            startup?: components["schemas"]["VirtualMachineStartupPolicy"] | null;
            telemetry?: components["schemas"]["VirtualMachineTelemetryConfig"] | null;
        };
        /**
         * VirtualMachineRamResources
         * @description Defines the RAM configuration of a virtual machine.
         *
         */
        VirtualMachineRamResources: {
            /** @description The limit (maximum) amount of RAM the virtual machine can consume. Must be at least 512M and less than 65GB. */
            limit: string;
            /** @description Whether or not the RAM set in limit should be preallocated. */
            allocate?: boolean | null;
        };
        /**
         * VirtualMachineCpuResources
         * @description Defines the CPU configuration of a virtual machine. Set **either** `cores` or `cpus`.
         *
         */
        VirtualMachineCpuResources: {
            cores?: {
                /** @description The number of cores to assign to this virtual machine. Must be between 1 and 32. */
                number: number;
                /** @description If true, reserves the cores so they cannot be used by any other virtual machine. */
                allocate?: boolean | null;
            } | null;
            /** @description The specific cores/range of cores to allocate to the virtual machine. An 'x' indicates the maximum core for a given machine. */
            cpus?: string | null;
        };
        /**
         * VirtualMachineResourcesConfig
         * @description Defines the resource settings for a virtual machine, including CPU and RAM.
         *
         */
        VirtualMachineResourcesConfig: {
            ram: components["schemas"]["VirtualMachineRamResources"];
            cpu: components["schemas"]["VirtualMachineCpuResources"];
        };
        /**
         * VirtualMachineConfig
         * @description Defines the network and deployment configurations for a virtual machine.
         *
         */
        VirtualMachineConfig: {
            network: components["schemas"]["VirtualMachineNetworkConfig"];
            deploy: components["schemas"]["VirtualMachineDeployConfig"];
            resources: components["schemas"]["VirtualMachineResourcesConfig"];
        };
        /**
         * VirtualMachineImageSourceUrl
         * @description A virtual machine image sourced from a URL.
         */
        VirtualMachineImageSourceUrl: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "url";
            details: {
                /** @description The URL where a custom image is located. */
                url: string;
            };
        };
        /**
         * VirtualMachineImageSourceIpxe
         * @description A virtual machine image sourced from an IPXE script.
         */
        VirtualMachineImageSourceIpxe: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "ipxe";
            details: {
                /** @description A URL that points to an IPXE script. */
                chain_url?: string | null;
                /** @description An inline IPXE script. */
                script?: string | null;
            };
        };
        /**
         * VirtualMachineImageSourceBase
         * @description A virtual machine image sourced from a Cycle base image.
         */
        VirtualMachineImageSourceBase: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "base";
            details: {
                /** @description The base image identifier. */
                identifier: string;
            };
        };
        /**
         * VirtualMachineImage
         * @description Represents the image used by a virtual machine. It can either reference a URL where the image is located or specify a base image provided by Cycle. The `base` field allows users to specify the name of a desired Cycle-hosted base image, removing the need for a custom image URL.
         *
         */
        VirtualMachineImage: components["schemas"]["VirtualMachineImageSourceUrl"] | components["schemas"]["VirtualMachineImageSourceIpxe"] | components["schemas"]["VirtualMachineImageSourceBase"];
        /**
         * VirtualMachineVolumeConfig
         * @description Represents the configuration for a volume attached to a virtual machine.
         *
         */
        VirtualMachineVolumeConfig: {
            /** @description Configuration details for a local volume, if applicable. */
            local?: {
                /** @description The maximum size allowed for the local volume. */
                max_size: string;
                /** @description Indicates if the volume is part of a storage pool. */
                storage_pool?: boolean | null;
            } | null;
            identifier: components["schemas"]["Identifier"];
            /** @description Specifies if the volume is mounted as read-only. */
            read_only: boolean;
        };
        /**
         * VirtualMachineVolume
         * @description Represents a storage volume attached to a virtual machine.
         *
         */
        VirtualMachineVolume: {
            id: components["schemas"]["ID"];
            /** @description A unique hash identifying the volume for the virtual machine. */
            hash: string;
            /** @description The configuration details for the virtual machine's volume. */
            config: components["schemas"]["VirtualMachineVolumeConfig"];
        };
        /** VirtualMachineState */
        VirtualMachineState: {
            /**
             * @description The current state of the virtual machine.
             * @enum {string}
             */
            current: "new" | "starting" | "running" | "stopping" | "stopped" | "deleting" | "deleted";
        } & components["schemas"]["State"];
        /**
         * VirtualMachineMeta
         * @description Fields that can be included on a per-virtual machine basis, specific to that virtual machine.
         */
        VirtualMachineMeta: {
            domains?: {
                /** @description The fully qualified domain name. */
                fqdn: string;
                record?: components["schemas"]["Record"] | null;
            }[] | null;
            /** @description An array of IP addresses associated with this virtual machine. */
            ips?: components["schemas"]["Ip"][] | null;
            /** @description The server the virtual machine is deployed to. */
            server?: components["schemas"]["Server"] | null;
        };
        /**
         * VirtualMachine
         * @description Describes a virtual machine running on the Cycle Platform.
         *
         */
        VirtualMachine: {
            id: components["schemas"]["ID"];
            /** @description A user-defined name for the virtual machine. */
            name: string;
            identifier: components["schemas"]["Identifier"];
            creator: components["schemas"]["CreatorScope"];
            /** @description Basic information about the environment this virtual machine is in.
             *      */
            environment: {
                id: components["schemas"]["ID"];
                /** @description The cluster this environment is associated with. */
                cluster: components["schemas"]["Identifier"];
            };
            hub_id: components["schemas"]["HubID"];
            config: components["schemas"]["VirtualMachineConfig"];
            image: components["schemas"]["VirtualMachineImage"];
            container_id?: components["schemas"]["ID"];
            volumes?: components["schemas"]["VirtualMachineVolume"][] | null;
            /** @description Metadata annotations for the virtual machine. */
            annotations?: {
                [key: string]: unknown;
            } | null;
            /** @description The size of the base disk. Must be between 10G and 100G. */
            base_disk_size?: string;
            /** @description The generated root password for the virtual machine. Only visible by the owner, or if it was created in the last ten minutes. */
            root_password?: {
                changed: components["schemas"]["DateTime"];
                /** @description The root password. */
                current: string | null;
            };
            /** @description An array of IDs corresponding to SSH keys that have been assigned to this virtual machine. */
            ssh_keys?: components["schemas"]["ID"][] | null;
            state: components["schemas"]["VirtualMachineState"];
            /**
             * VirtualMachineEvents
             * @description A collection of timestamps for each event in the virtual machine's lifetime.
             */
            events: {
                /** @description The timestamp of when the virtual machine was created. */
                created: components["schemas"]["DateTime"];
                /** @description The timestamp of when the virtual machine was updated. */
                updated: components["schemas"]["DateTime"];
                /** @description The timestamp of when the virtual machine was deleted. */
                deleted: components["schemas"]["DateTime"];
                /** @description The timestamp of when the virtual machine was started. */
                started: components["schemas"]["DateTime"];
            };
            /** @description A boolean flag indicating if this virtual machine is deprecated. */
            deprecate: boolean;
            /** @description Prevents this virtual machine from being deleted when true. */
            lock: boolean;
            meta?: components["schemas"]["VirtualMachineMeta"] | null;
        };
        /**
         * IPPoolProvider
         * @description A IP Pool provider.
         */
        PoolProvider: {
            /** @description A vendor for a provider. */
            vendor: string;
            /** @description ID of the provider integration used to provision the IP. */
            integration_id: components["schemas"]["ID"];
            /** @description Information about the location of the provider this pool is associated with. */
            location: string;
            /** @description A reservation identifier associated with the pool reservation. */
            reservation: string;
            /** @description A server identifier associated with the pool. */
            server: string;
            /** @description An identifier linked to the server assingment of the IP pool. */
            server_assignment: string;
        };
        /** PoolState */
        PoolState: {
            /**
             * @description The current state of the pool.
             * @enum {string}
             */
            current: "live" | "releasing" | "released";
        } & components["schemas"]["State"];
        /**
         * InfrastructureIPPool
         * @description An IP Pool
         */
        Pool: {
            id: components["schemas"]["ID"];
            hub_id: components["schemas"]["HubID"];
            /** @description An ID associated with a server resource. */
            server_id: string;
            /** @description An ID associated with a location resource. */
            location_id: string;
            /**
             * @description The type of IP pool.
             * @enum {string}
             */
            kind: "ipv4" | "ipv6";
            provider: components["schemas"]["PoolProvider"];
            /** @description A boolean where true represents the pool as a floating IP pool. */
            floating: boolean;
            /** @description Data about IPs in the pool. */
            ips: {
                /** @description The total number of IPs in the pool. */
                total: number;
                /** @description Of the total number of IP's how many are available to be assigned. */
                available: number;
            };
            /** @description Network information about the pool. */
            block: {
                /** @description A cidr for the pool. */
                cidr: string;
                /** @description A gateway for the pool. */
                gateway: string;
                /** @description A netmask for the pool. */
                netmask: string;
                /** @description A network for the pool. */
                network: string;
            };
            state: components["schemas"]["PoolState"];
        };
        /** ApiKeyState */
        ApiKeyState: {
            /**
             * @description The current state of the API key.
             * @enum {string}
             */
            current: "new" | "configuring" | "live" | "inactive" | "deleting" | "deleted";
        } & components["schemas"]["State"];
        /**
         * ApiKey
         * @description An API key resource
         */
        ApiKey: {
            id: components["schemas"]["ID"];
            hub_id: components["schemas"]["HubID"];
            /** @description A name for the API key. */
            name: string;
            creator: components["schemas"]["CreatorScope"];
            /** @description The API key secret. */
            secret: string;
            role_id: components["schemas"]["ID"];
            /** @description An array of IP's this API key can make calls from. */
            ips: string[] | null;
            state: components["schemas"]["ApiKeyState"];
            /**
             * ApiKeyEvents
             * @description A collection of timestamps for each event in the API key's lifetime.
             */
            events: {
                /** @description The timestamp of when the API key was created. */
                created: components["schemas"]["DateTime"];
                /** @description The timestamp of when the API key was updated. */
                updated: components["schemas"]["DateTime"];
                /** @description The timestamp of when the API key was deleted. */
                deleted: components["schemas"]["DateTime"];
            };
        };
        /** NetworkState */
        NetworkState: {
            /**
             * @description The current state of the network.
             * @enum {string}
             */
            current: "live" | "deleting" | "deleted";
        } & components["schemas"]["State"];
        /**
         * NetworkPrivacySettings
         * @description Private network information for a Cycle SDN.
         */
        NetworkPrivacySettings: {
            /** @description A tag used to ensure proper routing. */
            vxlan_tag: number;
            /** @description The subnet of the private network. */
            subnet: string;
            /** @description A number used to ensure a MAC address exists for each network. */
            mac_addr_suffix: number;
            /** @description IPv6 infromation for the network. */
            ipv6: {
                /** @description The networks IPv6 base. */
                ip: string;
                /** @description The private network CIDR. */
                cidr: string;
            };
        };
        /**
         * Network
         * @description SDN Network resource.
         */
        Network: {
            id: components["schemas"]["ID"];
            /** @description The name of the network. */
            name: string;
            /** @description A network identifier used to construct http calls that specifically use this network over another. */
            identifier: string;
            /** @description The infrastructure cluster the environments belonging to this network belong to. */
            cluster: string;
            creator: components["schemas"]["CreatorScope"];
            hub_id: components["schemas"]["HubID"];
            state: components["schemas"]["NetworkState"];
            private_network?: components["schemas"]["NetworkPrivacySettings"] | null;
            /** @description An array of environments and timestamps. */
            environments?: {
                id: components["schemas"]["ID"];
                /** @description A timestamp of when the environment was added. */
                added: components["schemas"]["DateTime"];
            }[] | null;
            acl?: components["schemas"]["ACL"] | null;
            /**
             * NetworkEvents
             * @description A collection of timestamps for each event in the network's lifetime.
             */
            events: {
                /** @description The timestamp of when the image was created. */
                created: components["schemas"]["DateTime"];
                /** @description The timestamp of when the image was updated. */
                updated: components["schemas"]["DateTime"];
                /** @description The timestamp of when the image was deleted. */
                deleted: components["schemas"]["DateTime"];
            };
        };
        /**
         * FluidIdentifier
         * @description An identifier used in pipelines to refer to different kinds of resources across Cycle.
         *
         *     ## Types:
         *     - `id:<mongo id>`: A raw resource ID
         *     - `resource:<a resource identifier>`: A compound identifier pointing to a resource.
         *     - `from:<stage/step>`: For referencing a previous pipeline step.
         *
         */
        FluidIdentifier: string;
        /**
         * ImageCreateStep
         * @description Settings for the image create step for a pipeline.
         */
        ImageCreateStep: {
            /** @description An identifier for the step. */
            identifier?: string;
            options?: {
                skip?: boolean;
            };
            /**
             * @description The action that the step takes. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "image.create";
            details: {
                name?: string | null;
                source: components["schemas"]["FluidIdentifier"];
                /** @description Optional build-time options for when this image is built on pipeline run. */
                build?: {
                    /** @description Build args passed into the container image build process during pipeline run. */
                    args?: {
                        [key: string]: string;
                    } | null;
                };
                /** @description An override object to be used for a single image create request. */
                override?: {
                    /** @description For image sources with `docker-hub` or `docker-registry` origin types. A target to be used for overridding the default target - should include an image and a tag. */
                    target?: string | null;
                    /** @description For image sources with `docker-file` origin types. A URL pointing to a .tar.gz file of a repo with a Dockerfile in it - can be used instead of linking Cycle directly to a repository. */
                    targz_url?: string | null;
                } | null;
            };
        };
        /**
         * ImageImportStep
         * @description Settings for the image import step for a pipeline.
         */
        ImageImportStep: {
            /** @description An identifier for the step. */
            identifier?: string;
            options?: {
                skip?: boolean;
            };
            /**
             * @description The action that the step takes. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "image.import";
            details: {
                image: components["schemas"]["FluidIdentifier"];
            };
        };
        /**
         * ImagePruneStep
         * @description Settings for the images prune step for a pipeline.
         */
        ImagesPruneStep: {
            /** @description An identifier for the step. */
            identifier?: string;
            options?: {
                skip?: boolean;
            };
            /**
             * @description The action that the step takes. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "images.prune";
            details: {
                source_ids: components["schemas"]["ID"][];
            };
        };
        /**
         * ImageCreateImportStep
         * @description A pipeline step for creating and importing an image in one go.
         */
        ImageCreateImportStep: {
            /** @description An identifier for the step. */
            identifier?: string;
            options?: {
                skip?: boolean;
            };
            /**
             * @description The action that the step takes. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "image.create-import";
            details: {
                name?: string | null;
                source: components["schemas"]["FluidIdentifier"];
                /** @description Optional build-time options for when this image is built on pipeline run. */
                build?: {
                    /** @description Build args passed into the container image build process during pipeline run. */
                    args?: {
                        [key: string]: string;
                    } | null;
                };
                /** @description An override object to be used for a single image create request. */
                override?: {
                    /** @description For image sources with `docker-hub` or `docker-registry` origin types. A target to be used for overridding the default target - should include an image and a tag. */
                    target?: string | null;
                    /** @description For image sources with `docker-file` origin types. A URL pointing to a .tar.gz file of a repo with a Dockerfile in it - can be used instead of linking Cycle directly to a repository. */
                    targz_url?: string | null;
                } | null;
            };
        };
        /**
         * ContainerCreateStep
         * @description Settings for the create container step for a pipeline.
         */
        ContainerCreateStep: {
            /** @description An identifier for the step. */
            identifier?: string;
            options?: {
                skip?: boolean;
            };
            /**
             * @description The action that the step takes. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "container.create";
            details: {
                name: string;
                identifier?: string | null;
                environment: components["schemas"]["FluidIdentifier"];
                image: components["schemas"]["FluidIdentifier"];
                stateful: boolean;
                /** @description Additional information about a container */
                annotations?: {
                    [key: string]: unknown;
                } | null;
                config: components["schemas"]["Config"];
                volumes: components["schemas"]["ContainerVolume"][];
                deployment?: components["schemas"]["Deployment"] | null;
            };
        };
        /**
         * ContainerStartStep
         * @description Settings for starting a container in a pipeline
         */
        ContainerStartStep: {
            /** @description An identifier for the step. */
            identifier?: string;
            options?: {
                skip?: boolean;
            };
            /**
             * @description The action that the step takes. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "container.start";
            details: {
                container: components["schemas"]["FluidIdentifier"];
            };
        };
        /**
         * ContainerStopStep
         * @description Settings for stopping a container in a pipeline
         */
        ContainerStopStep: {
            /** @description An identifier for the step. */
            identifier?: string;
            options?: {
                skip?: boolean;
            };
            /**
             * @description The action that the step takes. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "container.stop";
            details: {
                container: components["schemas"]["FluidIdentifier"];
            };
        };
        /**
         * ContainerDeleteStep
         * @description Settings for deleting a container in a pipeline
         */
        ContainerDeleteStep: {
            /** @description An identifier for the step. */
            identifier?: string;
            options?: {
                skip?: boolean;
            };
            /**
             * @description The action that the step takes. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "container.delete";
            details: {
                container: components["schemas"]["FluidIdentifier"];
            };
        };
        /**
         * ContainerReimageStep
         * @description Settings for reimaging a container in a pipeline
         */
        ContainerReimageStep: {
            /** @description An identifier for the step. */
            identifier?: string;
            options?: {
                skip?: boolean;
            };
            /**
             * @description The action that the step takes. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "container.reimage";
            details: {
                container: components["schemas"]["FluidIdentifier"];
                image: components["schemas"]["FluidIdentifier"];
                options?: {
                    /** @description A boolean where true signifies the image being used to reimage does not have to have compatibility with the image being replaced. */
                    allow_incompatible: boolean;
                    /** @description A boolean where true signifies the user wishes to overwrite the current runtime configuration for the given container during the reimage process. */
                    overwrite_runtime_config: boolean;
                };
            };
        };
        /**
         * ContainerRestartStep
         * @description Settings for restarting a container in a pipeline
         */
        ContainerRestartStep: {
            /** @description An identifier for the step. */
            identifier?: string;
            options?: {
                skip?: boolean;
            };
            /**
             * @description The action that the step takes. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "container.restart";
            details: {
                container: components["schemas"]["FluidIdentifier"];
            };
        };
        /**
         * VariableString
         * @description A string value for a pipeline that supports a variable. To use as a variable, set this string to `{{variable}}` where `variable` is a custom name.
         *
         */
        VariableString: string;
        /**
         * ContainerFunctionTriggerStep
         * @description Settings for triggering a function in a pipeline.
         */
        ContainerFunctionTriggerStep: {
            /** @description An identifier for the step. */
            identifier?: string;
            options?: {
                skip?: boolean;
            };
            /**
             * @description The action that the step takes. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "container.function.trigger";
            details: {
                /** @description The container to trigger. */
                container: components["schemas"]["FluidIdentifier"];
                /** @description A custom token used for identifying and managing a claim. Can be any valid string. */
                token?: components["schemas"]["VariableString"] | null;
                runtime_variables: components["schemas"]["FunctionRuntimeVariables"];
            };
        };
        /**
         * EnvironmentCreateStep
         * @description Settings for creating an environment in a pipeline.
         */
        EnvironmentCreateStep: {
            /** @description An identifier for the step. */
            identifier?: string;
            options?: {
                skip?: boolean;
            };
            /**
             * @description The action that the step takes. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "environment.create";
            details: {
                name: string;
                about?: components["schemas"]["EnvironmentAbout"] | null;
                cluster: string;
                features: components["schemas"]["EnvironmentFeatures"];
            };
        };
        /**
         * EnvironmentStartStep
         * @description Settings for starting an environment in a pipeline.
         */
        EnvironmentStartStep: {
            /** @description An identifier for the step. */
            identifier?: string;
            options?: {
                skip?: boolean;
            };
            /**
             * @description The action that the step takes. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "environment.start";
            details: {
                environment: components["schemas"]["FluidIdentifier"];
            };
        };
        /**
         * EnvironmentStopStep
         * @description Settings for stopping an environment in a pipeline.
         */
        EnvironmentStopStep: {
            /** @description An identifier for the step. */
            identifier?: string;
            options?: {
                skip?: boolean;
            };
            /**
             * @description The action that the step takes. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "environment.stop";
            details: {
                environment: components["schemas"]["FluidIdentifier"];
            };
        };
        /**
         * EnvironmentDeleteStep
         * @description Settings for deleting an environment in a pipeline.
         */
        EnvironmentDeleteStep: {
            /** @description An identifier for the step. */
            identifier?: string;
            options?: {
                skip?: boolean;
            };
            /**
             * @description The action that the step takes. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "environment.delete";
            details: {
                environment: components["schemas"]["FluidIdentifier"];
            };
        };
        /**
         * EnvironmentDeploymentStartStep
         * @description Start all containers with a specific deployment version/tag within an environment.
         */
        EnvironmentDeploymentStartStep: {
            /** @description An identifier for the step. */
            identifier?: string;
            options?: {
                skip?: boolean;
            };
            /**
             * @description The action that the step takes. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "environment.deployment.start";
            details: {
                environment: components["schemas"]["FluidIdentifier"];
                tag?: string | null;
                version?: string | null;
            };
        };
        /**
         * EnvironmentDeploymentStopStep
         * @description Stop all containers with a specific deployment version/tag within an environment.
         */
        EnvironmentDeploymentStopStep: {
            /** @description An identifier for the step. */
            identifier?: string;
            options?: {
                skip?: boolean;
            };
            /**
             * @description The action that the step takes. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "environment.deployment.stop";
            details: {
                environment: components["schemas"]["FluidIdentifier"];
                tag?: string | null;
                version?: string | null;
            };
        };
        /**
         * EnvironmentDeploymentsTagStep
         * @description Settings for updating a deployment tag to another deployment version.
         */
        EnvironmentDeploymentsTagStep: {
            /** @description An identifier for the step. */
            identifier?: string;
            options?: {
                skip?: boolean;
            };
            /**
             * @description The action that the step takes. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "environment.deployments.tag";
            details: {
                environment: components["schemas"]["FluidIdentifier"];
                tag: components["schemas"]["Identifier"];
                /** @description The selector for which deployment to apply the new tag to. */
                deployment: {
                    /** @description Targets the deployment with this exact version. */
                    version?: components["schemas"]["Version"];
                } | {
                    /** @description Targets the deployment with this exact tag applied to it. */
                    tag?: string;
                };
            };
        };
        /**
         * EnvironmentDeploymentsPruneStep
         * @description Remove any containers that are part of a deployment that does NOT have a tag associated with it.
         */
        EnvironmentDeploymentsPruneStep: {
            /** @description An identifier for the step. */
            identifier?: string;
            options?: {
                skip?: boolean;
            };
            /**
             * @description The action that the step takes. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "environment.deployments.prune";
            details: {
                environment: components["schemas"]["FluidIdentifier"];
            };
        };
        /**
         * EnvironmentDeploymentHealthyWatchStep
         * @description Waits for a deployment to be considered 'healthy' before allowing the pipeline to continue.
         *     A deployement is considered 'healthy' when all instances of all containers that have had a state change in the last 15 minutes
         *     that have health checks defined, become healthy.
         *
         */
        EnvironmentDeploymentHealthyWatchStep: {
            /** @description An identifier for the step. */
            identifier?: string;
            options?: {
                skip?: boolean;
            };
            /**
             * @description The action that the step takes. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "environment.deployment.healthy.watch";
            details: {
                environment: components["schemas"]["FluidIdentifier"];
                tag?: string | null;
                version?: string | null;
                /** @description The maximum amount of time to wait for the deployment to become healthy before failing this step. */
                max_wait?: components["schemas"]["Duration"] | null;
            };
        };
        /**
         * StackBuildCreateStep
         * @description Settings for creating a stack build in a pipeline.
         */
        StackBuildCreateStep: {
            /** @description An identifier for the step. */
            identifier?: string;
            options?: {
                skip?: boolean;
            };
            /**
             * @description The action that the step takes. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "stack.build.create";
            details: {
                stack: components["schemas"]["FluidIdentifier"];
                /** @description Additional instructions used when generating this stack build. */
                instructions?: {
                    /** @description Git information specifics. */
                    git?: {
                        /**
                         * @description The type of information the user is passing.
                         * @enum {string}
                         */
                        type: "branch" | "hash" | "tag";
                        /** @description The actual value to be passed. */
                        value: string;
                    };
                    /** @description Custom variables applied to the stack during build. Any place in the stack where a `{{variable}}` is used is replaced with the value of the variable supplied in this map. */
                    variables?: {
                        [key: string]: string;
                    };
                } | null;
                /** @description Information about the stack build. */
                about?: {
                    /** @description A user defined version of the build. */
                    version: string;
                    /** @description A user defined description for the build. */
                    description: string;
                } | null;
            };
        };
        /**
         * StackBuildGenerateStep
         * @description Settings for the stack build generate step for a pipeline.
         */
        StackBuildGenerateStep: {
            /** @description An identifier for the step. */
            identifier?: string;
            options?: {
                skip?: boolean;
            };
            /**
             * @description The action that the step takes. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "stack.build.generate";
            details: {
                build: components["schemas"]["FluidIdentifier"];
            };
        };
        /**
         * StackDeployContainersObject
         * @description Options to control how a container behaves when a stack build is deployed.
         */
        StackDeployContainersObject: {
            /** @description A boolean where true represents the container is to be reimaged. */
            reimage: boolean;
            /** @description A boolean where true represents the container is to be reconfigured. */
            reconfigure: boolean;
        };
        /**
         * StackBuildDeploymentUpdates
         * @description Optional update object used to specify specific params to update from the stack build.
         */
        StackBuildDeploymentUpdates: {
            /** @description A map of the container names to update within the environment. */
            containers: {
                [key: string]: components["schemas"]["StackDeployContainersObject"];
            };
            /** @description An object that describes configuration options for scoped variables on stack build. If null, scoped variables will be ignored during deployment events. */
            scoped_variables: {
                /** @description If set to true, any scoped variables that are new to the environment will be created when deployed. */
                add_new: boolean;
                /** @description When deploying to the environment, any scoped variables defined in the build that match an existing scoped variable in the environment will cause the existing scoped variable to be updated to the new value. */
                replace_existing: boolean;
            } | null;
        };
        /**
         * StackBuildDeployStep
         * @description Settings for deploying a stack build in a pipeline.
         */
        StackBuildDeployStep: {
            /** @description An identifier for the step. */
            identifier?: string;
            options?: {
                skip?: boolean;
            };
            /**
             * @description The action that the step takes. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "stack.build.deploy";
            details: {
                build: components["schemas"]["FluidIdentifier"];
                environment: components["schemas"]["FluidIdentifier"];
                update?: components["schemas"]["StackBuildDeploymentUpdates"] | null;
                deployment?: components["schemas"]["Deployment"] | null;
            };
        };
        /**
         * StackPruneStep
         * @description Settings for pruning a stack in a pipeline.
         */
        StackPruneStep: {
            /** @description An identifier for the step. */
            identifier?: string;
            options?: {
                skip?: boolean;
            };
            /**
             * @description The action that the step takes. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "stack.prune";
            details: {
                stack: components["schemas"]["FluidIdentifier"];
                criteria?: {
                    expire?: components["schemas"]["Duration"] | null;
                } | null;
            };
        };
        /**
         * SleepStep
         * @description Settings for the sleep step for a pipeline.
         */
        SleepStep: {
            /** @description An identifier for the step. */
            identifier?: string;
            options?: {
                skip?: boolean;
            };
            /**
             * @description The action that the step takes. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "sleep";
            details: {
                /** @description Total duration to run this step for, before moving on to the next step. */
                duration?: components["schemas"]["Duration"];
            };
        };
        /**
         * WebhookStepOptions
         * @description Options for configuring webhook pipeline steps.
         */
        WebhookStepOptions: {
            max_attempts?: number | null;
            /** @description How long to wait between retries on wait. */
            interval?: components["schemas"]["Duration"] | null;
            fail_on?: {
                /** @description If true, will fail on any codes NOT defined in the http_codes array. */
                not: boolean;
                /** @description A list of http response codes that will trigger a failure. */
                http_codes?: number[] | null;
            } | null;
            retry_on?: {
                /** @description If true, will retry on any codes NOT defined in the http_codes array. */
                not: boolean;
                /** @description A list of http response codes that will trigger a retry. */
                http_codes?: number[] | null;
            } | null;
        };
        /**
         * WebhookPostStep
         * @description A pipeline step that will make a POST request to the specified endpoints. The webhook will post the full body of the resource referenced by the step.
         *     For example if you were to reference a step creating a container, you would receive that container object in the post body.
         *     You may also specify a custom body instead.
         *
         */
        WebhookPostStep: {
            /** @description An identifier for the step. */
            identifier?: string;
            options?: {
                skip?: boolean;
            };
            /**
             * @description The action that the step takes. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "webhook.post";
            details: {
                /** @description The url to submit a POST request to. */
                url: string;
                /** @description An optional map of headers to send with the request. */
                headers?: {
                    [key: string]: string;
                } | null;
                options?: components["schemas"]["WebhookStepOptions"] | null;
                /** @description An optional POST body to send with the request. Cannot be used with `from``. */
                body?: string | null;
                /** @description Takes the output from a previous step and uses it as the body for the POST request. Cannot be used with `body`. String format is <stageIdentifier/stepIdentifier> */
                from?: string | null;
            };
        };
        /**
         * WebhookGetStep
         * @description A pipeline step that will make a GET request to the specified endpoint.
         *
         */
        WebhookGetStep: {
            /** @description An identifier for the step. */
            identifier?: string;
            options?: {
                skip?: boolean;
            };
            /**
             * @description The action that the step takes. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "webhook.get";
            details: {
                /** @description The url to submit a POST request to. */
                url: string;
                /** @description An optional map of headers to send with the request. */
                headers?: {
                    [key: string]: string;
                } | null;
                options?: components["schemas"]["WebhookStepOptions"] | null;
            };
        };
        /**
         * PipelineStep
         * @description A step for a pipeline stage.
         */
        PipelineSteps: components["schemas"]["ImageCreateStep"] | components["schemas"]["ImageImportStep"] | components["schemas"]["ImagesPruneStep"] | components["schemas"]["ImageCreateImportStep"] | components["schemas"]["ContainerCreateStep"] | components["schemas"]["ContainerStartStep"] | components["schemas"]["ContainerStopStep"] | components["schemas"]["ContainerDeleteStep"] | components["schemas"]["ContainerReimageStep"] | components["schemas"]["ContainerRestartStep"] | components["schemas"]["ContainerFunctionTriggerStep"] | components["schemas"]["EnvironmentCreateStep"] | components["schemas"]["EnvironmentStartStep"] | components["schemas"]["EnvironmentStopStep"] | components["schemas"]["EnvironmentDeleteStep"] | components["schemas"]["EnvironmentDeploymentStartStep"] | components["schemas"]["EnvironmentDeploymentStopStep"] | components["schemas"]["EnvironmentDeploymentsTagStep"] | components["schemas"]["EnvironmentDeploymentsPruneStep"] | components["schemas"]["EnvironmentDeploymentHealthyWatchStep"] | components["schemas"]["StackBuildCreateStep"] | components["schemas"]["StackBuildGenerateStep"] | components["schemas"]["StackBuildDeployStep"] | components["schemas"]["StackPruneStep"] | components["schemas"]["WebhookPostStep"] | components["schemas"]["WebhookGetStep"] | components["schemas"]["SleepStep"];
        /**
         * PipelineStage
         * @description A stage for a given pipeline.
         */
        PipelineStage: {
            /** @description A stage identifier. */
            identifier: string;
            /** @description An array of steps for the stage. */
            steps: components["schemas"]["PipelineSteps"][];
            /** @description Additonal options for the stage. */
            options?: {
                /** @description A boolean where true indicates the given stage should be skipped when the pipeline is run. */
                skip?: boolean;
            };
        };
        /** PipelineState */
        PipelineState: {
            /**
             * @description The current state of the pipeline.
             * @enum {string}
             */
            current: "live" | "acquiring" | "deleting" | "deleted";
        } & components["schemas"]["State"];
        /**
         * Pipeline
         * @description A pipeline resource.
         */
        Pipeline: {
            id: components["schemas"]["ID"];
            identifier?: components["schemas"]["Identifier"];
            /** @description A name for the pipeline. */
            name: string;
            creator: components["schemas"]["CreatorScope"];
            hub_id: components["schemas"]["HubID"];
            /** @description A boolean where true signifies the pipeline is disabled. */
            disable: boolean;
            /** @description Setting to true enables variable and other advanced logic support on this pipeline. This is a one-way toggle. Once set to true, it cannot be set back to false. */
            dynamic: boolean;
            /** @description An array of stages. */
            stages?: components["schemas"]["PipelineStage"][];
            acl?: components["schemas"]["ACL"] | null;
            /**
             * PipelineEvents
             * @description A collection of timestamps for each event in the pipeline's lifetime.
             */
            events: {
                /** @description The timestamp of when the pipeline was created. */
                created: components["schemas"]["DateTime"];
                /** @description The timestamp of when the pipeline was updated. */
                updated: components["schemas"]["DateTime"];
                /** @description The timestamp of when the pipeline was deleted. */
                deleted: components["schemas"]["DateTime"];
                /** @description The timestamp of when the pipeline was last run. */
                last_run: components["schemas"]["DateTime"];
            };
            state: components["schemas"]["PipelineState"];
        };
        /** TriggerKeyState */
        TriggerKeyState: {
            /**
             * @description The current state of the trigger key.
             * @enum {string}
             */
            current: "live" | "deleting" | "deleted";
        } & components["schemas"]["State"];
        /**
         * TriggerKey
         * @description A pipeline trigger key resource.
         */
        TriggerKey: {
            id: components["schemas"]["ID"];
            /** @description The name of the trigger key. */
            name: string;
            /** @description The secret used when calling the trigger key programmatically. */
            secret: string;
            creator: components["schemas"]["CreatorScope"];
            hub_id: components["schemas"]["HubID"];
            /** @description The ID for the pipeline related to this trigger key. */
            pipeline_id: string;
            state: components["schemas"]["TriggerKeyState"];
            /**
             * TriggerKeyEvents
             * @description A collection of timestamps for each event in the trigger key's lifetime.
             */
            events: {
                /** @description The timestamp of when the trigger key was created. */
                created: components["schemas"]["DateTime"];
                /** @description The timestamp of when the trigger key was updated. */
                updated: components["schemas"]["DateTime"];
                /** @description The timestamp of when the trigger key was deleted. */
                deleted: components["schemas"]["DateTime"];
            };
            /** @description An array of ips this trigger key is usable from. */
            ips: string[];
        };
        /** AutoScaleGroupScale */
        AutoScaleGroupScale: {
            /** AutoScaleGroupScaleDown */
            down?: {
                /** @description The minimum TTL for the server once deployed through an autoscale event. */
                min_ttl?: components["schemas"]["Duration"];
                /** @description The amount of time between last instance deployed and when the server can begin to get deleted. */
                inactivity_period?: components["schemas"]["Duration"];
                /** @enum {string} */
                method?: "fifo" | "lifo";
            };
            /** AutoScaleGroupScaleUp */
            up?: {
                maximum?: number;
            };
        };
        /** AutoScaleGroupInfrastructure */
        AutoScaleGroupInfrastructure: {
            models: {
                /** @description The integration identifier for infrastructure provider used. */
                provider: string;
                /** @description The ID of the integration associated with this auto-scale group infrastructure. */
                integration_id?: components["schemas"]["ID"];
                model_id: string;
                priority: number;
                locations: {
                    id: string;
                    availability_zones: string[];
                }[];
            }[];
        };
        /** AutoScaleGroup */
        AutoScaleGroup: {
            id: string;
            name: string;
            identifier: string;
            creator: components["schemas"]["CreatorScope"];
            hub_id: string;
            cluster: string;
            scale?: components["schemas"]["AutoScaleGroupScale"];
            acl?: components["schemas"]["ACL"] | null;
            infrastructure: components["schemas"]["AutoScaleGroupInfrastructure"];
            /** AutoScaleGroupState */
            state: {
                /**
                 * @description The current state of the auto-scale group.
                 * @enum {string}
                 */
                current: "new" | "live" | "deleting" | "deleted";
            } & components["schemas"]["State"];
            /**
             * AutoScaleGroupEvents
             * @description A collection of timestamps for each event in the auto-scale group's lifetime.
             */
            events: {
                /** @description The timestamp of when the auto-scale group was created. */
                created: components["schemas"]["DateTime"];
                /** @description The timestamp of when the auto-scale group was updated. */
                updated: components["schemas"]["DateTime"];
                /** @description The timestamp of when the auto-scale group was deleted. */
                deleted: components["schemas"]["DateTime"];
                /** @description The timestamp of when the auto-scale group was last synced. */
                last_sync: components["schemas"]["DateTime"];
            };
        };
        /**
         * ResourceType
         * @enum {string}
         */
        ResourceType: "account" | "image.source" | "image" | "container" | "container.instance" | "virtual-machine" | "virtual-machine.ssh-key" | "hub" | "hub.api_key" | "hub.membership" | "hub.role" | "sdn.network" | "dns.certificate" | "dns.zone" | "dns.zone.record" | "pipeline" | "pipeline.run" | "stack" | "stack.build" | "infrastructure.provider" | "infrastructure.autoscale.group" | "infrastructure.server" | "infrastructure.cluster" | "infrastructure.ips.pool" | "billing.invoice" | "billing.method" | "environment" | "environment.scoped-variable";
        /** PipelineRunStep */
        PipelineRunStep: {
            identifier: string;
            /** @enum {string} */
            action: "environment.create" | "environment.start" | "environment.stop" | "environment.delete" | "environment.deployments.prune" | "environment.deployments.tag" | "environment.deployment.start" | "environment.deployment.stop" | "environment.deployment.healthy.watch" | "image.create" | "image.import" | "images.prune" | "image.create-import" | "container.create" | "container.reimage" | "container.start" | "container.stop" | "container.restart" | "container.delete" | "container.function.trigger" | "stack.build.create" | "stack.build.deploy" | "stack.build.generate" | "stack.prune" | "sleep" | "webhook.post" | "webhook.get";
            /** @description A collection of timestamps for each event in the pipeline run's lifetime. */
            events: {
                /** @description The timestamp of when the pipeline step was started. */
                started: components["schemas"]["DateTime"];
                /** @description The timestamp of when the pipeline step was finished. */
                finished: components["schemas"]["DateTime"];
            };
            success: boolean;
            components?: {
                type: components["schemas"]["ResourceType"];
                id: string;
            }[] | null;
            /** @description An error, if any, that has occurred for this step. */
            error?: {
                /** @description Details about the error that has occurred. */
                message: string;
            } | null;
        };
        /** PipelineRunState */
        RunState: {
            /**
             * @description The current state of the pipeline run.
             * @enum {string}
             */
            current: "queued" | "acquiring" | "running" | "complete" | "deleting" | "deleted";
        } & components["schemas"]["State"];
        /**
         * PipelineRunEvents
         * @description A collection of timestamps for each event in the pipeline run's lifetime.
         */
        PipelineRunEvents: {
            /** @description The timestamp of when the pipeline run was started. */
            started: components["schemas"]["DateTime"];
            /** @description The timestamp of when the pipeline run was queued. */
            queued: components["schemas"]["DateTime"];
            /** @description The timestamp of when the pipeline run was finished. */
            finished: components["schemas"]["DateTime"];
        };
        /**
         * PipelineRun
         * @description A pipeline run resource.
         */
        PipelineRun: {
            id: components["schemas"]["ID"];
            creator: components["schemas"]["CreatorScope"];
            hub_id: components["schemas"]["HubID"];
            /** @description The ID for the pipeline this run belongs to. */
            pipeline_id: string;
            /** @description Describes the sub queue defined during pipeline trigger, if present. */
            sub_queue?: string | null;
            /** @description Describes if a skip lock was defined during pipeline trigger. */
            skip_locks?: boolean;
            /** @description An array of pipeline stages. */
            stages: {
                /** @description A stage identifier. */
                identifier: string;
                steps: components["schemas"]["PipelineRunStep"][];
                /** @description A collection of timestamps for each event in the pipeline run's lifetime. */
                events: {
                    /** @description The timestamp of when the pipeline stage was started. */
                    started: components["schemas"]["DateTime"];
                    /** @description The timestamp of when the pipeline stage was finished. */
                    finished: components["schemas"]["DateTime"];
                };
            }[];
            state: components["schemas"]["RunState"];
            events: components["schemas"]["PipelineRunEvents"];
            /** @description A map of variable values used during pipeline run. */
            variables?: {
                [key: string]: string;
            };
        };
        /**
         * VirtualMachineSshKey
         * @description Describes an SSH key used to access a virtual machine.
         *
         */
        VirtualMachineSshKey: {
            id: components["schemas"]["ID"];
            /** @description A user-defined name for the SSH key. */
            name: string;
            creator: components["schemas"]["CreatorScope"];
            environment_id: components["schemas"]["ID"];
            hub_id: components["schemas"]["ID"];
            state: {
                /**
                 * @description The current state of the SSH key.
                 * @enum {string}
                 */
                current: "live" | "deleting" | "deleted";
            } & components["schemas"]["State"];
            /** @description The public key value of this SSH key. */
            public_key: string;
        };
        /**
         * ComponentIncludes
         * @description A resource that is associated with activity.
         */
        ComponentsIncludes: {
            [key: string]: components["schemas"]["Container"] | components["schemas"]["VirtualMachine"] | components["schemas"]["Instance"] | components["schemas"]["Environment"] | components["schemas"]["Image"] | components["schemas"]["ImageSource"] | components["schemas"]["Server"] | components["schemas"]["Pool"] | components["schemas"]["Integration"] | components["schemas"]["Stack"] | components["schemas"]["StackBuild"] | components["schemas"]["Zone"] | components["schemas"]["Record"] | components["schemas"]["TlsCertificate"] | components["schemas"]["ApiKey"] | components["schemas"]["Network"] | components["schemas"]["HubMembership"] | components["schemas"]["Pipeline"] | components["schemas"]["TriggerKey"] | components["schemas"]["ScopedVariable"] | components["schemas"]["Hub"] | components["schemas"]["Invoice"] | components["schemas"]["Method"] | components["schemas"]["AutoScaleGroup"] | components["schemas"]["PipelineRun"] | components["schemas"]["Role"] | components["schemas"]["PublicAccount"] | components["schemas"]["VirtualMachineSshKey"];
        };
        /**
         * ActivityIncludes
         * @description All includable resources linkable to the given records.
         */
        ActivityIncludes: {
            users?: components["schemas"]["CreatorInclude"];
            components?: components["schemas"]["ComponentsIncludes"];
        };
        /**
         * ApiKeyIncludes
         * @description A resource that is associated with an API key.
         */
        ApiKeyIncludes: {
            /** @description A map of roles relevant to this API key, keyed by the role ID. */
            roles?: {
                [key: string]: components["schemas"]["Role"];
            };
            /** @description A map of roles relevant to this API key, keyed by the role ID. */
            "roles:identifiers"?: {
                [key: string]: components["schemas"]["ID"];
            };
        };
        /**
         * HubMembershipIncludes
         * @description All includable resources for hub memberships.
         */
        "HubMembershipIncludes-2": {
            /** @description A record with an ID mapped to a public account. */
            accounts?: {
                [key: string]: components["schemas"]["PublicAccount"];
            };
            /** @description A map of roles relevant to this hub membership, keyed by the Role ID. */
            roles?: {
                [key: string]: components["schemas"]["Role"];
            };
            /** @description A map of roles relevant to this hub membership, keyed by the role ID. */
            "roles:identifiers"?: {
                [key: string]: components["schemas"]["ID"];
            };
        };
        /**
         * HubInviteIncludes
         * @description All includable resources for invites.
         */
        HubInviteIncludes: {
            /** @description A record with an ID mapped to a public account for the account that sent this memberships initial invite. */
            senders?: {
                /** @description A record with an ID mapped to a public account. */
                accounts?: {
                    [key: string]: components["schemas"]["PublicAccount"];
                };
            };
            /** @description A map of roles relevant to this hub membership, keyed by the Role ID. */
            roles?: {
                [key: string]: components["schemas"]["Role"];
            };
            /** @description A map of roles relevant to this hub membership, keyed by the role ID. */
            "roles:identifiers"?: {
                [key: string]: components["schemas"]["ID"];
            };
        };
        /**
         * ImageIncludes
         * @description All includable resources linkable to the given image.
         */
        ImageIncludes: {
            creators?: components["schemas"]["CreatorInclude"];
            stack_builds?: components["schemas"]["StackBuildIncludes"];
            stacks?: components["schemas"]["StackIncludes"];
            "stacks:identifiers"?: components["schemas"]["IdentifierIncludes"];
            sources?: components["schemas"]["ImageSourceIncludes"];
            "sources:identifiers"?: components["schemas"]["IdentifierIncludes"];
            integrations?: components["schemas"]["IntegrationsIncludes"];
            "integrations:identifiers"?: components["schemas"]["IdentifierIncludes"];
        };
        /**
         * ImageBuildLog
         * @description A build log for a given image.
         */
        BuildLog: {
            id: components["schemas"]["ID"];
            hub_id: components["schemas"]["HubID"];
            /** @description The ID of the image the build log pertains to. */
            image_id: string;
            /** @description The log itself. */
            log: string;
            /**
             * BuildLogEvents
             * @description A collection of timestamps for each event in the build log's lifetime.
             */
            events: {
                /** @description The timestamp of when the build log was created. */
                created: components["schemas"]["DateTime"];
                /** @description The timestamp of when the build log was updated. */
                updated: components["schemas"]["DateTime"];
                /** @description The timestamp of when the build log was deleted. */
                deleted: components["schemas"]["DateTime"];
            };
        };
        /**
         * SourceIncludes
         * @description A resource associate with an image source.
         */
        SourceIncludes: {
            creators?: components["schemas"]["CreatorInclude"];
            integrations?: components["schemas"]["IntegrationsIncludes"];
            "integrations:identifiers"?: components["schemas"]["IdentifierIncludes"];
        };
        /**
         * InfrastructureResourceSummary
         * @description A summary of resource utilization/availability.
         */
        InfrastructureResourceSummary: {
            /** @description Information about RAM Resources. */
            ram: {
                /** @description The total amount of RAM in MBsr. */
                total_mb: number;
                /** @description The total amount of allocated RAM in MBs. */
                allocated_mb: number;
                /** @description The total amount of used RAM in MBs. */
                used_mb: number;
                /** @description The total amount of provisioned RAM in MBs. */
                provisioned_mb?: number;
            };
            /** @description Information about CPU resources. */
            cpu: {
                /** @description The number of CPU cores. */
                cores: number;
                /** @description Information about CPU shares. */
                shares: {
                    /** @description The number of shares allocated. */
                    allocated: number;
                    /** @description The total number of shares available. */
                    total: number;
                };
                /** @description The ratio of shares allocated to total shares. */
                share_ratio?: number;
            };
        };
        /**
         * ClusterVersionServerCount
         * @description A count of servers in a cluster with the given version of Cycle software
         */
        ClusterVersionServerCount: {
            agent: {
                [key: string]: number;
            };
            "agent-spawner": {
                [key: string]: number;
            };
            compute: {
                [key: string]: number;
            };
            "compute-spawner": {
                [key: string]: number;
            };
        };
        /**
         * InfrastructureSummary
         * @description An infrastructure summary resource.
         */
        InfrastructureSummary: {
            hub_id: components["schemas"]["HubID"];
            /** @description The number of servers on the cluster */
            servers: number;
            /** @description Statistics about image usage. */
            images: {
                /** @description Image tier information. */
                tier: {
                    /** @description A value in MB representing the total MB of space on the infrastructure available for images. */
                    total_mb: number;
                    /** @description A value in MB representing the amount of allocated space for images. */
                    allocated_mb: number;
                    /** @description A value in MB representing the total MB of space images are taking up out of the total megabytes available. */
                    used_mb: number;
                };
            };
            /** @description Records pointing to information about clusters that make up this hubs infrastructure. */
            clusters: {
                [key: string]: {
                    /** @description The name of the cluster */
                    name: string;
                    /** @description Information about the aggregate resources of the cluster. */
                    resources: components["schemas"]["InfrastructureResourceSummary"];
                    /** @description Whether Cycle has determined this cluster to be healthy or not. */
                    healthy: boolean;
                    versions: components["schemas"]["ClusterVersionServerCount"];
                    instances: components["schemas"]["StateCountSummary"];
                    servers: {
                        count: number;
                        providers: {
                            [key: string]: {
                                count: number;
                                locations?: {
                                    [key: string]: number;
                                } | null;
                                models?: {
                                    [key: string]: number;
                                } | null;
                                resources?: components["schemas"]["InfrastructureResourceSummary"];
                            };
                        };
                        /** @description IDs of all servers in this cluster. */
                        server_ids?: components["schemas"]["ID"][];
                    };
                };
            };
            /** @description A timestamp of when the infrastructure was last updated. */
            updated: components["schemas"]["DateTime"];
        };
        /**
         * DeploymentStrategy
         * @description Information about supported container deployment strategies.
         */
        DeploymentStrategy: {
            /** @description The human-friendly name of the deployment strategy. */
            name: string;
            /** @description A boolean where true signifies a strategy is either not yet or no longer available. */
            disabled: boolean;
            /** @description A description for the deployment strategy. */
            description: string;
        };
        /**
         * ServerModelsIncludes
         * @description A resource associated with a server models.
         */
        ServerModelsIncludes: {
            [key: string]: components["schemas"]["ProviderServerModel"];
        };
        /**
         * AutoScaleGroupIncludes
         * @description All includable resource linkable to the given auto-scale group.
         */
        AutoScaleGroupIncludes: {
            integrations?: components["schemas"]["IntegrationsIncludes"];
            models?: components["schemas"]["ServerModelsIncludes"];
            locations?: components["schemas"]["LocationsIncludes"];
        };
        /** ServerStatsCpuUsageTelemetry */
        ServerStatsCpuUsageTelemetry: {
            /** Format: float */
            user?: number;
            /** Format: float */
            nice?: number;
            /** Format: float */
            system?: number;
            /** Format: float */
            idle?: number;
            /** Format: float */
            iowait?: number;
            /** Format: float */
            irq?: number;
            /** Format: float */
            soft_irq?: number;
            /** Format: float */
            steal?: number;
            /** Format: float */
            guest?: number;
            /** Format: float */
            guest_nice?: number;
        };
        /**
         * ServerStatsRamTelemetry
         * @description Statistics about the RAM on a given server.
         */
        ServerStatsRamTelemetry: {
            /**
             * Format: float
             * @description The available RAM on the server.
             */
            available: number;
            /**
             * Format: float
             * @description The free RAM on the server.
             */
            free: number;
            /**
             * Format: float
             * @description The total RAM on the server.
             */
            total: number;
        };
        /**
         * ServerStatsTelemetry
         * @description Statistics about a given servers telemetery data.
         */
        ServerStatsTelemetry: {
            /** @description The timestamp for when the telemetery data was collected. */
            time: components["schemas"]["DateTime"];
            cpu_usage?: components["schemas"]["ServerStatsCpuUsageTelemetry"];
            load: components["schemas"]["ServerStatsLoad"];
            ram: components["schemas"]["ServerStatsRamTelemetry"];
            /** @description Telemetry data for the base volume of a given server. */
            storage_base: {
                /** @description The amount of storage currently used in the base volume. */
                used: number;
                /** @description The amount of free space on the base volume. */
                free: number;
                /** @description The total amount of space on the base volume. */
                total: number;
            };
            /** @description User data storage across all devices. */
            storage_pool: {
                /** @description The percentage of storage used by user data. */
                data_percent: number;
                /** @description The percentage of storage used by the file allocation stables, etc. */
                meta_percent: number;
                /** @description The total amount of storage available. */
                total: number;
            };
        };
        /** ReconfigureSharedFsTask */
        ReconfigureSharedFsTask: {
            /**
             * @description The action to take. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "sharedfs.reconfigure";
            contents: {
                mounts?: {
                    [key: string]: {
                        /** @description String describing the server mount type. */
                        type: string;
                        /** @description Comma separated string describing the server mount options. */
                        options: string;
                        /** @description String describing the server mount source. */
                        source: string;
                    };
                } | null;
                /** @description An object describing directory identifiers with value {}. */
                directories?: {
                    [key: string]: unknown;
                } | null;
            };
        };
        /** ReconfigureServerFeaturesTask */
        ReconfigureServerFeaturesTask: {
            /**
             * @description The action to take. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "features.reconfigure";
            /** @description Supplemental information needed to perform the action. */
            contents: {
                /** @description A boolean where true represents the desire for the server to accept incoming SFTP requests for container volumes. */
                sftp?: boolean;
                /** @description A number in GB for how big the base volume should be.  This cannot be lower than the currently set value for the server. */
                base_volume_gb?: number | null;
                /** @description Configuration options for running gateway services on this server. */
                gateway?: {
                    /**
                     * @description The type of gateway service that can be run on this server.
                     * @enum {string}
                     */
                    type: "bgp" | "static";
                } | null;
            };
        };
        /**
         * RestartServerTask
         * @description A job that restarts the server.
         */
        RestartServerTask: {
            /**
             * @description The action to take. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "restart";
        };
        /**
         * RestartComputeServiceTask
         * @description A job that restarts compute service on a given server.
         */
        RestartComputeTask: {
            /**
             * @description The action to take. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "compute.restart";
        };
        /**
         * RestartComputeSpawnerTask
         * @description A job that restarts compute service on a given server.
         */
        RestartComputeSpawnerTask: {
            /**
             * @description The action to take. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "compute.spawner.restart";
        };
        /** EvacuateServerTask */
        EvacuateServerTask: {
            /**
             * @description The action to take. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "evacuation.start";
            contents: {
                destination: {
                    server_id?: components["schemas"]["ID"] | null;
                };
            };
        };
        /** EvacuateServerResetTask */
        EvacuateServerResetTask: {
            /**
             * @description The action to take. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "evacuation.reset";
        };
        /**
         * ServerTags
         * @description Tags for a given server.
         */
        ServerTags: {
            /** @description An array of server tags. */
            data: string[];
        };
        /**
         * ServerUsageDatum
         * @description Server usage data.
         */
        UsageDatum: {
            /** @description A timestamp for when the usage data was collected. */
            time: components["schemas"]["DateTime"];
            /** @description The number of nodes the data is pulled from. */
            nodes: number;
            /** @description A number in GB representing memory. */
            memory_gb: number;
        };
        /**
         * PoolIncludes
         * @description Resources associated with an IP Pool.
         */
        PoolIncludes: {
            creators?: components["schemas"]["CreatorInclude"];
            servers?: components["schemas"]["ServersIncludes"];
            integrations?: components["schemas"]["IntegrationsIncludes"];
            locations?: components["schemas"]["LocationsIncludes"];
        };
        /** TaskState */
        TaskState: {
            changed?: components["schemas"]["DateTime"];
            /**
             * @description The current state of the task.
             * @enum {string}
             */
            current?: "pending" | "error" | "running" | "completed";
        };
        /**
         * JobTask
         * @description Information about a job task.
         */
        JobTask: {
            id: components["schemas"]["ID"];
            /** @description A short description of the task. */
            caption: string;
            /** @description The API function called. */
            header: string;
            /**
             * TaskEvents
             * @description A collection of timestamps for each event in the job's lifetime.
             */
            events: {
                /** @description The timestamp of when the task was queued. */
                queued: components["schemas"]["DateTime"];
                /** @description The timestamp of when the task was completed. */
                completed: components["schemas"]["DateTime"];
                /** @description The timestamp of when the task was started. */
                started: components["schemas"]["DateTime"];
            };
            /** @description An array of job task steps. */
            steps: components["schemas"]["TaskStep"][] | null;
            state: components["schemas"]["TaskState"];
            /** @description Input information used for the job tasks. */
            input: {
                [key: string]: unknown;
            };
            /** @description Output informaiton used for the job tasks. */
            output: {
                [key: string]: string;
            } | null;
            /** @description An error object describing issues with the job. */
            error: {
                /** @description An error message */
                message: string;
            } | null;
        };
        /** JobState */
        JobState: {
            /**
             * @description The current state of the job.
             * @enum {string}
             */
            current: "new" | "queued" | "error" | "scheduled" | "expired" | "running" | "completed";
            changed?: components["schemas"]["DateTime"];
            /** @description An error, if any, that has occurred for this job. */
            error: {
                /** @description Details about the error that has occurred. */
                message: string;
            } | null;
        };
        /**
         * Job
         * @description A job resource.
         */
        Job: {
            id: components["schemas"]["ID"];
            hub_id: components["schemas"]["HubID"];
            /** @description A dash separated string showing the environment_id where the job is taking place. */
            queue: string;
            /** @description A short description of the job. */
            caption: string;
            /**
             * JobEvents
             * @description A collection of timestamps for each event in the job's lifetime.
             */
            events: {
                /** @description The timestamp of when the job was queued. */
                queued: components["schemas"]["DateTime"];
                /** @description The timestamp of when the job was completed. */
                completed: components["schemas"]["DateTime"];
                /** @description The timestamp of when the job was started. */
                started: components["schemas"]["DateTime"];
            };
            /** @description A timestamp of when the job was scheduled. */
            schedule: components["schemas"]["DateTime"];
            /** @description An array of job tasks. */
            tasks: components["schemas"]["JobTask"][];
            /** @description A timestamp for when the job expires. */
            expires: components["schemas"]["DateTime"];
            /** @description A combination of the individual task details and job details. */
            hash: string;
            /** @description A boolean where true represents the job is set to prevent duplicates of itself quickly after creation. */
            limit_duplicates: boolean;
            creator: components["schemas"]["CreatorScope"];
            state: components["schemas"]["JobState"];
        };
        /** JobIncludes */
        JobIncludes: {
            creators?: components["schemas"]["CreatorInclude"];
        };
        /**
         * Metric
         * @description A granular point-in-time measurement of a value, and its associated metadata. Metrics may contain multiple data points collected between submission to the platform.
         */
        Metric: {
            /** @description When the metric was submitted to the platform. */
            time: components["schemas"]["DateTime"];
            /** @description Additional key-values that can be used for querying in an aggregation pipeline. Often useful for filtering. */
            labels?: {
                [key: string]: string;
            };
            /** @description Additional tags associated with the metric. */
            tags?: string[];
            /** @description An array of recorded data points for this metric. */
            points: (components["schemas"]["DateTime"] | number)[][];
            /** @description Information about this metric, such as the type of metric, the data it represents, and critical common information such as hub ID and associated cluster. */
            metadata: {
                /** @description The data this metric represents. Cycle provides several built-in metrics, and, tier allowing, hubs can submit custom metrics as well.
                 *
                 *     Here is a non-exhaustive list of some of the metrics provided by the platform automatically:
                 *       - container.instances.num
                 *       - discovery.resolutions.cache_hits
                 *       - discovery.resolutions.lookups
                 *       - discovery.resolutions.not-founds
                 *       - environment.containers.num
                 *       - environment.instances.num
                 *       - environments.num
                 *       - images.num
                 *       - images.storage_kb
                 *       - infrastructure.resources.cpu.cores
                 *       - infrastructure.resources.cpu.usage.idle
                 *       - infrastructure.resources.cpu.usage.iowait
                 *       - infrastructure.resources.cpu.usage.nice
                 *       - infrastructure.resources.cpu.usage.soft_irq
                 *       - infrastructure.resources.cpu.usage.steal
                 *       - infrastructure.resources.cpu.usage.system
                 *       - infrastructure.resources.cpu.usage.user
                 *       - infrastructure.resources.ram.available_kb
                 *       - infrastructure.resources.ram.free_kb
                 *       - infrastructure.resources.ram.total_kb
                 *       - infrastructure.servers.num
                 *       - lb.controller.connections
                 *       - lb.controller.disconnects.destination_unavailable
                 *       - lb.controller.disconnects.no_error
                 *       - lb.controller.disconnects.timeout_idle
                 *       - lb.controller.disconnects.timeout_init
                 *       - lb.controller.disconnects.total
                 *       - lb.controller.disconnects.unknown_error
                 *       - lb.controller.received_kb
                 *       - lb.controller.requests
                 *       - lb.controller.requests.total
                 *       - lb.controller.requests.url.handlers.forward.hits
                 *       - lb.controller.requests.url.handlers.forward.timing_ms
                 *       - lb.controller.requests.url.handlers.redirect.hits
                 *       - lb.controller.requests.url.handlers.redirect.timing_ms
                 *       - lb.controller.router.destinations.connections.invalid
                 *       - lb.controller.router.destinations.connections.received_kb
                 *       - lb.controller.router.destinations.connections.success
                 *       - lb.controller.router.destinations.connections.transmitted_kb
                 *       - lb.controller.router.destinations.connections.unavailable
                 *       - lb.controller.router.destinations.latency
                 *       - lb.controller.router.destinations.requests.total
                 *       - lb.controller.transmitted_kb
                 *       - memberships.num
                 *       - pipeline.runs.num
                 *       - stack.builds.num
                 *      */
                metric: string;
                /**
                 * @description The type of data represented by the metric.
                 *       - **gauge**: represents a single numerical value that can arbitrarily go up and down.
                 *       - **count**: represents a counter that resets periodically.
                 *       - **counter**: represents a counter that only increases.
                 *       - **rate**: represents the rate of change of a counter per second.
                 *       - **histogram**: tracks the statistical distribution of a set of values.
                 *       - **distribution**: aggregates data across multiple hosts and applications.
                 *       - **set**: tracks the number of unique elements in a group.
                 *
                 * @enum {string}
                 */
                type: "gauge" | "count" | "counter" | "rate" | "histogram" | "distribution" | "set";
                /** @description The originator of this metric. */
                origin: string;
                hub_id?: components["schemas"]["ID"];
                /** @description The specific resource ID and type associated with this metric. */
                component?: {
                    id: components["schemas"]["ID"];
                    type: string;
                } | null;
                /** @description The cluster associated with this metric */
                cluster?: string | null;
            };
        };
        /**
         * EventType
         * @enum {string}
         */
        EventType: "api.security_violation" | "console.ssh.login" | "console.ssh.login.failed" | "console.sos.login" | "console.sos.login.failed" | "container.instance.backup.completed" | "container.instance.backup.failed" | "container.instance.delete.failed" | "container.instance.error" | "container.instance.restart.max_restarts" | "container.instance.function.max_runtime" | "container.instance.healthcheck.failed" | "container.instance.healthcheck.recovered" | "container.instance.volume.extend.failed" | "container.instance.healthcheck.restarted" | "container.instance.migration.failed" | "container.instance.migration.completed" | "container.instance.migration.failed" | "container.instance.network.interfaces.create.failed" | "container.instance.restart.failed" | "container.instance.start.failed" | "container.instance.start.privileged" | "container.instance.stop.failed" | "container.instances.autoscale.down" | "container.instances.autoscale.up" | "container.reconfigured.privileged" | "container.volumes.base.create.failed" | "container.volumes.create.failed" | "environment.service.auto_update" | "environment.service.lb.ips.sync.failed" | "environment.service.vpn.login.failed" | "infrastructure.cluster.resources.ram.full" | "infrastructure.server.compute.volumes.base.reconfigured" | "infrastructure.server.compute.full_restart" | "infrastructure.server.compute.sharedfs.mounts.mount" | "infrastructure.server.compute.sharedfs.mounts.mount.failed" | "infrastructure.server.compute.soft_restart" | "infrastructure.server.image.download.failed" | "infrastructure.server.internal_api.throttled" | "infrastructure.server.manifest.sync.failed" | "infrastructure.server.mesh.connect.failed" | "infrastructure.server.neighbor.reachable" | "infrastructure.server.neighbor.rebuild" | "infrastructure.server.neighbor.unreachable" | "infrastructure.server.neighbor.upgraded" | "infrastructure.server.resources.load.high" | "infrastructure.server.resources.ram.full" | "infrastructure.server.resources.storage.volumes.base.full" | "infrastructure.server.resources.storage.cycle_pool.full" | "infrastructure.server.sftp.lockdown" | "infrastructure.server.sftp.login" | "infrastructure.server.sftp.login.failed" | "infrastructure.server.evacuation.failed" | "infrastructure.server.evacuation.completed";
        /**
         * Event
         * @description A platform-generated event. Describes something happening on the platform at a specific time. Can be informational, security related, or a notice of something important.
         */
        Event: {
            /** @description When the event was submitted to the platform. */
            time: components["schemas"]["DateTime"];
            /** @description Additional key-values that can be used for querying in an aggregation pipeline. Often useful for filtering. */
            labels?: {
                [key: string]: string;
            };
            /** @description Additional tags associated with the event. */
            tags?: string[];
            /** @description A message describing what happened. */
            text?: string;
            /** @description Information about this event, such as the type of event, the data it represents, and critical common information such as hub ID and associated cluster. */
            metadata: {
                /** @description Describes what this event is.
                 *      */
                event: components["schemas"]["EventType"];
                /**
                 * @description The type of event.
                 *       - **info**: represents an informational message.
                 *       - **warning**: represents a warning message indicating a potential issue.
                 *       - **error**: represents an error message indicating a failure or critical issue.
                 *       - **success**: represents a success message indicating a successful operation.
                 *       - **alert**: represents a critical message indicating a severe issue.
                 *       - **notice**: represents a notice message indicating a noteworthy event.
                 *       - **audit**: represents a notice message indicating a message that would be needed for audits
                 *
                 * @enum {string}
                 */
                type: "info" | "warning" | "error" | "success" | "alert" | "notice" | "audit";
                /**
                 * @description Describes how important this event is.
                 * @enum {string}
                 */
                priority: "critical" | "high" | "medium" | "normal" | "low";
                /** @description The originator of this event. */
                origin: string;
                hub_id?: components["schemas"]["ID"];
                /** @description The specific resource ID and type associated with this event. */
                component?: {
                    id: components["schemas"]["ID"];
                    type: string;
                } | null;
                /** @description The cluster associated with this event */
                cluster?: string | null;
            };
        };
        /**
         * LogLine
         * @description A log line is point in time data output from a container instance.
         */
        LogLine: {
            /** @description The time the log line occurred. */
            time: components["schemas"]["DateTime"];
            /** @description The source that generated the log line. */
            source: string;
            /** @description The message associated with the log line. */
            message: string;
            /** @description The container instance that the log line originated from. */
            instance_id?: string | null;
            /** @description A randomly generated ID that is assigned to all lines in the same context window.
             *     The first line with a specific ID is the log line that matches the query, and the following
             *     log lines are included due to the the set context window in the aggregate.
             *      */
            context_window?: string;
        };
        /**
         * Monitor
         * @description A monitor used to determine latency between the public internet and a load balancer on Cycle. These monitors are automatically created and managed by the platform. Information about specific monitors is provided for determining the regional latencies for an environment.
         *
         */
        Monitor: {
            /** @description The ID of the node this monitor is running on. */
            node_id: string;
            /** @description The country code of where this monitor is located. */
            country_short: string;
            /** @description The full name of the country where this monitor is located. */
            country: string;
            /** @description The name of the region (state, province, prefecture, etc.) where this monitor is located. */
            region: string;
            /** @description The name of the city where this monitor is located. */
            city: string;
            /**
             * Format: float
             * @description The latitude where this monitor is located.
             */
            latitude: number;
            /**
             * Format: float
             * @description The longitude where this monitor is located.
             */
            longitude: number;
        };
        /**
         * PipelineIncludes
         * @description All includable resources linkable to the given pipeline.
         */
        PipelineIncludes: {
            creators?: components["schemas"]["CreatorInclude"];
            /** @description A name value. */
            name?: string;
            /** @description A record of resources that can be associated with the pipeline. */
            components?: {
                [key: string]: components["schemas"]["Container"] | components["schemas"]["Environment"] | components["schemas"]["Stack"] | components["schemas"]["StackBuild"] | components["schemas"]["Image"] | components["schemas"]["ImageSource"];
            };
            "components:identifiers"?: components["schemas"]["IdentifierIncludes"];
        };
        /** TriggerPipelineAction */
        TriggerPipelineAction: {
            /**
             * @description The requested action to perform. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "trigger";
            contents?: {
                /** @description A map of variables to pass into the pipeline when it runs. */
                variables?: {
                    [key: string]: string;
                };
                advanced?: {
                    /** @description Sub queue allows multiple concurrent pipeline runs. */
                    sub_queue?: string | null;
                    /** @description To enable skip locks, pass the current UNIX timestamp. Must be accurate within 10 minutes of the current UTC time.
                     *     This will skip lock checks when running a pipeline - the user takes all risk of ensuring two pipeline runs won't make conflicting changes.
                     *      */
                    skip_locks?: number | null;
                };
            };
        };
        /** RerunPipelineAction */
        RerunPipelineAction: {
            /**
             * @description The requested action to perform. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "rerun";
            contents?: {
                /** @description The ID of the run to retry. */
                run_id?: components["schemas"]["ID"];
            };
        };
        /**
         * NetworkIncludes
         * @description All includable resource linkable to the given network.
         */
        NetworkIncludes: {
            creators?: components["schemas"]["CreatorInclude"];
            environments?: components["schemas"]["EnvironmentIncludes"];
        };
        /**
         * IndexComponent
         * @description Generic component format for describing resources for the search index
         */
        Component: {
            /** @description ID of the component */
            id: string;
            /** @description Name of the component */
            name: string;
            identifier?: components["schemas"]["Identifier"];
            /** @description State of the component */
            state: string;
            events: components["schemas"]["Events"];
            /** @description related strings for fuzzy search */
            context_blobs: string[];
            /** @description Component associations */
            associations: {
                /** @description Associated container Id */
                container?: string;
                /** @description Associated environment Id */
                environment?: string;
                /** @description Associated image source Id */
                "image-source"?: string;
                /** @description Associated pipeline source Id */
                pipeline?: string;
                /** @description Associated virtual machine source Id */
                "virtual-machine"?: string;
                /** @description Associated image Id */
                image?: string;
                /** @description Associated stack Id */
                stack?: string;
                /** @description Associated server Id */
                server?: string;
                /** @description Associated provider location Id */
                "provider-location"?: string;
            };
        };
        /**
         * Index
         * @description An index that enables search in the portal
         */
        Index: {
            /** @description The timestampof when the index was generated */
            generated: components["schemas"]["DateTime"];
            /** @description Id describing the Hub */
            hub_id: string;
            containers: {
                [key: string]: components["schemas"]["Component"];
            };
            environments: {
                [key: string]: components["schemas"]["Component"];
            };
            image_sources: {
                [key: string]: components["schemas"]["Component"];
            };
            dns_zones: {
                [key: string]: components["schemas"]["Component"];
            };
            stacks: {
                [key: string]: components["schemas"]["Component"];
            };
            servers: {
                [key: string]: components["schemas"]["Component"];
            };
            pipelines: {
                [key: string]: components["schemas"]["Component"];
            };
            virtual_machines: {
                [key: string]: components["schemas"]["Component"];
            };
        };
        /**
         * StackIncludes
         * @description All includable resources linkable to the given stack.
         */
        StackInclude: {
            creators?: components["schemas"]["CreatorInclude"];
        };
        /**
         * StackBuildAbout
         * @description Information about the stack build.
         */
        StackBuildAbout: {
            /** @description A user defined version of the build. */
            version: string;
            /** @description A user defined description for the build. */
            description: string;
            git_commit?: components["schemas"]["StackGitCommit"];
        };
        /**
         * StackBuildLog
         * @description A build log for a given stack build.
         */
        StackBuildLog: {
            id: components["schemas"]["ID"];
            hub_id: components["schemas"]["HubID"];
            /** @description The ID of stack the build log pertains to. */
            stack_id: string;
            /** @description The ID of stack build the build log pertains to. */
            build_id: string;
            /** @description The log itself. */
            log: string;
            /**
             * BuildLogEvents
             * @description A collection of timestamps for each event in the build log's lifetime.
             */
            events: {
                /** @description The timestamp of when the build log was created. */
                created: components["schemas"]["DateTime"];
                /** @description The timestamp of when the build log was updated. */
                updated: components["schemas"]["DateTime"];
                /** @description The timestamp of when the build log was deleted. */
                deleted: components["schemas"]["DateTime"];
            };
        };
        /** GenerateStackBuild */
        GenerateStackBuildAction: {
            /**
             * @description The job to do. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "generate";
        };
        /** DeployStackBuild */
        DeployStackBuildAction: {
            /**
             * @description The action the job takes. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "deploy";
            /** @description Additional information needed for the job. */
            contents: {
                /** @description The ID for the environment this stack build will be deployed to. */
                environment_id: string;
                deployment?: components["schemas"]["Deployment"] | null;
                update?: components["schemas"]["StackBuildDeploymentUpdates"] | null;
            };
        };
        /**
         * VirtualMachineIncludes
         * @description All includable resources linkable to the given virtual machine.
         */
        VirtualMachineIncludes: {
            creators?: components["schemas"]["CreatorInclude"];
            environments?: {
                [key: string]: components["schemas"]["Environment"];
            };
            "environments:identifiers"?: {
                [key: string]: components["schemas"]["ID"];
            };
            clusters?: {
                [key: string]: components["schemas"]["Cluster"];
            };
            containers?: {
                [key: string]: components["schemas"]["Container"];
            };
        };
        /** VirtualMachineStartTask */
        VirtualMachineStartTask: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            action: "start";
        };
        /** VirtualMachineStopTask */
        VirtualMachineStopTask: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            action: "stop";
        };
        /** VirtualMachineReconfigureTask */
        VirtualMachineReconfigureTask: {
            /**
             * @description The action to take. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "reconfigure";
            contents: components["schemas"]["VirtualMachineConfig"];
        };
        /** VirtualMachineRootPwChangeTask */
        VirtualMachineRootPwChangeTask: {
            /**
             * @description The action to take. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "rootpw.change";
            contents: {
                /** @description The new password. Must be at least 10 characters. */
                password: string;
            };
        };
        /** VirtualMachineIpAllocateTask */
        VirtualMachineIpAllocateTask: {
            /**
             * @description The action to take. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "ip.allocate";
            contents: {
                /** @description The ID of the IP address to allocate to the virtual machine. */
                ip_id?: components["schemas"]["ID"];
            };
        };
        /** VirtualMachineIpUnallocateTask */
        VirtualMachineIpUnallocateTask: {
            /**
             * @description The action to take. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            action: "ip.unallocate";
            contents: {
                /** @description The ID of the IP address to unallocate from the virtual machine. */
                ip_id: components["schemas"]["ID"];
            };
        };
        /**
         * VirtualMachineBaseImage
         * @description Represents a virtual machine base OS image provided by Cycle.
         *
         */
        VirtualMachineBaseImage: {
            /** @description The name of the base image (e.g., "Alpine Linux"). */
            title: string;
            /** @description A detailed description of the base image. */
            description: string;
            /**
             * Format: uri
             * @description The official homepage for the base image.
             */
            homepage: string;
            /** @description A list of available versions for the base image, including details like version number and disk image URL. */
            versions: {
                /** @description A unique identifier for the version. */
                identifier: string;
                /** @description The version number of the base image. */
                version: string;
                /**
                 * Format: uri
                 * @description The URL where the disk image can be downloaded.
                 */
                disk_image_url: string;
                /** @description A flag indicating whether the version is currently supported. */
                supported: boolean;
                /** @description Whether the image supports UEFI. */
                uefi: boolean;
            }[];
        };
        /**
         * VirtualMachineSosToken
         * @description A token used to connect to a virtual machine using serial-over-SSH.
         */
        VirtualMachineSosToken: {
            id: components["schemas"]["ID"];
            /** @description The ID of the virtual machine being connected to. */
            virtual_machine_id: string;
            hub_id: components["schemas"]["HubID"];
            creator: components["schemas"]["CreatorScope"];
            /**
             * SSHTokenEvents
             * @description A collection of timestamps for each event in the serial-over-SSH token's lifetime.
             */
            events: {
                /** @description The timestamp of when the serial-over-SSH token was created. */
                created: components["schemas"]["DateTime"];
                /** @description The timestamp of when the serial-over-SSH token was used. */
                used: components["schemas"]["DateTime"];
                /** @description The timestamp of when the serial-over-SSH token expires. */
                expires: components["schemas"]["DateTime"];
            };
            /** @description A boolean where true represents the token as being a valid token to be used for connection. */
            valid: boolean;
        };
        /**
         * VirtualMachineSosConnection
         * @description Connection details for connecting to a virtual machine using serial-over-SSH.
         */
        VirtualMachineSosConnection: {
            token: components["schemas"]["VirtualMachineSosToken"];
            /** @description The secret used to connect. */
            secret: string;
            /** @description The serial-over-SSH connection address. */
            address: string;
        };
        /**
         * VirtualMachineSshIncludes
         * @description All includable resources linkable to the given virtual machine SSH key.
         */
        VirtualMachineSshIncludes: {
            creators?: components["schemas"]["CreatorInclude"];
            environments?: {
                [key: string]: components["schemas"]["Environment"];
            };
            "environments:identifiers"?: {
                [key: string]: components["schemas"]["ID"];
            };
        };
    };
    responses: {
        /** @description General error response from the platform */
        DefaultError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorEnvelope"];
            };
        };
    };
    parameters: {
        /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
        SortParam: string[];
        FilterParam: Record<string, never>;
        /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
        PageParam: {
            /** @description The page to jump to */
            number?: number;
            /** @description The number of resources returned per page. */
            size?: number;
        };
        MembershipIncludeParam: ("senders" | "hubs" | "roles")[];
        OrderIncludeParam: "promo_codes"[];
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getAccount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the Account. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Account"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    deleteAccount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a job descriptor with information about the status of the Account deletion. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    updateAccount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description The new name on the Account. */
                    name?: {
                        first?: string;
                        last?: string;
                    };
                    /** @description If true, Cycle employees will have the ability, upon consent, to access the account for support purposes. This access will be logged. */
                    allow_support_login?: boolean;
                };
            };
        };
        responses: {
            /** @description Returns the updated Account. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Account"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getAccountLogins: {
        parameters: {
            query?: {
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                filter?: components["parameters"]["FilterParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of login records associated with this Account. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: (components["schemas"]["AccountEmployeeLogin"] | components["schemas"]["AccountPasswordLogin"])[];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    changePassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Current Password */
                    current: string;
                    /** @description New Password */
                    new: string;
                };
            };
        };
        responses: {
            /** @description Returns an Account. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Account"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    resetPassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    email: {
                        address: string;
                    };
                } | {
                    token: string;
                    password: string;
                };
            };
        };
        responses: {
            /** @description Returns a simple object containing a success boolean. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            success: boolean;
                        };
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getAccountInvites: {
        parameters: {
            query?: {
                /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
                meta?: "capabilities"[];
                include?: components["parameters"]["MembershipIncludeParam"];
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                filter?: components["parameters"]["FilterParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of pending Hub Memberships. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["HubMembership"][];
                        includes?: components["schemas"]["AccountMembershipIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    updateAccountInvite: {
        parameters: {
            query?: {
                include?: components["parameters"]["MembershipIncludeParam"];
            };
            header?: never;
            path: {
                /** @description The ID of the given Invite. */
                inviteId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description If true, the Invite will be accepted and the associated Account will join the Hub. */
                    accept?: boolean;
                    /** @description If true, the Invite will be declined and the associated Account will NOT join the Hub. */
                    decline?: boolean;
                };
            };
        };
        responses: {
            /** @description Returns a Hub Membership. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["HubMembership"];
                        includes?: components["schemas"]["AccountMembershipIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getAccountMemberships: {
        parameters: {
            query?: {
                include?: components["parameters"]["MembershipIncludeParam"];
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                filter?: components["parameters"]["FilterParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of Hub Memberships associated with the Account. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["HubMembership"][];
                        includes?: components["schemas"]["HubMembershipIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getTwoFactorAuthSetup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns necessary information for configuring two-factor auth for the Account. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TwoFactorAuthSetup"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    enableTwoFactorAuth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description The token used to authenticate the two-factor setup. */
                    token: string;
                };
            };
        };
        responses: {
            /** @description Returns the recovery codes needed in case two-factor auth is no longer possible. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["TwoFactorAuthRecovery"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    disableTwoFactorAuth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description A valid existing two-factor auth token, for verification. */
                    token: string;
                };
            };
        };
        responses: {
            /** @description Returns the Account. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Account"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    recoverTwoFactorAuth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description The user's email */
                    email: string;
                    password: string;
                    recovery_codes: string[];
                    token?: string;
                };
            };
        };
        responses: {
            /** @description Returns details for setting up two-factor auth. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["TwoFactorAuthSetup"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getAnnouncements: {
        parameters: {
            query?: {
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
                /** @description ## Filter Field
                 *     The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                 *      */
                filter?: {
                    /**
                     * @description Get only Announcements that have been resolved, or only those that have not.
                     * @enum {string}
                     */
                    resolved?: "true" | "false";
                    /**
                     * @description The start date from when to fetch the Announcements
                     * @enum {string}
                     */
                    range?: "hour" | "day" | "week" | "month" | "year";
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of announcements. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Announcement"][];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getCredits: {
        parameters: {
            query?: {
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                /** @description ## Filter Field
                 *     The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                 *      */
                filter?: {
                    /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the credit's current state.
                     *      */
                    state?: string;
                    /** @description Use a text-based search to filter the credits. */
                    search?: string;
                };
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a collection of credit resources. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Credit"][];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getCredit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID for a given credit. */
                creditsId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a credit resource. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Credit"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getInvoices: {
        parameters: {
            query?: {
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
                /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
                meta?: "due"[];
                /** @description ## Filter Field
                 *     The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                 *      */
                filter?: {
                    /** @description `filter[search]=value` search for the specified text on supported fields.
                     *      */
                    search?: string;
                    /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the invoice's current state.
                     *      */
                    state?: string;
                    /** @description The start date from when to pull the invoices */
                    "range-start"?: components["schemas"]["DateTime"];
                    /** @description The end date from when to pull the invoices */
                    "range-end"?: components["schemas"]["DateTime"];
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of Invoices. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Invoice"][];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getInvoice: {
        parameters: {
            query?: {
                /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
                meta?: "due"[];
            };
            header?: never;
            path: {
                /** @description The ID of the invoice. */
                invoiceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns an invoice resource. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Invoice"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createInvoiceJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the invoice. */
                invoiceId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The name of the action to perform.
                     * @enum {string}
                     */
                    action: "pay";
                };
            };
        };
        responses: {
            /** @description Returns a Job Descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getBillingMethods: {
        parameters: {
            query?: {
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                filter?: components["parameters"]["FilterParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description returns a collection of billing methods. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Method"][];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createBillingMethod: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Parameters for creating a new billing method. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description A name for the billing method. */
                    name: string;
                    /** @description A boolean where true represents a billing method being primary. */
                    primary: boolean;
                    address: components["schemas"]["Address"];
                    credit_card?: {
                        name: string;
                        number: string;
                        cvv: string;
                        expiration: {
                            month: number;
                            year: number;
                        };
                    } | null;
                    us_bank_acct?: {
                        /** @description The name of the account holder. */
                        account_holder_name: string;
                        /**
                         * @description Whether this account is owned by a business or an individual.
                         * @enum {string}
                         */
                        account_holder_type: "individual" | "company";
                        /** @description The routing number of the bank where the account lives. */
                        routing_number: string;
                        /** @description The number of the bank account. */
                        account_number: string;
                    } | null;
                };
            };
        };
        responses: {
            /** @description Returns a billing method. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Method"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getBillingMethod: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the billing method. */
                methodId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a billing method resource. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Method"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    deleteBillingMethod: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the billing method. */
                methodId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a Job Descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    updateBillingMethod: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the billing method. */
                methodId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description A name for the billing method. */
                    name?: string;
                    /** @description A boolean where true represents a billing method being primary. */
                    primary?: boolean;
                };
            };
        };
        responses: {
            /** @description Returns a billing method resource. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Method"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createBillingMethodJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the method. */
                methodId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The name of the action to perform.
                     * @enum {string}
                     */
                    action: "verify";
                    contents: {
                        micro_deposits: number[];
                    };
                };
            };
        };
        responses: {
            /** @description Returns a job descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getOrders: {
        parameters: {
            query?: {
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                filter?: components["parameters"]["FilterParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
                meta?: "due"[];
                include?: components["parameters"]["OrderIncludeParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of Billing Orders. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Order"][];
                        includes?: components["schemas"]["BillingOrderIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createOrder: {
        parameters: {
            query?: {
                meta?: "due"[];
                include?: components["parameters"]["OrderIncludeParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Parameters for creating a new order */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description ID associated with the tier plan */
                    tier_plan_id?: string;
                    /** @description ID associated with the support plan */
                    support_plan_id?: string;
                    /**
                     * @description String that defines term length
                     * @enum {string}
                     */
                    term_length?: "once" | "monthly" | "yearly";
                    /** @description String that defines a promo code */
                    promo_code?: string;
                };
            };
        };
        responses: {
            /** @description Returns a Billing Order. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["BillingOrder"];
                        includes?: components["schemas"]["BillingOrderIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getBillingOrder: {
        parameters: {
            query?: {
                meta?: "due"[];
                include?: components["parameters"]["OrderIncludeParam"];
            };
            header?: never;
            path: {
                /** @description The ID of the billing order. */
                orderId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a Billing Order */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Order"];
                        includes?: components["schemas"]["BillingOrderIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    updateBillingOrder: {
        parameters: {
            query?: {
                meta?: "due"[];
                include?: components["parameters"]["OrderIncludeParam"];
            };
            header?: never;
            path: {
                /** @description The ID of the billing order. */
                orderId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description ID associated with the tier plan */
                    tier_plan_id?: string;
                    /** @description ID associated with the support plan */
                    support_plan_id?: string;
                    /**
                     * @description String that defines term length
                     * @enum {string}
                     */
                    term_length?: "once" | "monthly" | "yearly";
                    /** @description String that defines a promo code */
                    promo_code?: string;
                };
            };
        };
        responses: {
            /** @description Returns a Billing Order. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Order"];
                        includes?: components["schemas"]["BillingOrderIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createOrderJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the requested Order */
                orderId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The name of the action to perform
                     * @enum {string}
                     */
                    action: "confirm";
                };
            };
        };
        responses: {
            /** @description Returns a Job Descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getBillingSupportPlans: {
        parameters: {
            query?: {
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                filter?: components["parameters"]["FilterParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns available support plans. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["SupportPlan"][];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getBillingTiers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of available Billing Tiers. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["TierPlan"][];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getBillingServices: {
        parameters: {
            query?: {
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                filter?: components["parameters"]["FilterParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of Billing Services. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Service"][];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getBillingService: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Billing Service. */
                servicesId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the Hub's specified Billing Service. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Service"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getBillingOverages: {
        parameters: {
            query?: {
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                filter?: components["parameters"]["FilterParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns Billing Overages. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Overage"][];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getContainers: {
        parameters: {
            query?: {
                /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
                meta?: ("instances_count" | "domains" | "ips")[];
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: ("creators" | "images" | "stack_builds" | "stacks" | "environments")[];
                /** @description ## Filter Field
                 *     The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                 *      */
                filter?: {
                    /** @description `filter[creator]=account-ID` filter for containers matching a particular creator, such as `account-ID` or `environment-ID`
                     *      */
                    creator?: string;
                    /** @description `filter[identifier]=value` List only those containers matching this identifier. May return multiple results.
                     *      */
                    identifier?: string;
                    /** @description `filter[search]=value` search containers for a value associated with a field on the given container(s).
                     *      */
                    search?: string;
                    /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the container's current state.
                     *      */
                    state?: string;
                    /** @description `filter[service]=value` service filtering will allow you to filter by service type: `loadbalancer`, `discovery`, `vpn`.
                     *      */
                    service?: string;
                    /** @description `filter[public_network]=value` public network filtering will allow you to filter by the containers network settings: `enabled`, `disabled`, `egress-only`.
                     *      */
                    public_network?: string;
                    /** @description `filter[image]=ID` image filtering by ID.  Submit the ID of the image you wish to filter for and the return will be any containers currently using the image.
                     *      */
                    image?: string;
                    /** @description `filter[environment]=ID` environment filtering by ID.  Submit the ID of the environment you wish to filter for and the return will be any containers in that environment.
                     *      */
                    environment?: string;
                    /** @description `filter[tags]=tagone,tagtwo,tagthree` container filtering using server tags. If the container has the tags you submit it will be part of the return.
                     *      */
                    tags?: string;
                    /** @description `filter[stack]=ID` stack filtering by ID.  Submit the ID of the stack you wish to filter for and the return will be any containers deployed associated with 'containers' from the stack.
                     *      */
                    stack?: string;
                    /** @description `filter[deployment]=v1,v2` filter containers by deployment(s).
                     *      */
                    deployment?: string;
                    /** @description The start date from when to pull the containers */
                    "range-start"?: components["schemas"]["DateTime"];
                    /** @description The end date from when to pull the containers */
                    "range-end"?: components["schemas"]["DateTime"];
                    /** @description `filter[deployment_strategy]=strategy` deployment strategy filtering by strategy string.  Submit the deployment strategy (example: "function") of the strategy you wish to filter for and the return will be any containers matching that description.
                     *      */
                    deployment_strategy?: string;
                };
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of Containers. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Container"][];
                        includes?: components["schemas"]["ContainerIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createContainer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Parameters for creating a new Container. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description A user defined name for the Container. */
                    name: string;
                    identifier?: components["schemas"]["Identifier"] | null;
                    /** @description An identifier for the Environment this Container will be deployed to. */
                    environment_id: string;
                    /** @description An identifier for the Image used to create this Container. */
                    image_id: string;
                    /** @description A boolean where true represents this Container is stateful. */
                    stateful: boolean;
                    config: components["schemas"]["Config"];
                    /** @description When set to true, prevents this Container from being deleted. */
                    lock?: boolean;
                    deployment?: components["schemas"]["Deployment"] | null;
                    volumes?: components["schemas"]["ContainerVolume"][];
                    /** @description Custom meta data. Not utilized by Cycle. */
                    annotations?: {
                        [key: string]: unknown;
                    } | null;
                };
            };
        };
        responses: {
            /** @description Returns a Container. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Container"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getContainer: {
        parameters: {
            query?: {
                /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
                meta?: ("instances_count" | "domains" | "ips")[];
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: ("creators" | "images" | "stack_builds" | "stacks" | "environments")[];
            };
            header?: never;
            path: {
                /** @description The ID of the requested Container. */
                containerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a Container. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Container"];
                        includes?: components["schemas"]["ContainerIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    deleteContainer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the requested Container. */
                containerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a Job Descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    updateContainer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Container. */
                containerId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for updating a Container. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description The name for the Container. */
                    name?: string;
                    /** @description The name for the identifier. */
                    identifier?: string;
                    /** @description Sets whether Container should be deprecated. */
                    deprecate?: boolean;
                    /** @description When set to true, prevents this Container from being deleted. */
                    lock?: boolean;
                    /** @description User meta data for the Container. */
                    annotation?: {
                        [key: string]: string;
                    };
                };
            };
        };
        responses: {
            /** @description Returns the updated Container. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Container"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getContainerSummary: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the requested container. */
                containerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns an Container summary resource. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Contains useful and relevant data/statistics for a container that would otherwise be several separate API calls. */
                        data: {
                            id: components["schemas"]["ID"];
                            state: components["schemas"]["ContainerState"];
                            stats?: components["schemas"]["StateCountSummary"] | null;
                        };
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createContainerJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the requested container. */
                containerId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for creating a new container job. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ContainerStartAction"] | components["schemas"]["ContainerStopAction"] | components["schemas"]["ReconfigureContainer"] | components["schemas"]["ReconfigureVolumes"] | components["schemas"]["Reimage"] | components["schemas"]["Scale"];
            };
        };
        responses: {
            /** @description Returns a Job Descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getContainerServers: {
        parameters: {
            query?: {
                /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
                meta?: "primary_ip"[];
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path: {
                /** @description The ID of the requested container. */
                containerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns an array of Server IDs / number of Instances of this Container deployed to them. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["ServerInstancesSummary"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getCompatibleServers: {
        parameters: {
            query?: {
                /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
                meta?: ("node" | "instances_count")[];
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: ("location" | "models" | "integrations")[];
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path: {
                /** @description The ID of the requested container. */
                containerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of Servers. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Server"][];
                        includes?: components["schemas"]["ServerIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getCompatibleImages: {
        parameters: {
            query?: {
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path: {
                /** @description The ID of the requested Container. */
                containerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of compatible Images. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Image"][];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getInstances: {
        parameters: {
            query?: {
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: ("creators" | "servers" | "locations" | "integrations" | "containers" | "environments")[];
                /** @description ## Filter Field
                 *     The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                 *      */
                filter?: {
                    /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the instance's current state.
                     *      */
                    state?: string;
                    /** @description `filter[search]=value` search instances for a value associated with a field on the given instance(s).
                     *      */
                    search?: string;
                    /** @description `filter[server]=ID` server filtering by ID. Submit the ID of the server you wish to filter for and the return will be any instances of the container currently deployed to the given server.
                     *      */
                    server?: string;
                    /** @description The start date from when to pull the instances */
                    "range-start"?: components["schemas"]["DateTime"];
                    /** @description The end date from when to pull the instances */
                    "range-end"?: components["schemas"]["DateTime"];
                };
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path: {
                /** @description The ID of the container this instance is created from. */
                containerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of Container Instances. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Instance"][];
                        includes?: components["schemas"]["InstanceIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createInstances: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Container this Instance is created from. */
                containerId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description The ID of the Server the new Instance(s) should be deployed to. */
                    server_id: string;
                    /** @description The number of new Instances to be created on the given Server. */
                    new_instances: number;
                }[];
            };
        };
        responses: {
            /** @description Returns a Job Descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    deleteContainerInstances: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the container the instance(s) were created from. */
                containerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a Job Descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getInstance: {
        parameters: {
            query?: {
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: ("creators" | "servers" | "locations" | "integrations" | "containers" | "environments")[];
            };
            header?: never;
            path: {
                /** @description The ID of the requested container. */
                containerId: string;
                /** @description The ID for the container instance. */
                instanceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a Container Instance. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Instance"];
                        includes?: components["schemas"]["InstanceIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    deleteInstance: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the requested container. */
                containerId: string;
                /** @description The ID for the container instance. */
                instanceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a Job Descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    generateInstanceSSHCredentials: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the requested container. */
                containerId: string;
                /** @description The ID for the container instance. */
                instanceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns an SSH connection response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["SSHResponse"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    expireInstanceSSHCredentials: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the requested container. */
                containerId: string;
                /** @description The ID for the container instance. */
                instanceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the number of tokens removed. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The number of tokens expired. */
                        data: {
                            /** @description The number of tokens expired. */
                            tokens: number;
                        };
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createInstanceJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the requested container. */
                containerId: string;
                /** @description The ID for the container instance. */
                instanceId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for creating a new container instance job. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Migrate"] | components["schemas"]["RevertMigration"] | components["schemas"]["ExtendVolume"];
            };
        };
        responses: {
            /** @description Returns a Job Descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getInstanceVolumes: {
        parameters: {
            query?: {
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path: {
                /** @description The ID of the requested Container. */
                containerId: string;
                /** @description The ID for the Container Instance. */
                instanceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of Container Instance Volumes. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["InstanceVolume"][];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getInstanceTelemetryReport: {
        parameters: {
            query?: {
                /** @description ## Filter Field
                 *     The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                 *      */
                filter?: {
                    /** @description The start date from when to pull instance telemetry data */
                    "range-start"?: components["schemas"]["DateTime"];
                    /** @description The end date from when to pull instance telemetry data */
                    "range-end"?: components["schemas"]["DateTime"];
                };
            };
            header?: never;
            path: {
                /** @description The ID of the requested container. */
                containerId: string;
                /** @description The ID for the container instance. */
                instanceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns an Instance telemetry report. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["InstanceTelemetryReport"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getInstanceTelemetryStreamAuth: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the requested container. */
                containerId: string;
                /** @description The ID for the Container Instance. */
                instanceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns credentials for connecting to an instance telemetry stream. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Credentials for connecting to the instance telemetry stream on compute. */
                        data: {
                            /** @description The authentication token passed into the address as a URL parameter (?token). */
                            token: string;
                            /** @description The URL address to open a websocket to for streaming instance telemetry data. */
                            address: string;
                        };
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getInstanceConsoleStreamAuth: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID for the Container */
                containerId: string;
                /** @description The ID of the Instance. */
                instanceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns authorization information necessary for accessing a Container Instance's console. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** InstanceConsoleAuth */
                        data: {
                            /** @description A token used for connecting to the Instance console. */
                            token: string;
                            /** @description The protocol and url for connecting to the Instance console. */
                            address: string;
                        };
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createFunctionJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the requested container. */
                containerId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for creating a new container function job. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["trigger"];
            };
        };
        responses: {
            /** @description Returns a Job Descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getContainerBackups: {
        parameters: {
            query?: {
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: "integrations"[];
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path: {
                /** @description The ID of the requested Container. */
                containerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of container backup resources. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["ContainerBackup"][];
                        includes?: components["schemas"]["ContainerBackupIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getContainerBackup: {
        parameters: {
            query?: {
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: "integrations"[];
            };
            header?: never;
            path: {
                /** @description The ID of the requested container. */
                containerId: string;
                /** @description The ID for the container backup. */
                backupId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a Container Backup. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["ContainerBackup"];
                        includes?: components["schemas"]["ContainerBackupIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    deleteContainerBackup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the container. */
                containerId: string;
                /** @description The ID of the container backup. */
                backupId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a Job Descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createContainerBackupJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the requested container. */
                containerId: string;
                /** @description The ID of the backup. */
                backupId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The action to take.
                     * @enum {string}
                     */
                    action: "restore";
                    /** @description Additional information the platform needs to create this Job. */
                    contents: {
                        /** @description The ID of the instance this Container Backup is being restored to. */
                        instance_id: string;
                    };
                };
            };
        };
        responses: {
            /** @description Returns a Job Descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getContainerBackupLogs: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the requested container. */
                containerId: string;
                /** @description The ID for the container backup. */
                backupId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a collection of Container Backup Logs. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["ContainerBackupLogs"][];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getDNSZones: {
        parameters: {
            query?: {
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: "creators"[];
                /** @description ## Filter Field
                 *     The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                 *      */
                filter?: {
                    /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the DNS Zone's current state.
                     *      */
                    state?: string;
                };
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a collection of DNS Zones. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Zone"][];
                        includes?: components["schemas"]["ZoneIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createDNSZone: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Parameters for creating a new DNS Zone. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description A boolean where true represents the desire for the origin to be of the type `hosted`. */
                    hosted: boolean;
                    /** @description The origin that will be created. */
                    origin: string;
                    acl?: components["schemas"]["ACL"] | null;
                };
            };
        };
        responses: {
            /** @description Returns the DNS Zone resource. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Zone"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getDNSZone: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the zone. */
                zoneId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a DNS zone resource. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Zone"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    deleteDNSZone: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the zone. */
                zoneId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a Job Descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    updateDNSZone: {
        parameters: {
            query?: {
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: "creators"[];
            };
            header?: never;
            path: {
                /** @description The ID of the zone. */
                zoneId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for updating a DNS Zone. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description A boolean where true represents the desire for the origin to be of the type `hosted`. */
                    hosted?: boolean | null;
                };
            };
        };
        responses: {
            /** @description Returns a DNS zone resource. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Zone"];
                        includes?: components["schemas"]["ZoneIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    updateDNSZoneAccess: {
        parameters: {
            query?: {
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: "creators"[];
            };
            header?: never;
            path: {
                /** @description The ID of the zone. */
                zoneId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for updating a DNS Zone. */
        requestBody?: {
            content: {
                "application/json": {
                    acl?: components["schemas"]["ACL"] | null;
                };
            };
        };
        responses: {
            /** @description Returns a DNS zone. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Zone"];
                        includes?: components["schemas"]["ZoneIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createDNSZoneJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the zone. */
                zoneId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for creating a new DNS zone job. */
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The action that the job will take.
                     * @enum {string}
                     */
                    action: "verify";
                };
            };
        };
        responses: {
            /** @description Returns a Job Descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getDNSZoneRecords: {
        parameters: {
            query?: {
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: ("creators" | "containers")[];
                /** @description ## Filter Field
                 *     The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                 *      */
                filter?: {
                    /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the DNS record's current state.
                     *      */
                    state?: string;
                };
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path: {
                /** @description The ID of the zone. */
                zoneId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a collection of DNS Zone Records. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Record"][];
                        includes?: components["schemas"]["RecordIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createDNSZoneRecord: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Zone. */
                zoneId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for creating a new DNS Zone Record. */
        requestBody?: {
            content: {
                "application/json": {
                    type: components["schemas"]["RecordTypes"];
                    /** @description A name for the given record where `@` represents the desire to use the root of the origin. */
                    name: string;
                };
            };
        };
        responses: {
            /** @description Returns the DNS zone resource. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Record"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    deleteDNSZoneRecord: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Zone. */
                zoneId: string;
                /** @description The ID of the DNS Zone Record. */
                recordId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a Job Descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    updateDNSZoneRecord: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Zone. */
                zoneId: string;
                /** @description The ID of the record. */
                recordId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for updating a DNS Zone Record. The name value cannot be updated and is omitted from the properties. */
        requestBody?: {
            content: {
                "application/json": {
                    type: components["schemas"]["RecordTypes"];
                };
            };
        };
        responses: {
            /** @description Returns a DNS Zone Record. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Record"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createDNSZoneRecordJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the zone. */
                zoneId: string;
                /** @description The ID of the record. */
                recordId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for creating a new DNS Zone Record Job. */
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The action that the job will take.
                     * @enum {string}
                     */
                    action: "generateCert";
                };
            };
        };
        responses: {
            /** @description Returns a Job Descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getTLSGenerationAttempts: {
        parameters: {
            query?: {
                /** @description ## Filter Field
                 *     The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                 *      */
                filter?: {
                    /** @description `filter[domain]=value` filter the return for TLS attempts by domain.
                     *      */
                    domain?: string;
                };
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of TLS certificate generation attempts. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Attempt"][];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    lookupTLSCertificate: {
        parameters: {
            query: {
                /** @description The domain to lookup. */
                domain: string;
                /** @description Whether or not to lookup a *. wildcard certificate that would be applicable for this domain. For example, if you are looking for a certificate for x.test.com, setting this to true will identify a *.test.com certificate that would also be applicable. */
                wildcard?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a TLS certificate bundle. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description A DNS TLS certificate. */
                        data: {
                            id: components["schemas"]["ID"];
                            hub_id: components["schemas"]["HubID"];
                            /** @description A list of domains associated with the certificate. */
                            domains: string[];
                            /** @description A collection of timestamps for each event in the certificate's lifetime. */
                            events: {
                                created?: components["schemas"]["DateTime"];
                                updated?: components["schemas"]["DateTime"];
                                deleted?: components["schemas"]["DateTime"];
                                /** @description When the certificate was generated. */
                                generated?: components["schemas"]["DateTime"];
                            };
                            /** @description The certificate bundle */
                            bundle: string;
                            /** @description The private key for the certificate */
                            private_key: string;
                        };
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getUserSuppliedCertificates: {
        parameters: {
            query?: {
                /** @description ## Filter Field
                 *     The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                 *      */
                filter?: {
                    /** @description `filter[domain]=value1` filter user certificates by associated domain.
                     *      */
                    domain?: string;
                    /** @description `filter[state]=value1,value2` state filtering will allow filtering by the current state.
                     *      */
                    state?: string;
                };
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a TLS certificate. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["TlsCertificate"][];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    uploadUserSuppliedCertificate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Parameters for creating a new TLS certificate. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description The certificate's private key. */
                    private_key: string;
                    /** @description A PEM encoded certificate bundle. */
                    bundle: string;
                };
            };
        };
        responses: {
            /** @description Returns a TLS certificate. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["TlsCertificate"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getUserSuppliedCertificate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the TLS certificate. */
                certificateId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a TLS certificate. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["TlsCertificate"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createUserSuppliedCertificateJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the TLS certificate. */
                certificateId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for creating a new TLS certificate job. */
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The action that the job will take.
                     *
                     *     **deprecate**: Cycle will deprecate this certificate, and try to find another usable certificate. If none exists, it will generate a new one
                     *     for the applicable domains.
                     *
                     * @enum {string}
                     */
                    action: "deprecate";
                };
            };
        };
        responses: {
            /** @description Returns a job descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getEnvironments: {
        parameters: {
            query?: {
                /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
                meta?: ("containers" | "containers_count" | "instances_count")[];
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: ("creators" | "stacks")[];
                /** @description ## Filter Field
                 *     The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                 *      */
                filter?: {
                    /** @description `filter[creator]=account-ID` filter for environments matching a particular creator, such as `account-ID`.
                     *      */
                    creator?: string;
                    /** @description `filter[identifier]=value` List only those environments matching this identifier. May return multiple results.
                     *      */
                    identifier?: string;
                    /** @description `filter[search]=value` search for a value associated with a field on the given environment(s).
                     *      */
                    search?: string;
                    /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the environment's current state.
                     *      */
                    state?: string;
                    /** @description `filter[stack_build]=ID` stack build filtering by ID.  Submit the ID of the stack build you wish to filter for and the return sill be any environments that have the stack build deployed to them.
                     *      */
                    stack_build?: string;
                };
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of Environments. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Environment"][];
                        includes?: {
                            creators?: components["schemas"]["CreatorInclude"];
                        };
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createEnvironment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description A user defined name for the Environment. */
                    name: string;
                    identifier?: components["schemas"]["Identifier"];
                    acl?: components["schemas"]["ACL"] | null;
                    /** @description The cluster this Environment is associated with. */
                    cluster: string;
                    /** @description Contains details regarding the Environment. */
                    about: {
                        /** @description A custom description for this Environment. */
                        description: string;
                    };
                    features: components["schemas"]["EnvironmentFeatures"];
                };
            };
        };
        responses: {
            /** @description Returns an Environment. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Environment"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getEnvironmentMonitoringTiers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of monitoring tiers. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            [key: string]: components["schemas"]["MonitoringTierDetails"];
                        };
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getEnvironment: {
        parameters: {
            query?: {
                /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
                meta?: ("containers" | "containers_count" | "instances_count")[];
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: ("creators" | "stacks")[];
            };
            header?: never;
            path: {
                /** @description The ID of the requested environment. */
                environmentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns an Environment. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Environment"];
                        includes?: {
                            creators?: components["schemas"]["CreatorInclude"];
                        };
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    deleteEnvironment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the requested Environment. */
                environmentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a Job Descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    updateEnvironment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the requested Environment. */
                environmentId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for updating an Environment. */
        requestBody?: {
            content: {
                "application/json": {
                    name?: string | null;
                    identifier?: string | null;
                    version?: string | null;
                    about?: components["schemas"]["EnvironmentAbout"] | null;
                    /** @description The level of monitoring to enable for this environment. There is a cost associated with higher levels of monitoring. */
                    monitoring?: {
                        /** @enum {string} */
                        tier: "limited" | "standard" | "premium" | "enterprise";
                    } | null;
                };
            };
        };
        responses: {
            /** @description Returns an Environment. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Environment"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    updateEnvironmentAccess: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the requested Environment. */
                environmentId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for updating an Environment. */
        requestBody?: {
            content: {
                "application/json": {
                    acl?: components["schemas"]["ACL"] | null;
                };
            };
        };
        responses: {
            /** @description Returns an Environment. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Environment"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createEnvironmentJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the requested Environment. */
                environmentId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for creating a new Environment job. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["EnvironmentStartAction"] | components["schemas"]["EnvironmentStopAction"] | components["schemas"]["EnvironmentInitializeAction"] | components["schemas"]["EnvironmentReconfigureDeploymentsAction"];
            };
        };
        responses: {
            /** @description Returns a Job Descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getEnvironmentSummary: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the requested environment. */
                environmentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns an environment summary object. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["EnvironmentSummary"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getEnvironmentDeployments: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Environment to get the list of deployments for. */
                environmentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of deployments. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            /** @description A map where the key is the version property of a deployment. */
                            versions: {
                                [key: string]: {
                                    /** @description An array of all tags on this environment that point to this version. */
                                    tags: components["schemas"]["Identifier"][];
                                    /** @description The number of containers utilizing this version of this deployment. */
                                    containers: number;
                                };
                            };
                        };
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    exportStack: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the target environment. */
                environmentId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Defines which deployment containers to include in the stack export. By default, no containers tagged in a deployment are exported.
                     *     This option includes all containers with the specific, comma separated deployment tags in the final output in addition to the
                     *     containers that are not part of any deployment.
                     *      */
                    deployment_tags?: string[];
                    /**
                     * @description When set to true, Cycle will resolve image origins and inline them into the stack, essentially making this stack portable outside the hub it's currently used in.
                     *     By default, this is set to false, and the export will just reference existing image sources used by this stack in your hub by ID.
                     *
                     * @default false
                     */
                    resolve_origins?: boolean;
                };
            };
        };
        responses: {
            /** @description Returns a stack spec file. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["StackSpec"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getScopedVariables: {
        parameters: {
            query?: {
                /** @description ## Filter Field
                 *     The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                 *      */
                filter?: {
                    /** @description `filter[identifier]=value` List only those scoped variables matching this identifier. May return multiple results.
                     *      */
                    identifier?: string;
                    /** @description `filter[container]=value` List only those scoped variables assigned to the specified container ID.
                     *      */
                    container?: string;
                    /** @description `filter[search]=value` search for a value associated with a field on the given scoped variable(s).
                     *      */
                    search?: string;
                    /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the scoped variable's current state.
                     *      */
                    state?: string;
                };
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path: {
                /** @description The ID of the requested Environment. */
                environmentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of scoped variables. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["ScopedVariable"][];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createScopedVariable: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the requested Environment. */
                environmentId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for creating a Scoped Variable. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description An identifier for this Scoped Variable. */
                    identifier: string;
                    scope: components["schemas"]["ScopedVariableScope"];
                    access?: components["schemas"]["ScopedVariableAccess"];
                    /** @description The source or value of the Scoped Variable. */
                    source: components["schemas"]["RawSource"] | components["schemas"]["URLSource"];
                };
            };
        };
        responses: {
            /** @description Returns a Scoped Variable. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["ScopedVariable"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getScopedVariable: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the requested Environment. */
                environmentId: string;
                /** @description The ID of the requested Scoped Variable. */
                scopedVariableId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a Scoped Variable. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["ScopedVariable"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    deleteScopedVariable: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the requested Environment. */
                environmentId: string;
                /** @description The ID of the requested Scoped Variable. */
                scopedVariableId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a Job Descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    updateScopedVariable: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the requested endpointnvironment. */
                environmentId: string;
                /** @description The ID of the requested Scoped Variable. */
                scopedVariableId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for updating a Scoped Variable. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description An identifier, similar to a key in an Environment variable.  Its used when envoking the Scoped Variable. */
                    identifier?: string;
                    scope?: components["schemas"]["ScopedVariableScope"];
                    access?: components["schemas"]["ScopedVariableAccess"];
                    /** @description The source or value of the Scoped Variable. */
                    source?: components["schemas"]["RawSource"] | components["schemas"]["URLSource"];
                };
            };
        };
        responses: {
            /** @description Returns a Scoped Variable. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["ScopedVariable"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createDiscoveryServiceJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the environment where this discovery service resides. */
                environmentId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for reconfiguring a discovery service. */
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The name of the action to perform.
                     * @enum {string}
                     */
                    action: "reconfigure";
                    contents: {
                        config?: components["schemas"]["DiscoveryConfig"] | null;
                        /** @description A boolean where `true` represents the desire to run the environment discovery service in high availability mode. */
                        high_availability?: boolean | null;
                        /** @description A boolean where `true` represents the desire to automatically update the environment discovery service. */
                        auto_update?: boolean | null;
                    };
                };
            };
        };
        responses: {
            /** @description Returns a job descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createGatewayServiceJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the environment where this gateway service resides. */
                environmentId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for reconfiguring a gateway service. */
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The name of the action to perform.
                     * @enum {string}
                     */
                    action: "reconfigure";
                    contents: {
                        /** @description A boolean where `true` represents the desire to automatically update the environment gateway service. */
                        auto_update?: boolean | null;
                    };
                };
            };
        };
        responses: {
            /** @description Returns a job descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getLoadBalancerService: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The environmentId where the load balancer resides. */
                environmentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a load balancer info resource. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Information about an environments load balancer configuration, state, and availability settings. */
                        data: {
                            default_config: components["schemas"]["LoadBalancerConfig"];
                            /** @enum {string} */
                            default_type: "haproxy" | "v1";
                            /** @enum {string} */
                            current_type: "haproxy" | "v1";
                            base_configs?: {
                                haproxy: components["schemas"]["HaProxyConfig"];
                                v1: components["schemas"]["V1LbConfig"];
                            };
                            service: components["schemas"]["LoadBalancerEnvironmentService"] | null;
                        };
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createLoadBalancerServiceJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the environment where this load balancer resides. */
                environmentId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for reconfiguring a load balancer. */
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The name of the action to perform.
                     * @enum {string}
                     */
                    action: "reconfigure";
                    contents: {
                        /** @description A boolean where `true` represents the desire to run the environment load balancer service in high availability mode. */
                        high_availability?: boolean | null;
                        /** @description A boolean representing if this service container is set to autoupdate or not */
                        auto_update?: boolean | null;
                        config?: components["schemas"]["LoadBalancerConfig"] | null;
                    };
                };
            };
        };
        responses: {
            /** @description Returns a Job Descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getLoadBalancerTelemetryReport: {
        parameters: {
            query: {
                /** @description ## Filter Field
                 *     The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                 *      */
                filter: {
                    /** @description The start date from when to pull load balancer telemetry data */
                    "range-start"?: components["schemas"]["DateTime"];
                    /** @description The end date from when to pull load balancer telemetry data */
                    "range-end"?: components["schemas"]["DateTime"];
                    /** @description The specific controller to fetch telemetry for */
                    controller: components["schemas"]["DateTime"];
                };
            };
            header?: never;
            path: {
                /** @description The environmentId where the load balancer resides. */
                environmentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the load balancer telemetry report */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["LoadBalancerTelemetryReport"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getLoadBalancerLatestTelemetryReport: {
        parameters: {
            query: {
                /** @description ## Filter Field
                 *     The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                 *     ### Required Filter
                 *     On this endpoint, you MUST pass filter[controller].
                 *      */
                filter: {
                    /** @description `filter[controller]=port-123` filter for a specific controller to load telemetry for. THIS FILTER IS REQUIRED.
                     *      */
                    controller?: string;
                };
            };
            header?: never;
            path: {
                /** @description The environmentId where the load balancer resides. */
                environmentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the latest load balancer telemetry */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["LoadBalancerLatestTelemetry"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getLoadBalancerTelemetryLatestControllers: {
        parameters: {
            query?: {
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: ("instances" | "servers" | "containers")[];
            };
            header?: never;
            path: {
                /** @description The ID of the environment of the desired load balancer. */
                environmentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns information about the latest controllers that produced telemetry. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["LoadBalancerLatestControllers"];
                        includes?: components["schemas"]["controllers"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createSchedulerServiceJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the environment where this scheduler service resides. */
                environmentId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for reconfiguring a scheduler service. */
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The name of the action to perform.
                     * @enum {string}
                     */
                    action: "reconfigure";
                    contents: {
                        config?: components["schemas"]["SchedulerConfig"] | null;
                        /** @description A boolean where `true` represents the desire to automatically update the environment scheduler service. */
                        auto_update?: boolean | null;
                    };
                };
            };
        };
        responses: {
            /** @description Returns a Job Descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getVPNService: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The environmentId where the VPN resides. */
                environmentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the VPN service. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["VPNInfoReturn"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getVPNLogins: {
        parameters: {
            query?: {
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path: {
                /** @description The environmentId where the VPN resides. */
                environmentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a VPNInfo resource. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["VPNLogin"][];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getVPNUsers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The environmentId where the VPN service resides. */
                environmentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of VPN users for the given VPN. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["VPNUsers"][];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createVPNUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The environmentId where the VPN service resides. */
                environmentId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for creating a new VPN user. */
        requestBody?: {
            content: {
                "application/json": {
                    username: string;
                    password: string;
                };
            };
        };
        responses: {
            /** @description Returns a VPN User. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["VPNUsers"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    deleteVPNUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The environmentId where the VPN service the given user belongs to resides. */
                environmentId: string;
                /** @description The userId of the user to be deleted. */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns no data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: string;
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createVPNServiceJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Environment the VPN service resides in. */
                environmentId: string;
            };
            cookie?: never;
        };
        /** @description The task contents used to build the Environment VPN Job. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["VpnResetTask"] | components["schemas"]["VpnReconfigureTask"];
            };
        };
        responses: {
            /** @description Returns a Job Descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getHubs: {
        parameters: {
            query?: {
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
                /** @description ## Filter Field
                 *     The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                 *      */
                filter?: {
                    /** @description `filter[identifier]=value` List only those environments matching this identifier. May return multiple results.
                     *      */
                    identifier?: string;
                    /** @description `filter[search]=value` search hubs for a value associated with a field on the given Hub(s).
                     *      */
                    search?: string;
                    /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the Hub's current state.
                     *      */
                    state?: string;
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of Hubs. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Hub"][];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createHub: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Parameters for creating a Hub. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description A name for the Hub. */
                    name?: string;
                    identifier?: components["schemas"]["Identifier"];
                    webhooks?: components["schemas"]["HubWebhooks"];
                };
            };
        };
        responses: {
            /** @description Returns a Hub resource. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Hub"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getHub: {
        parameters: {
            query?: {
                /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
                meta?: "memberships"[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns an hub resource. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Hub"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    deleteHub: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Parameters for deleting a Server. */
        requestBody?: {
            content: {
                "application/json": {
                    options?: {
                        /** @description If force is set to true, this will force delete the hub, even if there are servers running on it. */
                        force?: boolean;
                    };
                };
            };
        };
        responses: {
            /** @description Returns a task descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    updateHub: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Parameters for updating a hub. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description A name for the hub. */
                    name?: string;
                    webhooks?: components["schemas"]["HubWebhooks"];
                    security?: components["schemas"]["HubSecurity"];
                    identifier?: string;
                    billing_contact?: {
                        name?: string | null;
                        legal_business_name?: string | null;
                        tax_id?: string | null;
                    } | null;
                };
            };
        };
        responses: {
            /** @description Returns the updated Hub resource. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Hub"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getHubCapabilities: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of capabilities. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Capability"][];
                        meta: {
                            /** @description Human-readable captions keyed by the platform level capability it describes. */
                            captions: {
                                [key: string]: string;
                            };
                        };
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getHubUsage: {
        parameters: {
            query?: {
                filter?: components["parameters"]["FilterParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns usage detail points of the Hub over a range of time. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["HubUsageDatum"][];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getHubActivity: {
        parameters: {
            query?: {
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: ("users" | "components" | "creators" | "images" | "stack_builds" | "stacks" | "environments")[];
                /** @description ## Filter Field
                 *     The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                 *      */
                filter?: {
                    /** @description `filter[search]=value` search activities for a value associated with a field on the given activity(s).
                     *      */
                    search?: string;
                    /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the activity's current state.
                     *      */
                    state?: string;
                    /** @description `filter[user]=ID` user filtering by ID. Submit the ID of the user you wish to filter for and the return will be any activity from that user.
                     *      */
                    user?: string;
                    /** @description `filter[environment]=ID` environment filtering by ID. Submit the ID of the environment you wish to filter for and the return will be any activity from that environment.
                     *      */
                    environment?: string;
                    /** @description `filter[container]=ID` container filtering by ID. Submit the ID of the container you wish to filter for and the return will be any activity from that container.
                     *      */
                    container?: string;
                    /** @description `filter[virtual-machine]=ID` virtual machine filtering by ID. Submit the ID of the virtual machine you wish to filter for and the return will be any activity from that virtual machine.
                     *      */
                    "virtual-machine"?: string;
                    /** @description `filter[instance]=ID` instance filtering by ID. Submit the ID of the instance you wish to filter for and the return will be any activity from that instance.
                     *      */
                    instance?: string;
                    /** @description `filter[server]=ID` server filtering by ID. Submit the ID of the server you wish to filter for and the return will be any activity from that server.
                     *      */
                    server?: string;
                    /** @description `filter[events]=value` filter by event names.
                     *      */
                    events?: string;
                    /** @description `filter[verbosity]=integer` filter the activity return by verbosity. The verbosity can be:
                     *       `0` - Activity that users would find useful.
                     *       `1` - Activity that can be useful when tracking down how something happened.
                     *       `2` - Full activity, can be useful in debugging problems.
                     *      */
                    verbosity?: number;
                };
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of Hub Activity entries. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Activity"][];
                        includes?: components["schemas"]["ActivityIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getApiKeys: {
        parameters: {
            query?: {
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                filter?: components["parameters"]["FilterParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a collection of API Key resources. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["ApiKey"][];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createApiKey: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Parameters for creating an API Key. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description A name given to the API Key. */
                    name: string;
                    /** @description The ID of the role this API Key is a member of. */
                    role_id: components["schemas"]["ID"];
                    /** @description An array of approved IPs from which this API Key can be used. */
                    ips?: string[] | null;
                };
            };
        };
        responses: {
            /** @description Returns an API Key. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["ApiKey"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getAPIKey: {
        parameters: {
            query?: {
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: "roles"[];
            };
            header?: never;
            path: {
                /** @description The ID of the API Key. */
                apikeyId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns an API Key resource. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ApiKey"];
                        includes?: components["schemas"]["ApiKeyIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    deleteAPIKey: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the API Key. */
                apikeyId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns an API Key. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["ApiKey"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    updateAPIKey: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the API Key. */
                apikeyId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for updating an API Key. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description A name given to the API Key. */
                    name?: string;
                    /** @description The ID of the role this API Key is a member of. */
                    role_id?: components["schemas"]["ID"];
                    /** @description An array of approved IPs from which this API Key can be used. */
                    ips?: string[] | null;
                };
            };
        };
        responses: {
            /** @description Returns an API Key. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["ApiKey"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getIntegration: {
        parameters: {
            query?: {
                /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
                meta?: "definition"[];
            };
            header?: never;
            path: {
                /** @description The ID of the integration to retrieve. */
                integrationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Details of the specified integration. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Integration"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    deleteIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the integration to delete. */
                integrationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a Job Descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    updateIntegration: {
        parameters: {
            query?: {
                /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
                meta?: "definition"[];
            };
            header?: never;
            path: {
                /** @description The ID of the integration to update. */
                integrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description A new name for the integration. */
                    name?: string | null;
                    /** @description The identifier of the integration. Must be unique for every integration. */
                    identifier?: components["schemas"]["Identifier"];
                    auth?: components["schemas"]["IntegrationAuth"] | null;
                    /** @description Updated key-value pairs associated with the integration. */
                    extra?: {
                        [key: string]: string;
                    } | null;
                };
            };
        };
        responses: {
            /** @description Returns the updated integration. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Integration"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getIntegrations: {
        parameters: {
            query?: {
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
                meta?: "definition"[];
                /** @description ## Filter Field
                 *     The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for. Supports filtering by state and a text search.
                 *      */
                filter?: {
                    /** @description `filter[state]=value` Filters integrations by their current state. For example, `filter[state]=active` would return only integrations in an active state.
                     *      */
                    state?: string;
                    /** @description `filter[search]=value` Performs a text search across relevant fields of the integrations. For example, `filter[search]=example` would return integrations that have "example" in any of the searchable fields
                     *      */
                    search?: string;
                    /** @description `filter[category]=value` Filters integrations by their category. For example, `filter[category]=infrastructure-provider` would return only integrations that are capable of provisioning infrastructure.
                     *      */
                    category?: string;
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of integrations */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Integration"][];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createIntegration: {
        parameters: {
            query?: {
                /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
                meta?: "definition"[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Parameters for creating an integration. */
        requestBody: {
            content: {
                "application/json": {
                    /** @description A name for the integration. */
                    name: string;
                    /** @description Unique vendor for the integration, subject to validation. */
                    vendor: string;
                    /** @description The identifier of the integration. Must be unique for every integration. */
                    identifier: components["schemas"]["Identifier"];
                    /** @description Authentication information for the integration. */
                    auth?: {
                        /** @description The region associated with the integration. */
                        region?: string | null;
                        /** @description The namespace associated with the integration. */
                        namespace?: string | null;
                        /** @description API key for accessing the integration. */
                        api_key?: string | null;
                        /** @description Key ID for accessing the integration. */
                        key_id?: string | null;
                        /** @description Secret for accessing the integration. */
                        secret?: string | null;
                        /** @description Subscription ID for the integration. */
                        subscription_id?: string | null;
                        /** @description Client ID for the integration. */
                        client_id?: string | null;
                        /** @description Base64 encoded configuration for the integration. */
                        base64_config?: string | null;
                    };
                    /** @description Additional key-value pairs associated with the integration. */
                    extra?: {
                        [key: string]: string;
                    };
                };
            };
        };
        responses: {
            /** @description Returns the new integration. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Integration"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getAvailableIntegrations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A map of categories to lists of integration definitions. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            "image-builders"?: components["schemas"]["IntegrationDefinition"][] | null;
                            "object-storage"?: components["schemas"]["IntegrationDefinition"][] | null;
                            "tls-certificate-generation"?: components["schemas"]["IntegrationDefinition"][] | null;
                            "infrastructure-provider"?: components["schemas"]["IntegrationDefinition"][] | null;
                            billing?: components["schemas"]["IntegrationDefinition"][] | null;
                        };
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createIntegrationJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Hub Integration. */
                integrationId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for creating a new Hub Integration Job. */
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The type of Job/selected Job action to create.
                     * @enum {string}
                     */
                    action: "verify";
                };
            };
        };
        responses: {
            /** @description Returns a Job Descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getHubMembers: {
        parameters: {
            query?: {
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: ("accounts" | "roles")[];
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                filter?: components["parameters"]["FilterParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of Hub Memberships. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["HubMembership"][];
                        includes?: components["schemas"]["HubMembershipIncludes-2"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getHubMembership: {
        parameters: {
            query?: {
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: ("accounts" | "roles")[];
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                filter?: components["parameters"]["FilterParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a Hub Membership. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["HubMembership"];
                        includes?: components["schemas"]["HubMembershipIncludes-2"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getHubMember: {
        parameters: {
            query?: {
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: ("accounts" | "roles")[];
            };
            header?: never;
            path: {
                /** @description The ID for the given Hub member. */
                memberId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a Hub Membership. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["HubMembership"];
                        includes?: components["schemas"]["HubMembershipIncludes-2"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    deleteHubMember: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the given Hub Member. */
                memberId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a Job Descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    updateHubMember: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID for the given member. */
                memberId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for updating a Hub membership. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description The account role. */
                    role_id?: components["schemas"]["ID"];
                    permissions?: components["schemas"]["Permissions"];
                };
            };
        };
        responses: {
            /** @description Returns a Hub Membership. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["HubMembership"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getHubMemberAccount: {
        parameters: {
            query?: {
                /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
                meta?: "capabilities"[];
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: ("accounts" | "roles")[];
            };
            header?: never;
            path: {
                /** @description The ID of the member's Account. */
                accountId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a Hub Membership. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["HubMembership"];
                        includes?: components["schemas"]["HubMembershipIncludes-2"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getHubInvites: {
        parameters: {
            query?: {
                /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
                meta?: "capabilities"[];
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: ("senders" | "roles")[];
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                filter?: components["parameters"]["FilterParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of Memberships. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["HubMembership"][];
                        includes?: components["schemas"]["HubInviteIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createHubInvite: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Parameters for creating a Hub invite. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description The email address of the invitee. */
                    recipient?: string;
                    /** @description The account role. */
                    role_id?: components["schemas"]["ID"];
                    /** @description The Environment permissions the invitee will have */
                    permissions?: {
                        /** @description Boolean value that indicates the user has access to all Environments */
                        all_environments: boolean;
                        /** @description A list of objects that describe the specific environments the invitee will have access to */
                        environments: {
                            /** @description The ID of the Environment */
                            id: string;
                            /** @description Boolean indicating the invitee has manage rights to Environment */
                            manage: boolean;
                        }[];
                    };
                };
            };
        };
        responses: {
            /** @description Returns a Hub Membership. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["HubMembership"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    deleteHubInvite: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Hub Invite. */
                inviteId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a Hub Membership. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["HubMembership"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getHubNotificationSocketAuth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description WebSocket protocol upgrade response, connection is upgraded to WebSocket. */
            101: {
                headers: {
                    /** @description Should be 'upgrade'. */
                    Connection?: string;
                    /** @description Specifies the protocol to which the connection is upgraded. */
                    Upgrade?: "websocket";
                    /** @description Accept key for the WebSocket protocol handshake. */
                    "Sec-WebSocket-Accept"?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Returns the credentials necessary for upgrading this connection into a web socket. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** HubNotificationPipelineAuthResponse */
                        data: {
                            /** @description A token used for connecting to the Hub notification pipeline websocket API. */
                            token: string;
                        };
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getRoles: {
        parameters: {
            query?: {
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                filter?: components["parameters"]["FilterParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
                /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
                meta?: "counts"[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of Hub Roles. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Role"][];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createRole: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Parameters for creating a new Hub Role. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description A name given to the Role. */
                    name?: string | null;
                    identifier: string;
                    /** @description The list of platform level capabilities assigned to this Role. */
                    capabilities?: {
                        all: boolean;
                        specific: components["schemas"]["Capability"][];
                    } | null;
                    /** @description An integer between 0 and 10 that indicates the Role hierarchy. An account can only edit a Role that is less than their rank. The 'owner' Role is rank 10. */
                    rank: number;
                    /** @description Custom user-defined properties for storing extra information on the Role. Not utilized by Cycle. */
                    extra?: {
                        [key: string]: string;
                    } | null;
                };
            };
        };
        responses: {
            /** @description Returns a Hub Role. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Role"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getRole: {
        parameters: {
            query?: {
                /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
                meta?: "counts"[];
            };
            header?: never;
            path: {
                /** @description The ID of the Role. */
                roleId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a Role. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Role"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    deleteRole: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Role. */
                roleId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a Job Descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    updateRole: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Role. */
                roleId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description A name given to the Role. */
                    name?: string | null;
                    identifier: string;
                    /** @description The list of platform level capabilities assigned to this Role. */
                    capabilities?: {
                        /** @description If true, the Role has all capabilities. */
                        all: boolean;
                        specific: components["schemas"]["Capability"][];
                    } | null;
                    rank: number;
                    /** @description Custom user-defined properties for storing extra information on the Role. Not utilized by Cycle. */
                    extra?: {
                        [key: string]: string;
                    } | null;
                };
            };
        };
        responses: {
            /** @description Returns the updated Hub Role. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Role"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getDefaultHubRoles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of the default roles/capabilities for a hub. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            name: string;
                            identifier: components["schemas"]["Identifier"];
                            /** @description The role marked as root has full moderation control over all roles. */
                            root: boolean;
                            capabilities: {
                                /** @description If true, the role has all capabilities. */
                                all: boolean;
                                specific: components["schemas"]["Capability"][];
                            };
                        }[];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getImages: {
        parameters: {
            query?: {
                /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
                meta?: "containers_count"[];
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: ("creators" | "stack_builds" | "stacks" | "sources" | "integrations")[];
                /** @description ## Filter Field
                 *     The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                 *      */
                filter?: {
                    /** @description `filter[identifier]=value` List only those images matching this identifier. May return multiple results.
                     *      */
                    identifier?: string;
                    /** @description `filter[search]=value` search for a value associated with a field on the given Image(s).
                     *      */
                    search?: string;
                    /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the Image's current state.
                     *      */
                    state?: string;
                    /** @description `filter[source_type]=value` filter images by the Image source's type.  Can be: `direct`, `stack-build`, or `bucket`
                     *      */
                    source_type?: string;
                    /** @description `filter[source_id]=ID` Image filtering by source ID.  Submit the ID of the Image source you wish to filter for and the return will be any Images created from that source.
                     *      */
                    source_id?: string;
                };
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of Images. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Image"][];
                        includes?: components["schemas"]["ImageIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createImage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Parameters for creating a new Image. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description A name for the Image. */
                    name?: string;
                    /** @description The ID for the Image source to be used. */
                    source_id: string;
                    /** @description A build object, holding information important to the Image build. */
                    build?: {
                        /** @description An object holding key value build time arguments needed for the Image during build time. */
                        args?: {
                            [key: string]: string;
                        };
                    };
                    /** @description An override object to be used for a single Image create request. */
                    override?: {
                        /** @description For Image sources with `docker-hub` or `docker-registry` origin types. A target to be used for overridding the default target - should include an Image and a tag. */
                        target?: string;
                        /** @description For Image sources with `docker-file` origin types. A URL pointing to a .tar.gz file of a repo with a Dockerfile in it - can be used instead of linking Cycle directly to a repository. */
                        targz_url?: string;
                    };
                };
            };
        };
        responses: {
            /** @description Returns an Image. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Image"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getImage: {
        parameters: {
            query?: {
                /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
                meta?: "containers_count"[];
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: ("creators" | "stack_builds" | "stacks" | "sources" | "integrations")[];
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path: {
                /** @description The ID of the image. */
                imageId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a Image. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Image"];
                        includes?: components["schemas"]["ImageIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    deleteImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the image. */
                imageId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a Job Descriptor. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    updateImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the image. */
                imageId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for creating a new image. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description A name for the image. */
                    name?: string;
                };
            };
        };
        responses: {
            /** @description Returns an Image. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Image"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getImageBuildLog: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Image. */
                imageId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns an Image's build log. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["BuildLog"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createImagesJob: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Parameters for creating a new Images Job. */
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The action is the Job type to create.
                     * @enum {string}
                     */
                    action: "prune";
                    /** @description Additional contents needed by the platform to create the Job. */
                    contents: {
                        /** @description A list of IDs to be pruned. */
                        source_ids: string[];
                    };
                };
            };
        };
        responses: {
            /** @description Returns a Job Descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createImageJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the requested Image. */
                imageId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for creating a new Image job. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @enum {string} */
                    action: "import";
                };
            };
        };
        responses: {
            /** @description Returns a Job Descriptor. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getImageSources: {
        parameters: {
            query?: {
                /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
                meta?: "images_count"[];
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: ("creators" | "integrations")[];
                /** @description ## Filter Field
                 *     The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                 *      */
                filter?: {
                    /** @description `filter[identifier]=value` List only those image sources matching this identifier. May return multiple results.
                     *      */
                    identifier?: string;
                    /** @description `filter[search]=value` search for a value associated with a field on the given Image Source(s).
                     *      */
                    search?: string;
                    /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the Image Source's current state.
                     *      */
                    state?: string;
                };
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of Image Sources. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["ImageSource"][];
                        includes?: components["schemas"]["SourceIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createImageSource: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Parameters for creating an Image Source. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description A name for the Image Source. */
                    name?: string;
                    identifier?: components["schemas"]["Identifier"];
                    acl?: components["schemas"]["ACL"] | null;
                    builder?: {
                        integration_id: components["schemas"]["HybridIdentifier"];
                    } | null;
                    type: components["schemas"]["ImageSourceType"];
                    origin: components["schemas"]["ImageOrigin"];
                    /** @description User defined information about the Image Source. */
                    about?: {
                        /** @description A description of the Image Source. */
                        description: string | null;
                    };
                };
            };
        };
        responses: {
            /** @description Returns an Image Source. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["ImageSource"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getImageSource: {
        parameters: {
            query?: {
                /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
                meta?: "images_count"[];
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: ("creators" | "integrations")[];
            };
            header?: never;
            path: {
                /** @description The ID of the Image Source. */
                sourceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns an Image Source. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["ImageSource"];
                        includes?: components["schemas"]["SourceIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    deleteImageSource: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Image Source. */
                sourceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a Job Descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    updateImageSource: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Image Source. */
                sourceId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for updating an image source. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description A name for the image source. */
                    name?: string;
                    identifier?: components["schemas"]["Identifier"] | null;
                    origin?: components["schemas"]["ImageOrigin"];
                    builder?: {
                        integration_id?: components["schemas"]["HybridIdentifier"] | null;
                    } | null;
                    /** @description User defined information about the image source. */
                    about?: {
                        /** @description A description of the image source. */
                        description: string | null;
                    };
                };
            };
        };
        responses: {
            /** @description Returns an Image Source. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["ImageSource"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    updateImageSourceAccess: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Image Source. */
                sourceId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for updating an image source. */
        requestBody?: {
            content: {
                "application/json": {
                    acl?: components["schemas"]["ACL"] | null;
                };
            };
        };
        responses: {
            /** @description Returns an Image Source. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["ImageSource"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getInfrastructureSummary: {
        parameters: {
            query?: {
                /** @description ## Filter Field
                 *     The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                 *      */
                filter?: {
                    /** @description `filter[cluster]=value` return an infrastructure summary only for the specified cluster.
                     *      */
                    cluster?: string;
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns an infrastructure summary. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["InfrastructureSummary"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getDeploymentStrategies: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns available deployment strategies. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            "resource-density"?: components["schemas"]["DeploymentStrategy"];
                            "high-availability"?: components["schemas"]["DeploymentStrategy"];
                            "first-available"?: components["schemas"]["DeploymentStrategy"];
                            node?: components["schemas"]["DeploymentStrategy"];
                            edge?: components["schemas"]["DeploymentStrategy"];
                            manual?: components["schemas"]["DeploymentStrategy"];
                            function?: components["schemas"]["DeploymentStrategy"];
                        };
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getAutoScaleGroups: {
        parameters: {
            query?: {
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: ("integrations" | "models" | "locations")[];
                /** @description ## Filter Field
                 *     The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                 *      */
                filter?: {
                    /** @description `filter[search]=value` search for a value associated with a field on the given auto-scale group(s).
                     *      */
                    search?: string;
                    /** @description `filter[cluster]=value` return a list of auto-scale groups that are associated with the specified cluster.
                     *      */
                    cluster?: string;
                    /** @description `filter[identifier]=value` list only those auto-scale groups matching this identifier. May return multiple results.
                     *      */
                    identifier?: string;
                    /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the provider's current state.
                     *      */
                    state?: string;
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of Auto-Scale Groups. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["AutoScaleGroup"][];
                        includes?: components["schemas"]["AutoScaleGroupIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createAutoScaleGroup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Parameters for creating an Auto-Scale Group */
        requestBody?: {
            content: {
                "application/json": {
                    name: string;
                    identifier: string;
                    acl?: components["schemas"]["ACL"] | null;
                    cluster: string;
                    scale: components["schemas"]["AutoScaleGroupScale"];
                    infrastructure: components["schemas"]["AutoScaleGroupInfrastructure"];
                };
            };
        };
        responses: {
            /** @description Returns an Auto-Scale Group. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["AutoScaleGroup"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getAutoScaleGroup: {
        parameters: {
            query?: {
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: ("integrations" | "models" | "locations")[];
            };
            header?: never;
            path: {
                /** @description The ID for the given Auto-Scale Group. */
                groupId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns an Auto-Scale Group. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["AutoScaleGroup"];
                        includes?: components["schemas"]["AutoScaleGroupIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    deleteAutoScaleGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID for the given autoscale group. */
                groupId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a task descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    updateAutoScaleGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID for the given Auto-Scale Group. */
                groupId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for creating an Auto-Scale Group */
        requestBody?: {
            content: {
                "application/json": {
                    name?: string | null;
                    identifier?: string | null;
                    scale?: components["schemas"]["AutoScaleGroupScale"] | null;
                    infrastructure?: components["schemas"]["AutoScaleGroupInfrastructure"] | null;
                };
            };
        };
        responses: {
            /** @description Returns an Auto-Scale Group. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["AutoScaleGroup"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    updateAutoScaleGroupAccess: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID for the given Auto-Scale Group. */
                groupId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for creating an Auto-Scale Group */
        requestBody?: {
            content: {
                "application/json": {
                    acl?: components["schemas"]["ACL"] | null;
                };
            };
        };
        responses: {
            /** @description Returns an Auto-Scale Group. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["AutoScaleGroup"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getProviderServers: {
        parameters: {
            query?: {
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
                /** @description ## Filter Field
                 *     The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                 *      */
                filter?: {
                    /** @description `filter[location_ids]=value` List only those provider servers matching this location. May return multiple results.
                     *      */
                    location_ids?: string;
                };
            };
            header?: never;
            path: {
                /** @description The vendor for the given provider. Example `gcp`, `equinix-metal`, `abstraction`, etc. Can also use a Provider Integration ID. */
                providerVendor: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of currently provisioned servers associated with a Provider Integration. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["ProviderServerModel"][];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getProviderLocations: {
        parameters: {
            query?: {
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path: {
                /** @description The vendor for the given Provider Integration. Example `gcp`, `equinix-metal`, `abstraction`, etc. Can also use the Integration ID. */
                providerVendor: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of locations this Provider Integration supports. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["ProviderLocation"][];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getClusters: {
        parameters: {
            query?: {
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of clusters. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Cluster"][];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createCluster: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Parameters for creating a new cluster. */
        requestBody?: {
            content: {
                "application/json": {
                    identifier: components["schemas"]["Identifier"];
                    acl?: components["schemas"]["ACL"] | null;
                };
            };
        };
        responses: {
            /** @description Returns a cluster. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Cluster"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getCluster: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the requested cluster. */
                clusterId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a cluster. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Cluster"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    deleteCluster: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the requested cluster. */
                clusterId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a job descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    updateCluster: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the requested cluster. */
                clusterId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for updating a cluster. */
        requestBody?: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description Returns a cluster. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Cluster"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    updateClusterAccess: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the requested cluster. */
                clusterId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for updating a cluster. */
        requestBody?: {
            content: {
                "application/json": {
                    acl?: components["schemas"]["ACL"] | null;
                };
            };
        };
        responses: {
            /** @description Returns a cluster. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Cluster"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getServers: {
        parameters: {
            query?: {
                /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
                meta?: ("node" | "instances_count")[];
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: ("locations" | "models" | "integrations" | "clusters")[];
                /** @description ## Filter Field
                 *     The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                 *      */
                filter?: {
                    /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the provider's current state.
                     *      */
                    state?: string;
                    /** @description `filter[tags]=tagone,tagtwo,tagthree` filtering by Server tag.  Enter one or more tags (comma separated) and the return will include servers that match any tags in the list.
                     *      */
                    tags?: string;
                    /** @description `filter[cluster]=clusterIdentifier` filtering by cluster.  Enter the cluster identifier and the return will include servers belonging to the specified cluster.
                     *      */
                    cluster?: string;
                    /** @description `filter[providers]=providerone,providertwo` filtering by provider.  Enter one or more providers (commas separated) and the return will include servers that match any providers in the list.
                     *      */
                    providers?: string;
                };
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of Servers. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Server"][];
                        includes?: components["schemas"]["ServerIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createServer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Parameters for creating a Server. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description The existing or new cluster this infrastructure should be provisioned in. */
                    cluster: string;
                    /** @description An array of servers to provision. */
                    servers: {
                        /** @description The ID of the provider integration to use for this Server. */
                        integration_id: components["schemas"]["ID"];
                        /** @description The model ID of the Server. */
                        model_id: string;
                        /** @description The location ID of the Server. */
                        location_id: string;
                        /** @description The number of this Server at this location to deploy. */
                        quantity: number;
                        /** @description An array of hostnames for the given servers. */
                        hostnames?: string[];
                        advanced?: {
                            /** @description Advanced options to apply to the provisioning of a server. */
                            provision_options?: {
                                /** @description For providers that support setting this value dynamically; A number representing the GB size of the volume to be attached to the server. */
                                attached_storage_size?: number | null;
                                /** @description A reservation ID to be used to provision a server that has been reserved at the provider. */
                                reservation_id?: string | null;
                                /** @description For providers that support this setting, this option will encrypt storage for server. */
                                encrypt_storage?: boolean | null;
                            } | null;
                            zone?: string | null;
                        }[];
                    }[];
                };
            };
        };
        responses: {
            /** @description Returns a Job Descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getServer: {
        parameters: {
            query?: {
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: ("locations" | "models" | "integrations" | "clusters")[];
                /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
                meta?: ("node" | "instances_count" | "allocations")[];
            };
            header?: never;
            path: {
                /** @description The ID for the given Server. */
                serverId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a Server. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Server"];
                        includes?: components["schemas"]["ServerIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    deleteServer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Server. */
                serverId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for deleting a Server. */
        requestBody?: {
            content: {
                "application/json": {
                    options?: {
                        /** @description If force is set to true, this will force delete the hub, even if there are servers running on it. */
                        force?: boolean;
                    };
                };
            };
        };
        responses: {
            /** @description Returns a Job Descriptor. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    updateServer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID for the given Server. */
                serverId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for updating a Server. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Server constriants. */
                    constraints: {
                        /** @description A list of Server tags. */
                        tags?: string[];
                        /** @description Server constraints for the given Server. */
                        allow?: {
                            /** @description A boolean where true represents the Server can accept containers with no tags set. */
                            pool: boolean;
                            /** @description A boolean where true represents the Server being a target for service containers. */
                            services: boolean;
                            /** @description A boolean where true represents the desire for the Server to allow the overcommitting of shares. */
                            overcommit: boolean;
                            /** @description An integer that describes the capability of a server to overcommit shares.  This will allow more containers to run on a given server based on the servers available CPU cores. 1 CPU core = 10 shares by default. */
                            overcommit_multiple?: number | null;
                        };
                    };
                };
            };
        };
        responses: {
            /** @description Returns a Server. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Server"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getServerTelemetry: {
        parameters: {
            query?: {
                /** @description ## Filter Field
                 *     The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                 *      */
                filter?: {
                    /** @description The start date from when to pull Server telemetry data */
                    "range-start"?: components["schemas"]["DateTime"];
                    /** @description The end date from when to pull Server telemetry data */
                    "range-end"?: components["schemas"]["DateTime"];
                };
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path: {
                /** @description The ID for the given Server. */
                serverId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of telemetry points. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["ServerStatsTelemetry"][];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getServerInstances: {
        parameters: {
            query?: {
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: ("creator" | "servers" | "locations" | "integrations" | "containers" | "environments")[];
            };
            header?: never;
            path: {
                /** @description The ID for the given server. */
                serverId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of Instances present on this Server. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Instance"][];
                        includes?: components["schemas"]["InstanceIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createServerJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID for the given Server. */
                serverId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for creating the new Server Job. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ReconfigureSharedFsTask"] | components["schemas"]["ReconfigureServerFeaturesTask"] | components["schemas"]["RestartServerTask"] | components["schemas"]["RestartComputeTask"] | components["schemas"]["RestartComputeSpawnerTask"] | components["schemas"]["EvacuateServerTask"] | components["schemas"]["EvacuateServerResetTask"];
            };
        };
        responses: {
            /** @description Returns a Job Descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getServerTags: {
        parameters: {
            query?: {
                /** @description ## Filter Field
                 *     The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                 *      */
                filter?: {
                    /** @description `filter[cluster]=clusterone,clustertwo` filtering by cluster.  Enter one or more clusters (commas separated) and the return will include tags from servers that match any cluster(s) in the list.
                     *      */
                    cluster?: string;
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of Server Tags. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServerTags"];
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    GetServerUsage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID for the given server. */
                serverId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns usage data for the Server. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["UsageDatum"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    GetServerConsole: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the server to connect to. */
                serverId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns console credentials for the Server. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            /** @description The websocket target URL. */
                            address: string;
                            /** @description The authentication token for the console socket. It should be appended as the URL parameter "token" to the address. */
                            token: string;
                        };
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getInfrastructureIPPools: {
        parameters: {
            query?: {
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: ("servers" | "integrations" | "locations")[];
                /** @description ## Filter Field
                 *     The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                 *      */
                filter?: {
                    /** @description `filter[available]=true` filter for IPs that are available for use.
                     *      */
                    available?: string;
                    /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the IP's current state.
                     *      */
                    state?: string;
                };
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of IP Pools. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Pool"][];
                        includes?: components["schemas"]["PoolIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getIPPool: {
        parameters: {
            query?: {
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: ("servers" | "integrations" | "locations")[];
            };
            header?: never;
            path: {
                /** @description The ID for the given pool. */
                poolId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description An IP Pool. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Pool"];
                        includes?: components["schemas"]["PoolIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    deleteIPPool: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID for the given IP Pool. */
                poolId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a Job Descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getPoolIPs: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the IP Pool to fetch the IPs of. */
                poolId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of IPs. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Ip"][];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getJobs: {
        parameters: {
            query?: {
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: "creators"[];
                /** @description ## Filter Field
                 *     The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                 *      */
                filter?: {
                    /** @description The start date from when to fetch Jobs */
                    "range-start"?: components["schemas"]["DateTime"];
                    /** @description The end date from when to fetch Jobs */
                    "range-end"?: components["schemas"]["DateTime"];
                    /** @description `filter[search]=value` search jobs for a value associated with a field on the given job(s).
                     *      */
                    search?: string;
                    /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the job's current state.
                     *      */
                    state?: string;
                };
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of Jobs. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Job"][];
                        includes?: components["schemas"]["JobIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID for the given Job. */
                jobId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A Job resources. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Job"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getLatestJobs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of Jobs. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Job"][];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getMetrics: {
        parameters: {
            query?: {
                /** @description ## Filter Field
                 *     The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                 *
                 *     To search via labels, use `label:<label key>` as the filter. For example in URL parameters, `filter[label:test]=abc`.
                 *      */
                filter?: {
                    /** @description Specify the environment associated with the metrics. */
                    environment?: components["schemas"]["ID"];
                    /** @description Specify the pipeline associated with the metrics. */
                    pipeline?: components["schemas"]["ID"];
                    /** @description Specify the stack associated with the metrics. */
                    stack?: components["schemas"]["ID"];
                    /** @description Specify the container associated with the metrics. */
                    container?: string;
                    /** @description Specify the cluster associated with the metrics. */
                    cluster?: string;
                    /** @description Specify the metric to filter by. */
                    metric?: string;
                    /**
                     * @description Filter by the type of metric.
                     * @enum {string}
                     */
                    type?: "gauge" | "count" | "counter" | "rate" | "histogram" | "distribution" | "set";
                    /** @description Filter by tags associated with the metrics */
                    tags?: string;
                    /** @description The start date from when to pull metrics. Providing 'time' in the post-body criteria field will override this filter. */
                    "range-start"?: components["schemas"]["DateTime"];
                    /** @description The end date from when to pull metrics. Providing 'time' in the post-body criteria field will override this filter. */
                    "range-end"?: components["schemas"]["DateTime"];
                } & {
                    [key: string]: unknown;
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns an array of metrics. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Metric"][];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    generateAggregatedMetrics: {
        parameters: {
            query?: {
                /** @description ## Filter Field
                 *     The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                 *      */
                filter?: {
                    /** @description The start date from when to pull metrics. Providing 'time' in the post-body criteria field will override this filter. */
                    "range-start"?: components["schemas"]["DateTime"];
                    /** @description The end date from when to pull metrics. Providing 'time' in the post-body criteria field will override this filter. */
                    "range-end"?: components["schemas"]["DateTime"];
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The mongo syntax aggregate pipeline for querying metrics and formulating a report. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description The criteria to add to the first match. Cycle will automatically provide the hub ID. */
                    criteria?: {
                        [key: string]: unknown;
                    };
                    /** @description The aggregation pipeline. Supports Mongo-style syntax and operators. */
                    pipeline?: {
                        [key: string]: unknown;
                    }[];
                };
            };
        };
        responses: {
            /** @description Returns an object matching the shape of the output of the aggregated pipeline output. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            [key: string]: unknown;
                        }[];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getEvents: {
        parameters: {
            query?: {
                /** @description ## Filter Field
                 *     The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                 *
                 *     To search via labels, use `label:<label key>` as the filter. For example in URL parameters, `filter[label:test]=abc`.
                 *      */
                filter?: {
                    /** @description Specify the environment associated with the events. */
                    environment?: components["schemas"]["ID"];
                    /** @description Specify the pipeline associated with the events. */
                    pipeline?: components["schemas"]["ID"];
                    /** @description Specify the stack associated with the events. */
                    stack?: components["schemas"]["ID"];
                    /** @description Specify the container associated with the events. */
                    container?: components["schemas"]["ID"];
                    /** @description Specify the cluster associated with the events. */
                    cluster?: string;
                    /** @description Specify the event to filter by. */
                    event?: components["schemas"]["EventType"];
                    /**
                     * @description Filter by the type of event.
                     * @enum {string}
                     */
                    type?: "info" | "warning" | "error" | "success" | "alert" | "notice" | "audit";
                    /** @description Filter by tags associated with the events. */
                    tags?: string;
                    /** @description The start date from when to pull events. Providing 'time' in the post-body criteria field will override this filter. */
                    "range-start"?: components["schemas"]["DateTime"];
                    /** @description The end date from when to pull events. Providing 'time' in the post-body criteria field will override this filter. */
                    "range-end"?: components["schemas"]["DateTime"];
                } & {
                    [key: string]: unknown;
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns an array of events. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Event"][];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    generateAggregatedEvents: {
        parameters: {
            query?: {
                /** @description ## Filter Field
                 *     The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                 *      */
                filter?: {
                    /** @description The start date from when to pull events. Providing 'time' in the post-body criteria field will override this filter. */
                    "range-start"?: components["schemas"]["DateTime"];
                    /** @description The end date from when to pull events. Providing 'time' in the post-body criteria field will override this filter. */
                    "range-end"?: components["schemas"]["DateTime"];
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The mongo syntax aggregate pipeline for querying events and formulating a report. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description The criteria to add to the first match. Cycle will automatically provide the hub ID. */
                    criteria?: {
                        [key: string]: unknown;
                    };
                    /** @description The aggregation pipeline. Supports Mongo-style syntax and operators. */
                    pipeline?: {
                        [key: string]: unknown;
                    }[];
                };
            };
        };
        responses: {
            /** @description Returns an object matching the shape of the output of the aggregated pipeline output. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            [key: string]: unknown;
                        }[];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    aggregateLogs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Parameters for aggregating logs. */
        requestBody?: {
            content: {
                "application/json": {
                    scope: {
                        /**
                         * @description The type of resource used to narrow log aggregation.
                         * @enum {string}
                         */
                        type: "container" | "instance" | "environment";
                        /** @description The ID or IDs used to narrow log aggregation. */
                        ids?: components["schemas"]["ID"][] | null;
                        /** @description The date range used to narrow log aggregation. */
                        date_range?: null | {
                            /** @description The start date from when to fetch logs. */
                            start?: components["schemas"]["DateTime"];
                            /** @description The end date from when to fetch logs. */
                            end?: components["schemas"]["DateTime"];
                        };
                        /**
                         * @description Context window indicates how many log lines after a match to return in the response.
                         *     This allows greater context around the matched lines.
                         *
                         * @default 5
                         */
                        context_window?: number;
                    };
                    search?: {
                        /**
                         * @description The input type used to query logs. When set to regexp, a regex expression will be used to find a log line with a message matching the expression.  When set to 'raw', the aggregate will look for an exact string match.
                         * @enum {string}
                         */
                        type: "raw" | "regexp";
                        /** @description The search input is a string input that is used to in the aggregate to narrow the log line results. */
                        match: string;
                    }[];
                    /** @description Indicates that only locally cached log lines should be queried.  If true, logs in object storage will not be returned. */
                    local?: boolean | null;
                    /** @description Describes the maximum number of log lines the query will return. */
                    limit?: number | null;
                };
            };
        };
        responses: {
            /** @description Returns an array of log lines. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["LogLine"][];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getMonitoringMonitors: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns and array of monitor location information. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Monitor"][];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getPipelines: {
        parameters: {
            query?: {
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: ("creators" | "name" | "components")[];
                /** @description ## Filter Field
                 *     The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                 *      */
                filter?: {
                    /** @description `filter[identifier]=value` List only those pipelines matching this identifier. May return multiple results.
                     *      */
                    identifier?: string;
                    /** @description `filter[search]=value` search for a value associated with a field on the given pipelines(s).
                     *      */
                    search?: string;
                    /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the Pipeline's current state.
                     *      */
                    state?: string;
                };
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of Pipelines. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Pipeline"][];
                        includes?: components["schemas"]["PipelineIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createPipeline: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Parameters for creating a new Pipeline. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description A name for the Pipeline. */
                    name: string;
                    identifier?: components["schemas"]["Identifier"];
                    /** @description Setting to true enables variable and other advanced logic support on this Pipeline. This is a one-way toggle. Once set to true, it cannot be set back to false. */
                    dynamic?: boolean;
                    /** @description An array of stages. */
                    stages?: components["schemas"]["PipelineStage"][];
                    acl?: components["schemas"]["ACL"] | null;
                    /** @description A boolean where true signifies the Pipeline is disabled. */
                    disable?: boolean;
                };
            };
        };
        responses: {
            /** @description Returns a Pipeline. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Pipeline"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getPipeline: {
        parameters: {
            query?: {
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: ("creators" | "name" | "components")[];
            };
            header?: never;
            path: {
                /** @description The ID of the Pipeline. */
                pipelineId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a Pipeline. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Pipeline"];
                        includes?: components["schemas"]["PipelineIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    deletePipeline: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Pipeline. */
                pipelineId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a Job Descriptor. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    updatePipeline: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Pipeline. */
                pipelineId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for updating a Pipeline. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description A name for the Pipeline. */
                    name?: string;
                    /** @description Setting to true enables variable and other advanced logic support on this Pipeline. This is a one-way toggle. Once set to true, it cannot be set back to false. */
                    dynamic?: boolean;
                    /** @description An array of stages. */
                    stages?: components["schemas"]["PipelineStage"][];
                    /** @description A boolean where true signifies the Pipeline is disabled. */
                    disable?: boolean;
                };
            };
        };
        responses: {
            /** @description Returns a Pipeline resource. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Pipeline"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    updatePipelineAccess: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the pipeline. */
                pipelineId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for updating a pipeline. */
        requestBody?: {
            content: {
                "application/json": {
                    acl?: components["schemas"]["ACL"] | null;
                };
            };
        };
        responses: {
            /** @description Returns a pipeline resource. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Pipeline"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getPipelineRuns: {
        parameters: {
            query?: {
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: "creators"[];
            };
            header?: never;
            path: {
                /** @description The ID of the pipeline. */
                pipelineId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of Pipeline runs. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["PipelineRun"][];
                        includes?: {
                            creators?: components["schemas"]["CreatorInclude"];
                        };
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getPipelineRun: {
        parameters: {
            query?: {
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: "creators"[];
            };
            header?: never;
            path: {
                /** @description The ID of the Pipeline. */
                pipelineId: string;
                /** @description The ID for the pipeline run. */
                runId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a Pipeline Run. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["PipelineRun"];
                        includes?: {
                            creators?: components["schemas"]["CreatorInclude"];
                        };
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createPipelineJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Pipeline. */
                pipelineId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for creating a new Pipeline job. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TriggerPipelineAction"] | components["schemas"]["RerunPipelineAction"];
            };
        };
        responses: {
            /** @description Returns a job descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    clonePipeline: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Parameters for creating a new Pipeline job. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description The name of the cloned pipeline. */
                    name: string;
                    identifier: components["schemas"]["Identifier"];
                    pipeline_id: components["schemas"]["ID"];
                };
            };
        };
        responses: {
            /** @description Returns a Pipeline. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Pipeline"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    triggerPipeline: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Pipeline. */
                pipelineId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for triggering a pipeline. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description The trigger key secret. */
                    secret: string;
                    /** @description A map of variables to pass into the pipeline when it runs. */
                    variables: {
                        [key: string]: string;
                    };
                    advanced?: {
                        /** @description Sub queue allows multiple concurrent pipeline runs. */
                        sub_queue?: string | null;
                        /** @description To enable skip locks, pass the current UNIX timestamp. Must be accurate within 10 minutes of the current UTC time.
                         *     This will skip lock checks when running a pipeline - the user takes all risk of ensuring two pipeline runs won't make conflicting changes.
                         *      */
                        skip_locks?: number | null;
                    };
                };
            };
        };
        responses: {
            /** @description Returns a job descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getPipelineTriggerKeys: {
        parameters: {
            query?: {
                /** @description ## Filter Field
                 *     The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                 *      */
                filter?: {
                    /** @description `filter[search]=value` search for a value associated with a field on the given Trigger Key(s).
                     *      */
                    search?: string;
                    /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the Trigger Key's current state.
                     *      */
                    state?: string;
                };
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path: {
                /** @description The ID of the Pipeline. */
                pipelineId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of Trigger Keys. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["TriggerKey"][];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createPipelineTriggerKey: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Pipeline. */
                pipelineId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for creating a new Pipeline Trigger Key. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description A name for the Trigger Key. */
                    name?: string;
                    /** @description An array of ips this Trigger Key is usable from. */
                    ips?: string[];
                };
            };
        };
        responses: {
            /** @description Returns a Trigger Key. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["TriggerKey"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getPipelineTriggerKey: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Pipeline. */
                pipelineId: string;
                /** @description The ID of the Trigger Key. */
                triggerKeyId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a Trigger Key. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TriggerKey"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    deletePipelineTriggerKey: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Pipeline. */
                pipelineId: string;
                /** @description The ID of the Trigger Key. */
                triggerKeyId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a Job Descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    updatePipelineTriggerKey: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Pipeline. */
                pipelineId: string;
                /** @description The ID of the Trigger Key. */
                triggerKeyId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Set name of Trigger Key */
                    name?: string;
                    /** @description List of IP Restrictions */
                    ips?: string[];
                };
            };
        };
        responses: {
            /** @description Returns a Job Descriptor. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getNetworks: {
        parameters: {
            query?: {
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: ("creators" | "environments")[];
                /** @description ## Filter Field
                 *     The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                 *      */
                filter?: {
                    /** @description `filter[search]=value` search for a value associated with a field on the given Network(s).
                     *      */
                    search?: string;
                    /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the network's current state.
                     *      */
                    state?: string;
                };
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of Networks. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Network"][];
                        includes?: components["schemas"]["NetworkIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createNetwork: {
        parameters: {
            query?: {
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: ("creators" | "environments")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Parameters for creating a new network. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description The name of the network. */
                    name: string;
                    /** @description A network identifier used to construct http calls that specifically use this network over another. */
                    identifier: string;
                    acl?: components["schemas"]["ACL"] | null;
                    /** @description The infrastructure cluster the environments belonging to this network belong to. */
                    cluster: string;
                    /** @description An array of environment Ids */
                    environments: string[];
                };
            };
        };
        responses: {
            /** @description Returns a network. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Network"];
                        includes?: components["schemas"]["NetworkIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getNetwork: {
        parameters: {
            query?: {
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: ("creators" | "environments")[];
            };
            header?: never;
            path: {
                /** @description The ID of the network. */
                networkId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a Network. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Network"];
                        includes?: components["schemas"]["NetworkIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    deleteNetwork: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the network. */
                networkId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a job descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    updateNetwork: {
        parameters: {
            query?: {
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: ("creators" | "environments")[];
            };
            header?: never;
            path: {
                /** @description The ID of the Network. */
                networkId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for updating a network. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description The name of the network. */
                    name?: string;
                };
            };
        };
        responses: {
            /** @description Returns a network. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Network"];
                        includes?: components["schemas"]["NetworkIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    updateNetworkAccess: {
        parameters: {
            query?: {
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: ("creators" | "environments")[];
            };
            header?: never;
            path: {
                /** @description The ID of the Network. */
                networkId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for updating a Network. */
        requestBody?: {
            content: {
                "application/json": {
                    acl?: components["schemas"]["ACL"] | null;
                };
            };
        };
        responses: {
            /** @description Returns a Network. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Network"];
                        includes?: components["schemas"]["NetworkIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createNetworkJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Network. */
                networkId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for creating a new Network Job. */
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The Job to do.
                     * @enum {string}
                     */
                    action: "reconfigure";
                    /** @description Additional information needed for the Job. */
                    contents: {
                        /** @description An array of environment identifiers for the Network. */
                        environment_ids: string[];
                    };
                };
            };
        };
        responses: {
            /** @description Returns a Job Descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getSearchIndex: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns an indexed search matrix. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Index"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getStacks: {
        parameters: {
            query?: {
                /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
                meta?: ("containers_count" | "builds_count")[];
                /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
                include?: "creators"[];
                /** @description ## Filter Field
                 *     The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                 *      */
                filter?: {
                    /** @description `filter[identifier]=value` List only those stacks matching this identifier. May return multiple results.
                     *      */
                    identifier?: string;
                    /** @description `filter[search]=value` search for a value associated with a field on the given Stack(s).
                     *      */
                    search?: string;
                    /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the Stack's current state.
                     *      */
                    state?: string;
                };
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of Stacks. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Stack"][];
                        includes?: components["schemas"]["StackInclude"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createStack: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Parameters for creating a new Stack. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description A name for the Stack. */
                    name: string;
                    identifier?: components["schemas"]["Identifier"];
                    acl?: components["schemas"]["ACL"] | null;
                    /** @description A map of default variable values used when building this Stack. A variable can be added anywhere in a Stack using the format `{{var}}` where `var` would be a key in this map. */
                    variables?: {
                        [key: string]: string;
                    };
                    source: components["schemas"]["StackSource"];
                };
            };
        };
        responses: {
            /** @description Returns a Stack. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Stack"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getStack: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Stack */
                stackId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a Stack resource. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Stack"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    deleteStack: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Stack */
                stackId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a Job Descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    updateStack: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Stack */
                stackId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for updating a Stack. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description A name for the Stack. */
                    name?: string;
                    /** @description A map of default variable values used when building this Stack. A variable can be added anywhere in a Stack using the format `{{var}}` where `var` would be a key in this map. */
                    variables?: {
                        [key: string]: string;
                    };
                    source?: components["schemas"]["StackSource"];
                };
            };
        };
        responses: {
            /** @description Returns the updated Stack. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Stack"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    updateStackAccess: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Stack */
                stackId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for updating a Stack. */
        requestBody?: {
            content: {
                "application/json": {
                    acl?: components["schemas"]["ACL"] | null;
                };
            };
        };
        responses: {
            /** @description Returns the updated Stack. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Stack"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createStackJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Stack */
                stackId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for creating a new Stack Job. */
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The Job to do.
                     * @enum {string}
                     */
                    action: "prune";
                };
            };
        };
        responses: {
            /** @description Returns a Job Descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    lookupStackBuild: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Build. */
                buildId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a Stack Build. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["StackBuild"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getStackBuilds: {
        parameters: {
            query?: {
                /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
                meta?: "containers_count"[];
                /** @description ## Filter Field
                 *     The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                 *      */
                filter?: {
                    /** @description `filter[search]=value` search for a value associated with a field on the given Stack Build(s).
                     *      */
                    search?: string;
                    /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the Stack Build's current state.
                     *      */
                    state?: string;
                };
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path: {
                /** @description The ID of the Stack. */
                stackId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of Stack Builds. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["StackBuild"][];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createStackBuild: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Stack */
                stackId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for creating a new Stack Build. */
        requestBody?: {
            content: {
                "application/json": {
                    about?: components["schemas"]["StackBuildAbout"];
                    instructions?: components["schemas"]["StackBuildInstructions"];
                };
            };
        };
        responses: {
            /** @description Returns a Stack Build. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["StackBuild"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getStackBuild: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Stack. */
                stackId: string;
                /** @description The ID of the Build. */
                buildId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a Stack Build. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["StackBuild"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    deleteStackBuild: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Stack. */
                stackId: string;
                /** @description The ID of the Build. */
                buildId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a Job Descriptor. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getStackBuildLog: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the stack. */
                stackId: string;
                /** @description The ID of the stack build. */
                buildId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the stack build's log. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["StackBuildLog"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createStackBuildJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Stack. */
                stackId: string;
                /** @description The ID of the Build. */
                buildId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for creating a new Stack Build Job. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GenerateStackBuildAction"] | components["schemas"]["DeployStackBuildAction"];
            };
        };
        responses: {
            /** @description Returns a Job Descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getVirtualMachines: {
        parameters: {
            query?: {
                /** @description A comma-separated list of meta values. Meta values will show up under a resource's `meta` field.
                 *     In the case of applying a meta to a collection of resources, each resource will have its own relevant meta data.
                 *     In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                 *      */
                meta?: ("domains" | "ips")[];
                /** @description A comma-separated list of include values. Included resources will show up under the root document's `include` field.
                 *     In the case of applying an include to a collection of resources, if multiple resources share the same include, it will only appear once in the return.
                 *      */
                include?: ("creators" | "environments" | "clusters" | "containers")[];
                /** @description ## Filter Field
                 *     The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                 *      */
                filter?: {
                    /** @description `filter[identifier]=value` List only those virtual machines matching this identifier. May return multiple results.
                     *      */
                    identifier?: string;
                    /** @description `filter[search]=value` Search virtual machines for a value associated with a field.
                     *      */
                    search?: string;
                    /** @description `filter[creator]=account-ID` Filter for virtual machines matching a particular creator, such as `account-<ID>` or `environment-<ID>`.
                     *      */
                    creator?: string;
                    /** @description `filter[environment]=ID` Filter virtual machines by environment ID. Submit the ID of the environment you wish to filter for.
                     *      */
                    environment?: string;
                    /**
                     * @description `filter[state]=value` Filter virtual machines by their current state.
                     *
                     * @enum {string}
                     */
                    state?: "new" | "starting" | "running" | "stopping" | "stopped" | "deleting" | "deleted";
                    /** @description The start date from when to pull the virtual machines. */
                    "range-start"?: components["schemas"]["DateTime"];
                    /** @description The end date from when to pull the virtual machines. */
                    "range-end"?: components["schemas"]["DateTime"];
                    /** @description `filter[tags]=value` Filter virtual machines by their tags.
                     *      */
                    tags?: string;
                    /**
                     * @description `filter[public_network]=value` Filter virtual machines by their public network status.
                     *
                     * @enum {string}
                     */
                    public_network?: "enabled" | "disabled";
                };
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of virtual machines. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["VirtualMachine"][];
                        includes?: components["schemas"]["VirtualMachineIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createVirtualMachine: {
        parameters: {
            query?: {
                /** @description A comma-separated list of meta values. Meta values will show up under a resource's `meta` field.
                 *     In the case of applying a meta to a collection of resources, each resource will have its own relevant meta data.
                 *     In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                 *      */
                meta?: ("domains" | "ips" | "server")[];
                /** @description A comma-separated list of include values. Included resources will show up under the root document's `include` field.
                 *     In the case of applying an include to a collection of resources, if multiple resources share the same include, it will only appear once in the return.
                 *      */
                include?: ("creators" | "environments" | "clusters")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Parameters for creating a new virtual machine. */
        requestBody?: {
            content: {
                "application/json": {
                    identifier?: components["schemas"]["Identifier"];
                    /** @description A user-defined name for the virtual machine. */
                    name: string;
                    /** @description The ID of the environment this virtual machine will be deployed to. */
                    environment_id: string;
                    image: components["schemas"]["VirtualMachineImage"];
                    config: components["schemas"]["VirtualMachineConfig"];
                    /** @description Prevents this virtual machine from being deleted when true. */
                    lock: boolean;
                    volumes?: components["schemas"]["VirtualMachineVolumeConfig"][] | null;
                    /** @description The size of the base disk. Must be between 10G and 100G. */
                    base_disk_size?: string;
                    /** @description Custom meta data. Not utilized by Cycle. */
                    annotations?: {
                        [key: string]: unknown;
                    } | null;
                    /** @description An array of SSH key IDs that should be applied to this virtual machine. */
                    ssh_keys?: components["schemas"]["ID"][];
                };
            };
        };
        responses: {
            /** @description Returns the newly created virtual machine. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["VirtualMachine"];
                        includes?: components["schemas"]["VirtualMachineIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getVirtualMachine: {
        parameters: {
            query?: {
                /** @description A comma-separated list of meta values. Meta values will show up under a resource's `meta` field.
                 *     In the case of applying a meta to a collection of resources, each resource will have its own relevant meta data.
                 *     In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
                 *      */
                meta?: ("domains" | "ips" | "server")[];
                /** @description A comma-separated list of include values. Included resources will show up under the root document's `include` field.
                 *     In the case of applying an include to a collection of resources, if multiple resources share the same include, it will only appear once in the return.
                 *      */
                include?: ("creators" | "environments" | "clusters" | "containers")[];
            };
            header?: never;
            path: {
                /** @description The ID of the virtual machine. */
                virtualMachineId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the requested virtual machine. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["VirtualMachine"];
                        includes?: components["schemas"]["VirtualMachineIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    deleteVirtualMachine: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the virtual machine to delete. */
                virtualMachineId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a job descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    updateVirtualMachine: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the virtual machine. */
                virtualMachineId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for updating the virtual machine. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description The name of the virtual machine. */
                    name?: string;
                    /** @description The identifier of the virtual machine. */
                    identifier?: string;
                    /** @description A boolean flag indicating if this virtual machine is deprecated. */
                    deprecate?: boolean;
                    /** @description Prevents this virtual machine from being deleted when true. */
                    lock?: boolean;
                    /** @description Metadata annotations for the virtual machine. */
                    annotations?: {
                        [key: string]: string;
                    };
                    /** @description An array of SSH key IDs that should be applied to this virtual machine. */
                    ssh_keys?: components["schemas"]["ID"][];
                };
            };
        };
        responses: {
            /** @description Returns the updated virtual machine. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["VirtualMachine"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createVirtualMachineJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the virtual machine. */
                virtualMachineId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for creating a new virtual machine job. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["VirtualMachineStartTask"] | components["schemas"]["VirtualMachineStopTask"] | components["schemas"]["VirtualMachineReconfigureTask"] | components["schemas"]["VirtualMachineRootPwChangeTask"] | components["schemas"]["VirtualMachineIpAllocateTask"] | components["schemas"]["VirtualMachineIpUnallocateTask"];
            };
        };
        responses: {
            /** @description Returns a job descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getVirtualMachineBaseImages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A map of virtual machine base images provided by Cycle keyed by an identifier. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            [key: string]: components["schemas"]["VirtualMachineBaseImage"];
                        };
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    generateVirtualMachineSosCredentials: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the virtual machine. */
                virtualMachineId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a serial-over-sos connection response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["VirtualMachineSosConnection"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    expireVirtualMachineSosCredentials: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the virtual machine. */
                virtualMachineId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the number of tokens removed. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The number of tokens expired. */
                        data: {
                            /** @description The number of tokens expired. */
                            tokens: number;
                        };
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getVirtualMachineSshKeys: {
        parameters: {
            query?: {
                /** @description ## Filter Field
                 *     The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
                 *      */
                filter?: {
                    /** @description `filter[identifier]=value` List only those SSH keys matching this identifier. May return multiple results.
                     *      */
                    identifier?: string;
                    /** @description `filter[search]=value` Search SSH keys for a value associated with a field.
                     *      */
                    search?: string;
                    /** @description `filter[creator]=account-ID` Filter for SSH keys matching a particular creator, such as `account-<ID>` or `environment-<ID>`.
                     *      */
                    creator?: string;
                    /** @description `filter[environment]=ID` Filter SSH keys by environment ID. Submit the ID of the environment you wish to filter for.
                     *      */
                    environment?: string;
                    /**
                     * @description `filter[state]=value` Filter virtual machines by their current state.
                     *
                     * @enum {string}
                     */
                    state?: "live" | "deleting" | "deleted";
                    /** @description The start date from when to pull the virtual machines. */
                    "range-start"?: components["schemas"]["DateTime"];
                    /** @description The end date from when to pull the virtual machines. */
                    "range-end"?: components["schemas"]["DateTime"];
                };
                /** @description A comma-separated list of include values. Included resources will show up under the root document's `include` field.
                 *     In the case of applying an include to a collection of resources, if multiple resources share the same include, it will only appear once in the return.
                 *      */
                include?: ("creators" | "environments")[];
                /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
                sort?: components["parameters"]["SortParam"];
                /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
                page?: components["parameters"]["PageParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of virtual machine SSH keys. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["VirtualMachineSshKey"][];
                        includes?: components["schemas"]["VirtualMachineSshIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createVirtualMachineSshKey: {
        parameters: {
            query?: {
                /** @description A comma-separated list of include values. Included resources will show up under the root document's `include` field.
                 *     In the case of applying an include to a collection of resources, if multiple resources share the same include, it will only appear once in the return.
                 *      */
                include?: ("creators" | "environments")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Parameters for creating a new virtual machine SSH key. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description A user-defined name for the SSH key. */
                    name: string;
                    /** @description The public key of the SSH key. */
                    public_key: string;
                    environment_id: components["schemas"]["ID"];
                };
            };
        };
        responses: {
            /** @description Returns the newly created SSH key. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["VirtualMachineSshKey"];
                        includes?: components["schemas"]["VirtualMachineSshIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getVirtualMachineSshKey: {
        parameters: {
            query?: {
                /** @description A comma-separated list of include values. Included resources will show up under the root document's `include` field.
                 *     In the case of applying an include to a collection of resources, if multiple resources share the same include, it will only appear once in the return.
                 *      */
                include?: ("creators" | "environments")[];
            };
            header?: never;
            path: {
                /** @description The ID of the virtual machine SSH key. */
                sshKeyId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the requested virtual machine SSH key. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["VirtualMachineSshKey"];
                        includes?: components["schemas"]["VirtualMachineSshIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    deleteVirtualMachineSshKey: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the virtual machine SSH key to delete. */
                sshKeyId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a job descriptor. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["JobDescriptor"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    updateVirtualMachineSshKey: {
        parameters: {
            query?: {
                /** @description A comma-separated list of include values. Included resources will show up under the root document's `include` field.
                 *     In the case of applying an include to a collection of resources, if multiple resources share the same include, it will only appear once in the return.
                 *      */
                include?: ("creators" | "environments")[];
            };
            header?: never;
            path: {
                /** @description The ID of the SSH key. */
                sshKeyId: string;
            };
            cookie?: never;
        };
        /** @description Parameters for updating the virtual machine SSH key. */
        requestBody?: {
            content: {
                "application/json": {
                    /** @description The name of the virtual machine SSH key. */
                    name?: string;
                };
            };
        };
        responses: {
            /** @description Returns the updated virtual machine SSH key. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["VirtualMachineSshKey"];
                        includes?: components["schemas"]["VirtualMachineSshIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getAvailableIps: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the virtual machine. */
                virtualMachineId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a list of IP addresses. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Ip"][];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    lookupIdentifier: {
        parameters: {
            query: {
                /**
                 * @description A base64 encoded resource identifier string.
                 * @example cltr:production/environment:654d4e848924c1c445c3635a/container:api
                 */
                identifier: string;
                /** @description The type of resource to lookup from the identifier string. */
                "desired-component": "cluster" | "environment" | "image-source" | "stack" | "server" | "container";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the ID of the requested resource from the identifier string. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            id: string;
                        };
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    lookupComponents: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Accepts an array of component lookup objects. Consists of the type of resource to look up,
         *     and the ID.
         *      */
        requestBody?: {
            content: {
                "application/json": {
                    components: {
                        type: components["schemas"]["ResourceType"];
                        id: string;
                    }[];
                };
            };
        };
        responses: {
            /** @description Returns an array of the components requested. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["ComponentsIncludes"];
                    };
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
}
