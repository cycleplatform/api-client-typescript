/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/v1/account": {
    /**
     * Fetch Account 
     * @description Gets the account associated with the authenticated user token.
     */
    get: operations["getAccount"];
    /**
     * Delete Account 
     * @description Deletes the current account
     */
    delete: operations["removeAccount"];
    /**
     * Update Account 
     * @description Updates the current account
     */
    patch: operations["updateAccount"];
  };
  "/v1/account/invites": {
    /**
     * List Account Invites 
     * @description Lists invites associated with a given account.
     */
    get: operations["getAccountInvites"];
  };
  "/v1/account/invites/{inviteId}": {
    /**
     * Update Account Invite 
     * @description Update a given invite.
     */
    patch: operations["updateAccountInvite"];
  };
  "/v1/account/memberships": {
    /**
     * List Account Memberships 
     * @description Lists the memberships for a given account.
     */
    get: operations["getAccountMemberships"];
  };
  "/v1/account/logins": {
    /**
     * List Account Logins 
     * @description Lists logins associated with a given account.
     */
    get: operations["getAccountLogins"];
  };
  "/v1/account/password": {
    /**
     * Update Account Invite 
     * @description Update a given invite.
     */
    patch: operations["resetPassword"];
  };
  "/v1/account/2fa/setup": {
    /**
     * Get TwoFa setup info 
     * @description Get barcode and secret for TwoFa authentication
     */
    get: operations["getTwoFaInfo"];
    /**
     * Setup TwoFa 
     * @description Setup TwoFa for an account
     */
    post: operations["setupTwoFa"];
  };
  "/v1/account/2fa/disable": {
    /**
     * Disable TwoFa 
     * @description Disable TwoFa for an account
     */
    post: operations["disableTwoFa"];
  };
  "/v1/announcements": {
    /**
     * List Announcements 
     * @description Lists any important updates posted by the Cycle team
     */
    get: operations["getAnnouncementsList"];
  };
  "/v1/billing/orders": {
    /**
     * List Billing Orders 
     * @description Requires the `billing-orders-manage` capability.
     */
    get: operations["getOrders"];
    /**
     * Create order 
     * @description Requires TODO capability.
     */
    post: operations["createOrder"];
  };
  "/v1/billing/orders/{orderId}": {
    /**
     * Fetch Billing Order 
     * @description Requires the `billing-orders-manage` capability.
     */
    get: operations["getBillingOrder"];
    /**
     * Update Billing Order 
     * @description Requires the `billing-orders-manage` capability.
     */
    patch: operations["updateBillingOrder"];
  };
  "/v1/billing/orders/{orderId}/tasks": {
    /**
     * Create Order Job 
     * @description Used to confirm an order
     */
    post: operations["createOrderJob"];
  };
  "/v1/billing/plans/support": {
    /**
     * List Support Plans 
     * @description Doesn't require a specific capability to call.
     */
    get: operations["getBillingSupportPlans"];
  };
  "/v1/billing/plans/tiers": {
    /**
     * List Tiers 
     * @description Returns list of availiable tiers
     */
    get: operations["getTiers"];
  };
  "/v1/billing/methods": {
    /**
     * List Billing Methods 
     * @description Requires the `billing-methods-manage` capability.
     */
    get: operations["getBillingMethods"];
    /**
     * Create Billing Method 
     * @description Requires the `billing-methods-manage` capability.
     */
    post: operations["createBillingMethod"];
  };
  "/v1/billing/methods/{methodId}": {
    /**
     * Fetch Billing Method 
     * @description Requires the `billing-methods-manage` capability.
     */
    get: operations["getBillingMethod"];
    /**
     * Delete Biilling Method 
     * @description Requires the `billing-methods-manage` capability.
     */
    delete: operations["removeBillingMethod"];
    /**
     * Update Billing Invoice 
     * @description Requires the `billing-methods-manage` capability.
     */
    patch: operations["updateBillingMethod"];
  };
  "/v1/billing/invoices": {
    /**
     * List Billing Invoices 
     * @description Requires the `billing-invoices-view` capability.
     */
    get: operations["getInvoices"];
  };
  "/v1/billing/invoices/{invoiceId}": {
    /**
     * Fetch Billing Invoice 
     * @description Requires the `billing-invoices-view` capability.
     */
    get: operations["getInvoice"];
  };
  "/v1/billing/invoices/{invoiceId}/tasks": {
    /**
     * Create Invoice Job 
     * @description Requires the `billing-invoices-pay` capability.
     */
    post: operations["createInvoiceJob"];
  };
  "/v1/billing/services": {
    /**
     * List Billing Services 
     * @description Requries the `billing-services-view` capability.
     */
    get: operations["getBillingServices"];
  };
  "/v1/billing/services/{servicesId}": {
    /**
     * Fetch Billing Service 
     * @description Requries the `billing-services-view` capability.
     */
    get: operations["getBillingService"];
  };
  "/v1/billing/services/overages": {
    /**
     * List Billing Overages 
     * @description Doesn't require a specific capability.
     */
    get: operations["getBillingOverages"];
  };
  "/v1/billing/credits": {
    /**
     * List Billing Credits 
     * @description Requires the `billing-credits-view` capability.
     */
    get: operations["getCredits"];
  };
  "/v1/billing/credits/{creditsId}": {
    /**
     * Fetch Billing Credit 
     * @description Requires the `billing-credits-view` capability.
     */
    get: operations["getCredit"];
  };
  "/v1/environments": {
    /**
     * List Environments 
     * @description Requires the `environments-view` capability.
     */
    get: operations["getEnvironments"];
    /**
     * Create Environment 
     * @description Requires the `environments-create` capability.
     */
    post: operations["createEnvironment"];
  };
  "/v1/environments/{environmentId}": {
    /**
     * Fetch Environment 
     * @description Requires the `environments-view` capability.
     */
    get: operations["getEnvironmentById"];
    /**
     * Remove Environment 
     * @description Requires the `environments-update` capability.
     */
    delete: operations["removeEnvironment"];
    /**
     * Update Environment 
     * @description Updates the specificed environment, setting the values of the parameters passed. If any parameters are omitted, they will be left unchanged. Requires the `environments-update` capability.
     */
    patch: operations["updateEnvironment"];
  };
  "/v1/environments/{environmentId}/tasks": {
    /**
     * Create Environment Job 
     * @description Used to `start`, `stop`, or `delete` an environment. Requires the `environments-state` capability.
     */
    post: operations["createEnvironmentJob"];
  };
  "/v1/environments/{environmentId}/summary": {
    /**
     * Fetch Environment Summary 
     * @description Fetches a single summary object for a specific environment. Contains useful and relevant data/statistics that would otherwise be several separate API calls.  Requires the `environments-view` capability.
     */
    get: operations["getEnvironmentSummary"];
  };
  "/v1/environments/{environmentId}/services/lb": {
    /**
     * Fetch LB Info 
     * @description Requires the `environments-view` capability.
     */
    get: operations["getLoadBalancerInfo"];
  };
  "/v1/environments/{environmentId}/services/lb/tasks": {
    /**
     * Reconfigure LB 
     * @description Creates a task that will update the load balancer's configuration.
     */
    post: operations["reconfigureLoadBalancer"];
  };
  "/v1/environments/{environmentId}/services/discovery/tasks": {
    /**
     * Reconfigure Discovery 
     * @description Creates a task that will update the discovery service's configuration.
     */
    post: operations["reconfigureDiscovery"];
  };
  "/v1/environments/{environmentId}/services/vpn": {
    /**
     * Fetch VPN Info 
     * @description Requires the `environments-vpn` capability.
     */
    get: operations["getVPNInfo"];
  };
  "/v1/environments/{environmentId}/services/vpn/logins": {
    /**
     * Fetch VPN Info 
     * @description Requires the `environments-vpn` capability.
     */
    get: operations["getVpnLogins"];
  };
  "/v1/environments/{environmentId}/services/vpn/users": {
    /**
     * List VPN Users 
     * @description Requires the `environments-vpn-manage` capability.
     */
    get: operations["getVPNUsers"];
    /**
     * Create VPN User 
     * @description Requires the `environments-vpn-manage` capability.
     */
    post: operations["createVPNUser"];
  };
  "/v1/environments/{environmentId}/services/vpn/users/{userId}": {
    /**
     * Remove VPN user 
     * @description Requires the `environments-vpn-manage` capability.
     */
    delete: operations["removeVPNUser"];
  };
  "/v1/environments/{environmentId}/services/vpn/tasks": {
    /**
     * Reconfigure VPN 
     * @description Requires the `environments-vpn-manage` capability.
     */
    post: operations["reconfigureVPN"];
  };
  "/v1/environments/{environmentId}/telemetry/instances": {
    /**
     * List Telemetry Data 
     * @description Requires the `environments-view` capability.
     */
    get: operations["getEnvironmentInstancesTelemetry"];
  };
  "/v1/environments/{environmentId}/scoped-variables": {
    /**
     * List Scoped Variables 
     * @description Requires the `scoped-variables-view` capability.
     */
    get: operations["listScopedVariables"];
    /**
     * Create Scoped Variable 
     * @description Requires the `scoped-variables-manage` capability.
     */
    post: operations["createScopedVariable"];
  };
  "/v1/environments/{environmentId}/scoped-variables/{scopedVariableId}": {
    /**
     * Fetch Scoped Variable 
     * @description Requires the `scoped-variables-view` capability.
     */
    get: operations["fetchScopedVariable"];
    /**
     * Remove Scoped Variable 
     * @description Requires the `scoped-variables-manage` capability.
     */
    delete: operations["removeScopedVariableById"];
    /**
     * Update Scoped Variable 
     * @description Requires the `scoped-variables-manage` capability.
     */
    patch: operations["updateScopedVariable"];
  };
  "/v1/containers": {
    /**
     * List Containers 
     * @description Requires the `containers-view` capability.
     */
    get: operations["getContainers"];
    /**
     * Create Container 
     * @description Requires the `containers-deploy` capability.
     */
    post: operations["createContainer"];
  };
  "/v1/containers/{containerId}": {
    /**
     * Fetch Container 
     * @description Requires the `containers-view` capability.
     */
    get: operations["getContainerById"];
    /**
     * Delete Container 
     * @description Requires the `contianers-update` capability.
     */
    delete: operations["removeContainer"];
    /**
     * Update Container 
     * @description Updates the specified container, setting the values of the parameters passed.  If any parameters are omitted, they will be left unchanged. Requires the `contianers-update` capability.
     */
    patch: operations["updateContainer"];
  };
  "/v1/containers/{containerId}/summary": {
    /**
     * Fetch Container Summary 
     * @description Requires the `containers-view` capability.
     */
    get: operations["getContainerSummary"];
  };
  "/v1/containers/{containerId}/tasks": {
    /**
     * Create Container Job 
     * @description Used to perform different actions on a given container. Requires the `containers-state`, `containers-update`, or `containers-volumes-manage` capability (respectively).
     */
    post: operations["createContainerJob"];
  };
  "/v1/containers/{containerId}/instances": {
    /**
     * List Instances 
     * @description Requires the `containers-view` capability.
     */
    get: operations["getInstances"];
    /**
     * Create Instance(s) 
     * @description Requires the `containers-update` capability.
     */
    post: operations["createContainerInstance"];
    /**
     * Delete Instance(s) 
     * @description Requires the `containers-update` capability.
     */
    delete: operations["removeMultipleContainerInstances"];
  };
  "/v1/containers/{containerId}/instances/{instanceId}": {
    /**
     * Fetch Instance 
     * @description Requires the `containers-view` capability.
     */
    get: operations["getContainerInstance"];
    /**
     * Delete Instance 
     * @description Requires the `containers-update` capability.
     */
    delete: operations["removeContainerInstance"];
  };
  "/v1/containers/{containerId}/instances/{instanceId}/ssh": {
    /**
     * Fetch SSH Credentials 
     * @description Requires the `containers-ssh` capability.
     */
    get: operations["getSSHConnection"];
    /**
     * Expire SSH Credentials 
     * @description Requires the `containers-ssh` capability.
     */
    delete: operations["expireInstanceSSHTokens"];
  };
  "/v1/containers/{containerId}/instances/{instanceId}/tasks": {
    /**
     * Create Instance Task 
     * @description Used to perform different actions on a given container instance, requries `containers-instance-migrate` capability.
     */
    post: operations["createContainerInstanceJob"];
  };
  "/v1/containers/{containerId}/instances/{instanceId}/volumes": {
    /**
     * Fetch Instance Volume(s) 
     * @description Requires the `containers-view` capability.
     */
    get: operations["getContainerInstanceVolumes"];
  };
  "/v1/containers/{containerId}/instances/{instanceId}/telemetry/resources/report": {
    /**
     * Fetch Instance Telemetry Report 
     * @description Requires the `containers-view` capability.
     */
    get: operations["getInstanceResourcesTelemetryReport"];
  };
  "/v1/containers/{containerId}/servers": {
    /**
     * List Container Servers 
     * @description Requires the `containers-view` capability.
     */
    get: operations["ContainersListServers"];
  };
  "/v1/containers/{containerId}/servers/usable": {
    /**
     * List Usable Servers 
     * @description Requires the `containers-view` capability.
     */
    get: operations["getUsableServers"];
  };
  "/v1/containers/{containerId}/compatible-images": {
    /**
     * Fetch Compatible Images 
     * @description Requires the `containers-view` capability.
     */
    get: operations["getCompatibleImages"];
  };
  "/v1/containers/{containerId}/backups": {
    /**
     * List Backups 
     * @description Requires the `containers-backups-view` capability.
     */
    get: operations["getBackupsCollection"];
  };
  "/v1/containers/{containerId}/backups/{backupId}": {
    /**
     * Fetch Backup 
     * @description Requires the `containers-backups-view` capability.
     */
    get: operations["getBackup"];
    /**
     * Delete Backup 
     * @description Requires the `containers-backups-manage` capability.
     */
    delete: operations["removeBackup"];
  };
  "/v1/containers/{containerId}/backups/{backupId}/tasks": {
    /**
     * Create Backup Job 
     * @description Used to restore a backup for a given container instance. Requires the `containers-backups-manage` capability.
     */
    post: operations["restoreBackupJob"];
  };
  "/v1/containers/{containerId}/backups/{backupId}/logs": {
    /**
     * List Backup Logs 
     * @description Requires the `containers-backups-view` capability.
     */
    get: operations["getBackupLogs"];
  };
  "/v1/containers/{containerId}/telemetry/instances": {
    /**
     * List Telemetry Data 
     * @description Requires the `containers-view` capability.
     */
    get: operations["getContainerInstancesTelemetry"];
  };
  "/v1/dns/zones": {
    /**
     * List DNS Zones 
     * @description Requires the `dns-view` capability.
     */
    get: operations["getZonesCollection"];
    /**
     * Create DNS Zone 
     * @description Requires the `dns-manage` capability.
     */
    post: operations["createDNSZone"];
  };
  "/v1/dns/zones/{zoneId}": {
    /**
     * Fetch DNS Zone 
     * @description Requires the `dns-view` capability.
     */
    get: operations["getDNSZone"];
    /**
     * Remove DNS Zone 
     * @description Requires the `dns-manage` capability.
     */
    delete: operations["removeDNSZone"];
    /**
     * Update DNS Zone 
     * @description Requires the `dns-manage` capability.
     */
    patch: operations["updateDNSZone"];
  };
  "/v1/dns/zones/{zoneId}/tasks": {
    /**
     * Create DNS Zone Job 
     * @description Used to perform different actions on a given DNS zone, requires the `dns-manage` capability.
     */
    post: operations["DNSZoneTask"];
  };
  "/v1/dns/zones/{zoneId}/records": {
    /**
     * List Records 
     * @description Requires the `dns-view` capability.
     */
    get: operations["getRecordsCollection"];
    /**
     * Create Record 
     * @description Requires the `dns-manage` capability.
     */
    post: operations["createDNSRecord"];
  };
  "/v1/dns/zones/{zoneId}/records/{recordId}": {
    /**
     * Delete Record 
     * @description Requires the `dns-manage` capability.
     */
    delete: operations["removeDNSRecord"];
    /**
     * Update DNS Record 
     * @description Requires the `dns-manage` capability.
     */
    patch: operations["updateDNSRecord"];
  };
  "/v1/dns/zones/{zoneId}/records/{recordId}/tasks": {
    /**
     * Create a DNS record Job 
     * @description Used to perform different actionson a given DNS record, requires the `dns-manage` capability.
     */
    post: operations["DNSRecordTask"];
  };
  "/v1/dns/tls/attempts": {
    /**
     * List TLS Generate Attempts 
     * @description Requires the `dns-view` capability.
     */
    get: operations["DNSTLSAttempts"];
  };
  "/v1/dns/tls/certificates/lookup": {
    /**
     * Fetch Domain TLS Certificate 
     * @description Requires the `dns-view` capability.
     */
    get: operations["lookupDnsCertificate"];
  };
  "/v1/hubs": {
    /**
     * List Hubs 
     * @description Lists all associated hubs.
     */
    get: operations["getHubs"];
    /**
     * Create Hub 
     * @description Create a hub resource.
     */
    post: operations["createHub"];
  };
  "/v1/hubs/current": {
    /**
     * Fetch Hub 
     * @description Requires the `hubs-view` capability.
     */
    get: operations["getHub"];
    /**
     * Remove Hub 
     * @description Requires the `hubs-delete` capability. This can only be aquired by being the hub owner.
     */
    delete: operations["removeHub"];
    /**
     * Update Hub 
     * @description Updates the specified hub, setting the values of the parameters passed.
     */
    patch: operations["updateHub"];
  };
  "/v1/hubs/current/activity": {
    /**
     * List Activity 
     * @description Doesn't require a specific capability.
     */
    get: operations["getHubActivity"];
  };
  "/v1/hubs/capabilities": {
    /**
     * List Hub Capabilities 
     * @description Does not require a capability.
     */
    get: operations["getHubCapabilities"];
  };
  "/v1/hubs/current/usage": {
    /**
     * Fetch Hub 
     * @description Requires the `hubs-view` capability.
     */
    get: operations["getHubUsage"];
  };
  "/v1/hubs/current/invites/{inviteId}": {
    /**
     * Remove Hub Invite 
     * @description Requires the `hub-invites-manage` capability.
     */
    delete: operations["removeHubInvite"];
  };
  "/v1/hubs/current/invites": {
    /**
     * List Hub Invites 
     * @description Requires the `hubs-invites-manage` capability.
     */
    get: operations["getHubInvites"];
    /**
     * Create Hub Invite 
     * @description Requires the `hubs-invites-send` capability.
     */
    post: operations["createHubInvite"];
  };
  "/v1/hubs/current/members": {
    /**
     * List Hub Memberships 
     * @description Requires the `hubs-members-view` capability.
     */
    get: operations["getHubMembers"];
  };
  "/v1/hubs/current/members/{memberId}": {
    /**
     * Fetch Hub Member 
     * @description Requires the `hubs-members-view` capability.
     */
    get: operations["getHubMember"];
    /**
     * Remove Hub Member 
     * @description Requires the `hubs-members-manage` capability.
     */
    delete: operations["removeHubMember"];
    /** Update a Hub Member */
    patch: operations["updateHubMember"];
  };
  "/v1/hubs/current/members/account/{accountId}": {
    /**
     * Fetch Members Account 
     * @description Requires the `hubs-members-view` capability.
     */
    get: operations["getHubMembersAccount"];
  };
  "/v1/hubs/current/api-keys": {
    /**
     * List API Keys 
     * @description Requires the `api-keys-manage` capability.
     */
    get: operations["getApiKeys"];
    /**
     * Create API Key 
     * @description Requires the `api-keys-manage` capability.
     */
    post: operations["createApiKey"];
  };
  "/v1/hubs/current/api-keys/{apikeyId}": {
    /**
     * Fetch API Key 
     * @description Requries the `api-keys-manage` capability.
     */
    get: operations["getApiKey"];
    /**
     * remove Api Key 
     * @description Requires the 'api-keys-delete' capability.
     */
    delete: operations["removeApiKey"];
    /**
     * Update API Key 
     * @description Requires the `api-keys-manage` capability.
     */
    patch: operations["updateApiKey"];
  };
  "/v1/search/index": {
    /**
     * Get Search Index 
     * @description Requires the view capability for each returned segment
     */
    get: operations["getSearchIndex"];
  };
  "/v1/images": {
    /**
     * List Images 
     * @description Requires the `images-view` capability.
     */
    get: operations["getImages"];
    /**
     * Create Image 
     * @description Requires the `images-import` capability.
     */
    post: operations["createImage"];
  };
  "/v1/images/{imageId}": {
    /**
     * Fetch Image 
     * @description Requires the `images-view` capability.
     */
    get: operations["getImage"];
    /**
     * Delete Image 
     * @description Requires the `images-updae` capability.
     */
    delete: operations["removeImage"];
    /**
     * Update Image 
     * @description Requires the `images-updae` capability.
     */
    patch: operations["updateImage"];
  };
  "/v1/images/{imageId}/build-log": {
    /**
     * Fetch Build Log 
     * @description Requires the `images-view` capability.
     */
    get: operations["getImageBuildLog"];
  };
  "/v1/images/tasks": {
    /**
     * Images Prune 
     * @description Used to perform different actions on a given image. Requires the `images-delete` capability.
     */
    post: operations["createImageCollectionJob"];
  };
  "/v1/images/{imageId}/tasks": {
    /**
     * Image Jobs 
     * @description Used to perform different actions on a given image.  Requires the `images-import` capabiltiy.
     */
    post: operations["createImageJob"];
  };
  "/v1/images/sources": {
    /**
     * List Sources 
     * @description Requires the `images-view` capability.
     */
    get: operations["getSourcesCollection"];
    /**
     * Create Source 
     * @description requires the `images-import` capability.
     */
    post: operations["createImageSource"];
  };
  "/v1/images/sources/{sourceId}": {
    /**
     * Fetch Source 
     * @description Requires the `images-view` capability.
     */
    get: operations["getSource"];
    /**
     * Remove a given image source 
     * @description Requires the `images-import` capability.
     */
    delete: operations["removeImageSource"];
    /**
     * Update Source 
     * @description Requires the `images-import` capability.
     */
    patch: operations["updateImageSource"];
  };
  "/v1/infrastructure/summary": {
    /**
     * Fetch Infrastructure Summary 
     * @description Requires the `infrastructure-servers-view` capability.
     */
    get: operations["getInfrastructureSummary"];
  };
  "/v1/infrastructure/providers/native": {
    /**
     * List Native Providers 
     * @description No capability required, public information.
     */
    get: operations["getNativeProviders"];
  };
  "/v1/infrastructure/providers/{providerId}/servers": {
    /**
     * List Provider Servers 
     * @description Requires the `infrastructure-providers-view` capability.
     */
    get: operations["getProviderServers"];
  };
  "/v1/infrastructure/providers/{providerId}/locations": {
    /**
     * List Provider Locations 
     * @description No capability required, public information (datacenter locations).
     */
    get: operations["getProviderLocations"];
  };
  "/v1/infrastructure/providers": {
    /**
     * List Providers 
     * @description Requires the `infrastructure-providers-view` capability.
     */
    get: operations["getProviders"];
    /**
     * Create Provider 
     * @description Requires the `infrastructure-providers-manage` capability.
     */
    post: operations["createProvider"];
  };
  "/v1/infrastructure/providers/{providerId}": {
    /**
     * Fetch Provider 
     * @description Requires the `infrastructure-providers-view` capability.
     */
    get: operations["getProvider"];
    /**
     * Remove Provider 
     * @description Requires the `infrastructure-providers-manage` capability.
     */
    delete: operations["removeProvider"];
    /**
     * Update Provider 
     * @description Requires the `infrastructure-providers-manage` capability.
     */
    patch: operations["updateProvider"];
  };
  "/v1/infrastructure/providers/{providerId}/tasks": {
    /**
     * Providers Jobs 
     * @description Requires the `infrastructure-providers-manage` capability.
     */
    post: operations["createProviderJob"];
  };
  "/v1/infrastructure/servers": {
    /**
     * List Servers 
     * @description Requires the `servers-view` capability.
     */
    get: operations["getServersCollection"];
    /**
     * Create Server 
     * @description Requires the `servers-provision` capability.
     */
    post: operations["createServer"];
  };
  "/v1/infrastructure/servers/{serverId}": {
    /**
     * Fetch Server 
     * @description Requires the `servers-view` capability.
     */
    get: operations["getSingleServer"];
    /**
     * Remove Server 
     * @description Requires the `servers-update` capability.
     */
    delete: operations["removeServer"];
    /**
     * Update Server 
     * @description Requires the `servers-update` capability.
     */
    patch: operations["updateServer"];
  };
  "/v1/infrastructure/servers/{serverId}/telemetry": {
    /**
     * List Server Telemetry 
     * @description Requires the `servers-view` capability. This call requires the filter query be used.
     */
    get: operations["getServerTelemetery"];
  };
  "/v1/infrastructure/servers/{serverId}/instances": {
    /**
     * List Server Instances 
     * @description Requires the `containers-view` capability.
     */
    get: operations["getServerInstances"];
  };
  "/v1/infrastructure/servers/{serverId}/tasks": {
    /**
     * Create Server Job 
     * @description Used to perform different actions on a given server. Requires the `servers-state` capability.
     */
    post: operations["createServerJob"];
  };
  "/v1/infrastructure/servers/tags": {
    /**
     * List Server Tags 
     * @description Requires the `servers-view` capability.
     */
    get: operations["getServerTags"];
  };
  "/v1/infrastructure/servers/clusters": {
    /**
     * List Servers Clusters 
     * @description Requires the `servers-view` capability.
     */
    get: operations["GetServersClusters"];
  };
  "/v1/infrastructure/servers/{serverId}/usage": {
    /**
     * Fetch Server Usage 
     * @description Requires the `servers-view` capability.
     */
    get: operations["GetServerUsage"];
  };
  "/v1/infrastructure/ips/pools": {
    /**
     * List Pools 
     * @description Requires the `infrastructure-ips-manage` capability.
     */
    get: operations["getInfrastructureIPPools"];
  };
  "/v1/infrastructure/ips/pools/{poolId}": {
    /**
     * Fetch Pool IP 
     * @description Requires the `infrastructure-ips-manage` capability.
     */
    get: operations["getInfrastructureIPPool"];
    /**
     * Remove Pool IP 
     * @description Requires the `infrastructure-ips-manage` capability.
     */
    delete: operations["removeIpPool"];
  };
  "/v1/infrastructure/ips/pools/{poolId}/ips": {
    /**
     * List Pool IP's 
     * @description Requires the `infrastructure-ips-manage` capability.
     */
    get: operations["getPoolsIPs"];
  };
  "/v1/infrastructure/deployment-strategies": {
    /**
     * Fetch Deployment Strategies 
     * @description This endpoint returns available container deployment strategies.
     */
    get: operations["getDeploymentStrategies"];
  };
  "/v1/jobs": {
    /**
     * List Jobs. 
     * @description Requires the `jobs-view` permission.
     */
    get: operations["getJobs"];
  };
  "/v1/jobs/{jobId}": {
    /**
     * Fetch Job 
     * @description Requires the `jobs-view` permission.
     */
    get: operations["getJob"];
  };
  "/v1/jobs/latest": {
    /**
     * List Latest Jobs 
     * @description Requires the `jobs-view` permission.
     */
    get: operations["getLatestJobs"];
  };
  "/v1/stacks": {
    /**
     * List Stacks 
     * @description Requires the `stacks-view` permission.
     */
    get: operations["getStacks"];
    /**
     * Create Stack 
     * @description Requires the `stacks-manage` capability.
     */
    post: operations["createStack"];
  };
  "/v1/stacks/{stackId}": {
    /**
     * Fetch Stack 
     * @description Requires the `stacks-view` capability.
     */
    get: operations["getStack"];
    /**
     * Remove Stack 
     * @description Requires the `stacks-manage` capability.
     */
    delete: operations["removeStack"];
    /**
     * Update Stack 
     * @description Requires the `stacks-manage` capability.
     */
    patch: operations["updateStack"];
  };
  "/v1/stacks/{stackId}/tasks": {
    /**
     * Create Stack Job 
     * @description Requires the `stacks-manage` capability.
     */
    post: operations["createStackJob"];
  };
  "/v1/stacks/builds/{buildId}": {
    /**
     * Fetch Stack Build 
     * @description Requires the `stacks-view` capability.
     */
    get: operations["getStackBuildLookup"];
  };
  "/v1/stacks/{stackId}/builds": {
    /**
     * List Builds 
     * @description Requires the `stacks-view` capability.
     */
    get: operations["getStackBuilds"];
    /**
     * Create Stack Build 
     * @description Requires the `stacks-manage` capability.
     */
    post: operations["createStackBuild"];
  };
  "/v1/stacks/{stackId}/builds/{buildId}": {
    /**
     * Fetch Stack Build 
     * @description Requires the `stacks-view` capability.
     */
    get: operations["getStackBuild"];
    /**
     * Remove Stack Build 
     * @description Requires the `stacks-manage` capability.
     */
    delete: operations["removeStackBuild"];
  };
  "/v1/stacks/{stackId}/builds/{buildId}/tasks": {
    /**
     * Create Stack Build Job 
     * @description Requires the `stacks-manage` capability.
     */
    post: operations["createStackBuildJob"];
  };
  "/v1/sdn/networks": {
    /**
     * List SDNs 
     * @description Requires the `sdn-networks-view` capability.
     */
    get: operations["getNetworks"];
    /**
     * Create SDN 
     * @description Requires the `sdn-networks-manage` capability.
     */
    post: operations["createSDNNetwork"];
  };
  "/v1/sdn/networks/{networkId}": {
    /**
     * Fetch SDN 
     * @description Requires the `sdn-networks-view` capability.
     */
    get: operations["getNetwork"];
    /**
     * Remove SDN 
     * @description Requires the `sdn-networks-manage` capability.
     */
    delete: operations["removeSDNNetwork"];
    /**
     * Update SDN 
     * @description Requires the `sdn-networks-manage` capability.
     */
    patch: operations["updateSDNNetwork"];
  };
  "/v1/sdn/networks/{networkId}/tasks": {
    /**
     * Create SDN Job 
     * @description Requires the `sdn-networks-manage` capability.
     */
    post: operations["createNetworkJob"];
  };
  "/v1/pipelines": {
    /**
     * List Pipelines 
     * @description Requires the `pipelines-view` capability.
     */
    get: operations["getPipelines"];
    /**
     * Create Pipeline 
     * @description Requires the `pipelines-manage` capability.
     */
    post: operations["createPipeline"];
  };
  "/v1/pipelines/{pipelineId}": {
    /**
     * Fetch Pipeline 
     * @description Requires the `pieplines-view` capability.
     */
    get: operations["getPipeline"];
    /**
     * Remove Pipeline 
     * @description Requires the `pipelines-manage` capability.
     */
    delete: operations["removePipeline"];
    /**
     * Create Pipeline 
     * @description Requires the `pipelines-manage` capability.
     */
    patch: operations["updatePipeline"];
  };
  "/v1/pipelines/{pipelineId}/runs": {
    /**
     * List Pipeline Runs 
     * @description Requires the `pieplines-view` capability.
     */
    get: operations["getPipelineRuns"];
  };
  "/v1/pipelines/{pipelineId}/tasks": {
    /**
     * Create Pipeline Job 
     * @description Requires the `pipelines-manage` capability.
     */
    post: operations["createPipelineJob"];
  };
  "/v1/pipelines/{pipelineId}/keys": {
    /**
     * List Trigger Keys 
     * @description Requires the `pipelines-manage` capability.
     */
    get: operations["getPipelineTriggerKeys"];
    /**
     * Create Trigger Key 
     * @description Requires the `pipelines-manage` capability.
     */
    post: operations["createPipelineTriggerKey"];
  };
  "/v1/pipelines/{pipelineId}/keys/{triggerKeyId}": {
    /**
     * Fetch Trigger Key 
     * @description Requires the `pipelines-manage` capability.
     */
    get: operations["getPipelineTriggerKey"];
    /**
     * Delete Trigger Key 
     * @description Requires the `pipelines-manage` capability.
     */
    delete: operations["removePipelineTriggerKey"];
    /**
     * Update Trigger Key 
     * @description Requires the `pipelines-manage` capability.
     */
    patch: operations["updatePipelineTriggerKey"];
  };
  "/v1/hubs/current/notifications": {
    /**
     * Hub Notification Pipeline Auth 
     * @description Requires the `hubs-notifications-listen` capability.
     */
    get: operations["pipelineAuth"];
  };
  "/v1/containers/{containerId}/instances/{instanceId}/console": {
    /**
     * Instance Console Auth 
     * @description Requires the `contaiers-console` capability.
     */
    get: operations["instanceConsoleAuth"];
  };
  "/v1/containers/{containerId}/instances/{instanceId}/telemetry/resources/stream": {
    /**
     * Instance Telemetry Stream Credentials 
     * @description Requires the `containers-view` capability. Retrieves an access token and URL to open a websocket to for streaming instance telemetry live. This connects directly to the compute layer on the server the instance is hosted on, and streams telemetry in real time.
     */
    get: operations["getInstanceResourcesTelemetryStream"];
  };
  "/v1/security/report": {
    /**
     * Get Security Report 
     * @description Returns a report detailing incidents logged by the platform around security related events.
     */
    get: operations["getSecurityReport"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * Error 
     * @description The Cycle API uses standard HTTP response codes to indicate the success or failure of an API request. Codes in the `2xx` range indicate success. Codes in the `4xx` range indicate a request that failed due to input, and codes in the `5xx` range indicate an error on Cycle's part (rare).
     * There are two types of error response objects. Errors with authentication are formatted to follow the OAuth spec, while all other errors follow the same convention. If you're using one of our API Libraries, they will standardize OAuth errors to fit the general convention.
     */
    Error: {
      /**
       * @description The HTTP response code. 
       * @enum {integer}
       */
      status?: 400 | 401 | 403 | 404 | 409 | 415 | 422 | 500;
      /**
       * @description A Cycle standard error code. 
       * @enum {string}
       */
      code?: "400.invalid_syntax" | "401.auth_invalid" | "401.auth_expired" | "401.no_cookie" | "401.unauthorized_application" | "403.mismatch" | "403.wrong_hub" | "403.not_ready" | "403.expired" | "403.restricted_portal" | "403.permissions" | "403.wrong_scope" | "403.invalid_ip" | "403.invalid_state" | "403.not_approved" | "403.not_allowed" | "403.platform_disabled" | "403.2fa_required" | "403.2fa_failed" | "403.new_application_capabilities" | "403.tier_restricted" | "404.hub" | "404.hub.invitation" | "404.sdn_network" | "404.environment" | "404.environment.scoped-variable" | "404.hub.api_key" | "404.hub.provider" | "404.uri" | "404.provider" | "404.stack" | "404.survey" | "404.survey_response" | "404.notification" | "404.stack_build" | "404.image" | "404.image.source" | "404.image.build_log" | "404.job" | "404.billing.order" | "404.billing.service" | "404.billing.credit" | "404.billing.invoice" | "404.billing.tier" | "404.billing.support" | "404.billing.payment_method" | "404.billing.promo_code" | "404.node" | "404.infrastructure.location" | "404.infrastructure.ips.pool" | "404.infrastructure.provider" | "404.infrastructure.server" | "404.infrastructure.model" | "404.account" | "404.container" | "404.container.backup" | "404.vpn_account" | "404.instance" | "404.pipeline" | "404.pipeline.run" | "404.pipeline.key" | "404.dns.zone" | "404.dns.record" | "404.cluster" | "404.platform_build" | "404.cycleos_build" | "404.email_verification" | "404.hub.membership" | "404.announcement" | "404.ha_service_session" | "404.sales_lead" | "409.duplicate_found" | "415.invalid_content_type" | "422.missing_argument" | "422.invalid_argument\"" | "422.invalid_input\"" | "422.max_exceeded" | "422.not_compatible" | "422.already_exists" | "429.rate_limiting" | "500.database" | "500.database_insert" | "500.database_update" | "500.database_remove" | "500.jobd" | "500.unknown" | "500.dev" | "500.email" | "500.payment_gateway" | "503.not_ready" | "503.not_enabled" | "503.dependency_not_enabled";
      /** @description The main text describing the error. */
      title?: string;
      /** @description A more detailed description of the error. */
      detail?: string;
      /** @description A [JSON pointer](https://tools.ietf.org/html/rfc6901/) describing the source of an error. */
      source?: string;
    };
    /**
     * ErrorEnvelope 
     * @description An error response.
     */
    ErrorEnvelope: {
      error: components["schemas"]["Error"];
      /** @description Data will always be `null` here. */
      data: Record<string, never>;
    };
    /**
     * ID 
     * @description A 24 character hex string used to identify a unique resource.
     */
    ID: string;
    /**
     * DateTime 
     * Format: date-time 
     * @example 2021-01-30T08:30:00Z
     */
    DateTime: string;
    /**
     * State 
     * @description Information regarding the current state of the resource.
     */
    State: {
      changed: components["schemas"]["DateTime"];
      /** @description An error, if any, that has occurred for this resource. */
      error?: {
        /** @description Details about the error that has occurred. */
        message?: string;
        /** @description The timestamp of when the error was encountered. */
        time?: components["schemas"]["DateTime"];
      };
    };
    /** AccountState */
    AccountState: ({
      /**
       * @description The current state of the account. 
       * @enum {string}
       */
      current: "new" | "live" | "suspending" | "purging" | "deleting" | "deleted";
    }) & components["schemas"]["State"];
    /**
     * Account 
     * @description An object representing information about the currently logged-in user.
     */
    Account: {
      id: components["schemas"]["ID"];
      /** @description The first and last name associated with the account. */
      name: {
        /** @description The first name of the account owner. */
        first: string;
        /** @description The last name of the account owner. */
        last: string;
      };
      /** @description Information about the email address associated with the account. */
      email: {
        /** @description The email address. */
        address: string;
        /** @description If true, the email has been verified and the account is active. */
        verified: boolean;
        /** @description The date the email was added to the account */
        added: components["schemas"]["DateTime"];
      };
      /** @description Two factor auth verification information. */
      two_factor_auth?: {
        /** @description A boolean representing if the account has verified with TwoFA. */
        verified: boolean;
      } | null;
      /** @description Indicates whether or not Cycle employees have authorization to log in to this account in a support capacity. */
      allow_support_login?: boolean;
      state: components["schemas"]["AccountState"];
      /**
       * AccountEvents 
       * @description A collection of timestamps for each event in the account's lifetime.
       */
      events: {
        /** @description The timestamp of when the image was created. */
        created: components["schemas"]["DateTime"];
        /** @description The timestamp of when the image was updated. */
        updated: components["schemas"]["DateTime"];
        /** @description The timestamp of when the image was deleted. */
        deleted: components["schemas"]["DateTime"];
        /** @description The timestamp of when the account was last accessed. */
        last_login: components["schemas"]["DateTime"];
      };
    };
    /**
     * HubID 
     * @description The unique ID of the Hub this resource was created in.
     */
    HubID: string;
    /** MembershipState */
    MembershipState: ({
      /**
       * @description The current state of the membership. 
       * @enum {string}
       */
      current: "pending" | "accepted" | "declined" | "revoked" | "deleted";
    }) & components["schemas"]["State"];
    /**
     * HubMembershipInvitation 
     * @description Information about a hub membership invitation.
     */
    Invitation: {
      /** @description Information about the origin account of the invitation. */
      sender: {
        id: components["schemas"]["ID"];
        /** @description The account type. */
        type: string;
      };
      /** @description The email address for the invitations recipient. */
      recipient: string;
      /**
       * InvitationEvents 
       * @description A collection of timestamps for each event in the invitation's lifetime.
       */
      events: {
        /** @description The timestamp of when the invitation was created. */
        created: components["schemas"]["DateTime"];
        /** @description The timestamp of when the invitation was updated. */
        updated: components["schemas"]["DateTime"];
        /** @description The timestamp of when the invitation was deleted. */
        deleted: components["schemas"]["DateTime"];
        /** @description The timestamp of when the invitation was accepted. */
        accepted: components["schemas"]["DateTime"];
        /** @description The timestamp of when the invitation was declined. */
        declined: components["schemas"]["DateTime"];
        /** @description The timestamp of when the invitation was revoked. */
        revoked: components["schemas"]["DateTime"];
      };
    };
    /**
     * @description A capability that a user or API key that represents what an API key or a user can do. 
     * @enum {string}
     */
    Capability: "hubs-update" | "hubs-delete" | "hubs-invites-send" | "hubs-invites-manage" | "hubs-members-manage" | "hubs-members-view" | "hubs-notifications-listen" | "hubs-integrations-manage" | "billing-methods-manage" | "billing-invoices-view" | "billing-invoices-pay" | "billing-orders-manage" | "billing-services-view" | "billing-credits-view" | "sdn-networks-view" | "sdn-networks-manage" | "pipelines-manage" | "pipelines-view" | "pipelines-trigger" | "environments-create" | "environments-delete" | "environments-view" | "environments-update" | "environments-state" | "environments-services-manage" | "environments-vpn" | "environments-vpn-manage" | "environments-scopedvariables-manage" | "environments-scopedvariables-view" | "containers-deploy" | "containers-view" | "containers-console" | "containers-ssh" | "containers-update" | "containers-delete" | "containers-state" | "containers-volumes-manage" | "containers-volumes-view" | "containers-instances-migrate" | "containers-backups-manage" | "containers-backups-view" | "stacks-manage" | "stacks-view" | "stacks-builds-manage" | "stacks-builds-deploy" | "images-view" | "images-import" | "images-update" | "images-delete" | "images-build" | "images-sources-view" | "images-sources-manage" | "jobs-view" | "api-keys-manage" | "ips-manage" | "servers-provision" | "servers-view" | "servers-update" | "servers-login" | "servers-state" | "servers-decommission" | "infrastructure-providers-manage" | "infrastructure-providers-view" | "usage-view" | "dns-view" | "dns-manage" | "dns-certs-view";
    /**
     * HubMembershipMeta 
     * @description A list of meta fields that can be applied to a membership.
     */
    HubMembershipMeta: {
      capabilities?: (components["schemas"]["Capability"])[];
    };
    /**
     * HubMembership 
     * @description A membership resource that is scoped to an individual hub.
     */
    HubMembership: {
      id: components["schemas"]["ID"];
      /** @description An ID for the account associated with the given membership. */
      account_id: string;
      hub_id: components["schemas"]["HubID"];
      /** @description A number that maps to the currently set role of the member. */
      role: number;
      /**
       * MembershipEvents 
       * @description A collection of timestamps for each event in the membership's lifetime.
       */
      events: {
        /** @description The timestamp of when the membership was created. */
        created: components["schemas"]["DateTime"];
        /** @description The timestamp of when the membership was updated. */
        updated: components["schemas"]["DateTime"];
        /** @description The timestamp of when the membership was deleted. */
        deleted: components["schemas"]["DateTime"];
        /** @description The timestamp of when the membership was accepted. */
        joined: components["schemas"]["DateTime"];
      };
      state: components["schemas"]["MembershipState"];
      invitation: components["schemas"]["Invitation"];
      /** @description Information about this members permissions for a given hub. */
      permissions: {
        /** @description A boolean where true represents the member has access to view and manage all environments for the hub. */
        all_environments: boolean;
        /** @description An array of environments this membership has access to. */
        environments: ({
            id: components["schemas"]["ID"];
            /** @description A boolean where true represents this environment can be managed by the membership (i.e. its not just read-only). */
            manage: boolean;
          })[];
      };
      /** @description Preference information set by the user for the membership. */
      prefereneces: {
        portal: {
          notifications: {
            jobs: {
              apikey_alerts: boolean;
            };
          };
        };
        email: {
          notificaitons?: {
            server: {
              new?: boolean;
              offline?: boolean;
            };
          };
        };
      };
      /** @description Information about the membership as it pertains to the account holders affiliation with being a Cycle employee. Cycle employee accounts do not consume a "membership" for a given hub. */
      cycle?: {
        /** @description The ID of the employee this membership is associated with. */
        employee_id: string;
      };
      meta?: components["schemas"]["HubMembershipMeta"];
    };
    /**
     * Events 
     * @description Cycle resources usually contain an events field, the event being the key and a formatted time string being the value.
     */
    Events: {
      [key: string]: components["schemas"]["DateTime"] | undefined;
    };
    /**
     * PublicAccount 
     * @description Publicly available information about an account
     */
    PublicAccount: {
      /**
       * AccountName 
       * @description The first and last name of an account owner
       */
      name: {
        /** @description The first name of the account owner */
        first: string;
        /** @description The last name of the account owner */
        last: string;
      };
      /**
       * AccountEmail 
       * @description Email information for an account
       */
      email: {
        /** @description The email address */
        address: string;
        /** @description A boolean representing if the email has been verified */
        verified: boolean;
        added: components["schemas"]["DateTime"];
      };
      /**
       * AccountId 
       * @description Id information for an account
       */
      id: string;
      events?: components["schemas"]["Events"] & {
        last_login?: components["schemas"]["DateTime"];
      };
    };
    /**
     * Identifier 
     * @description A human-readable identifier used to refer to a resource, where using the official ID may be inconvenient.
     * The identifier is automatically tokenized from the name/relevant field of the resource if one is not provided. For example, a container named "My Container" will
     * have the identifier of `my-container` and is automatically created by the platform.
     * 
     * The identifier does not have to be unique.
     */
    Identifier: string;
    /**
     * CreatorScope 
     * @description The creator scope is embedded in resource objects to describe who created them
     */
    CreatorScope: {
      id: components["schemas"]["ID"];
      /** @enum {string} */
      type: "account" | "environment" | "platform" | "platform-pipeline" | "employee" | "api-key" | "visitor";
    };
    /** HubState */
    HubState: ({
      /**
       * @description The current state of the hub. 
       * @enum {string}
       */
      current: "new" | "configuring" | "live" | "inactive" | "deleting" | "deleted";
    }) & components["schemas"]["State"];
    /**
     * HubIntegrations 
     * @description Integration information for a given hub.
     */
    HubIntegrations: {
      /** @description A hub integration with Lets Encrypt service. */
      letsencrypt: {
        /** @description An email address to assocaite with Lets Encrypt certificates generated for DNS records on this hub. */
        email: string;
      } | null;
      /** @description Information about the Backblaze account and bucket assocaited with the given hub. */
      backblaze_b2: {
        /** @description The bucket name. */
        bucket: string;
        /** @description The `key_id` from Backblaze for a given key ( the one used for this integration ). */
        key_id: string;
        /** @description The key associated with the bucket. */
        key: string;
      } | null;
    };
    /**
     * BillingTerm 
     * @description Information about a billing term.
     */
    Term: {
      /** @description A timestamp describing the start of a billing term. */
      start: components["schemas"]["DateTime"];
      /** @description A timestamp describing the end of a billing term. */
      end: components["schemas"]["DateTime"];
      /**
       * @description The term renewal period. 
       * @enum {string|null}
       */
      renew: "once" | "monthly" | "yearly" | null;
    };
    /**
     * HubBillingProfile 
     * @description A billing profile for a given hub.
     */
    HubBillingProfile: {
      term: components["schemas"]["Term"];
      /** @description A boolean where true represents this account being approved to use a prepaid card for billing transactions. */
      allow_prepaid?: boolean;
      /** @description A boolean where true represents invoices have been paused on this hub for one reason or another. */
      pause_invoices: boolean;
      /** @description A boolean where true means this billing is disabled on this hub. */
      disable?: boolean;
      /** @description Information about the plan associated with this hub. */
      plans: {
        /** @description An ID referencing the pricing tier applied to this hub. */
        tier_id: string;
        /** @description An ID referencing the support plan applied to this hub. */
        support_id: string;
      };
      /** @description An array of email addresses to whom the billing invoices will be sent to. If left empty, they will be sent to the owner of this hub. */
      emails: (string)[] | null;
    };
    /**
     * HubsMeta 
     * @description A list of meta fields that can be applied to a hub.
     */
    HubMeta: {
      membership?: components["schemas"]["HubMembership"];
    };
    /**
     * Hub 
     * @description A hub resource.
     */
    Hub: {
      id: components["schemas"]["ID"];
      /** @description A human readable slugged identifier for this hub. */
      identifier: components["schemas"]["Identifier"];
      /** @description A name for the hub. */
      name: string;
      creator: components["schemas"]["CreatorScope"];
      /**
       * HubEvents 
       * @description A collection of timestamps for each event in the hub's lifetime.
       */
      events: {
        /** @description The timestamp of when the hub was created. */
        created: components["schemas"]["DateTime"];
        /** @description The timestamp of when the hub was updated. */
        updated: components["schemas"]["DateTime"];
        /** @description The timestamp of when the hub was deleted. */
        deleted: components["schemas"]["DateTime"];
        /** @description The timestamp of when the hub had the first converted */
        converted?: components["schemas"]["DateTime"];
        /** @description The timestamp of when the hub had the first provider added. */
        first_provider?: components["schemas"]["DateTime"];
        /** @description The timestamp of when the hub had the first_server deployed. */
        first_server?: components["schemas"]["DateTime"];
        /** @description The timestamp of when the hub had the first environment deployed. */
        first_environment?: components["schemas"]["DateTime"];
        /** @description The timestamp of when the hub had the first image deployed. */
        first_image?: components["schemas"]["DateTime"];
        /** @description The timestamp of when the hub had the first container deployed. */
        first_container?: components["schemas"]["DateTime"];
      };
      state: components["schemas"]["HubState"];
      integrations: components["schemas"]["HubIntegrations"];
      /** @description All hub webhooks for the given hub. */
      webhooks: {
        /** @description A webhook to report information to each time a server is deployed on the given hub. */
        server_deployed: string | null;
      };
      billing: components["schemas"]["HubBillingProfile"] | null;
      meta?: components["schemas"]["HubMeta"];
    };
    /**
     * HubMembershipsIncludes 
     * @description A resource thats associated with a hub membershp.
     */
    HubMembershipIncludes: {
      /** @description A record with an ID mapped to a public account for the account that sent this memberships initial invite. */
      senders?: {
        /** @description A record with an ID mapped to a public account. */
        accounts?: {
          [key: string]: components["schemas"]["PublicAccount"] | undefined;
        };
      };
      /** @description A record with an ID mapped to a public account. */
      accounts?: {
        [key: string]: components["schemas"]["PublicAccount"] | undefined;
      };
      /** @description A record with an ID mapped to a hub resource. */
      hubs?: {
        [key: string]: components["schemas"]["Hub"] | undefined;
      };
    };
    /**
     * AccountInfo 
     * @description Information about a given account.
     */
    AccountInfo: {
      id: components["schemas"]["ID"];
      /** @description The IP of the computer used during login. */
      ip: string;
    };
    /**
     * BaseLogin 
     * @description A login event resource.
     */
    Login: {
      id: components["schemas"]["ID"];
      account: components["schemas"]["AccountInfo"];
      /** @description A timestamp of the time the login occurred. */
      time: components["schemas"]["DateTime"];
      /**
       * @description The type of login mechanism used. 
       * @enum {string}
       */
      type: "password" | "employee";
      /** @description A boolean where true reflects that the login was successful. */
      success: boolean;
    };
    /**
     * AccountEmployeeLogin 
     * @description A login event where the authentication mechanism was an employee login.
     */
    EmployeeLogin: components["schemas"]["Account"] & components["schemas"]["Login"];
    /**
     * AccountPasswordLogin 
     * @description A login event where the account password was the authentication type.
     */
    PasswordLogin: {
      id: components["schemas"]["ID"];
      account: components["schemas"]["AccountInfo"];
      /** @description A timestamp of the time the login occurred. */
      time: components["schemas"]["DateTime"];
      /**
       * @description The type of login mechanism used. 
       * @enum {string}
       */
      type: "password";
      /** @description A boolean where true reflects that the login was successful. */
      success: boolean;
    };
    /** TwoFaDisableResponse */
    TwoFaDisableResponse: {
      qr: string;
      secret: string;
    };
    /** TwoFaSetupResponse */
    TwoFaSetupResponse: {
      recovery_codes: (string)[];
      totp_passcode: string;
    };
    /**
     * AnnoucementUpdate 
     * @description An update to an existing announcement.
     */
    Update: {
      id: components["schemas"]["ID"];
      /** @description The text describing the update to the announcement. */
      message: string;
      creator: components["schemas"]["CreatorScope"];
      /** @description A timestamp of when the update took place. */
      time: components["schemas"]["DateTime"];
    };
    /**
     * NativeProviderIdentifier 
     * @description An identifier for the provider 
     * @enum {string}
     */
    NativeProviderIdentifier: "equinix-metal" | "coreweave" | "vultr" | "hivelocity" | "aws" | "azure" | "gcp" | "digitalocean";
    /**
     * Announcement 
     * @description An announcement from the Cycle team that has something to do with the current or future state of the platform.
     */
    Announcement: {
      id: components["schemas"]["ID"];
      /** @description A description of the event being announced. */
      title: string;
      /** @description A description of the announcement */
      description: string;
      updates: (components["schemas"]["Update"])[];
      affected_providers?: (components["schemas"]["NativeProviderIdentifier"])[];
      state: ({
        /**
         * @description The current state of the method. 
         * @enum {string}
         */
        current: "live" | "deleting" | "deleted";
      }) & components["schemas"]["State"];
      /**
       * @description The priority or severity of the announcement. 
       * @enum {string}
       */
      priority: "notice" | "low" | "medium" | "high" | "severe";
      /**
       * AnnouncementEvents 
       * @description A collection of timestamps for each event in the announcement's lifetime.
       */
      events: {
        /** @description The timestamp of when the announcement was created. */
        created: components["schemas"]["DateTime"];
        /** @description The timestamp of when the announcement was updated. */
        updated: components["schemas"]["DateTime"];
        /** @description The timestamp of when the announcement was deleted. */
        deleted: components["schemas"]["DateTime"];
        /** @description The timestamp of when the announcement was resolved. */
        resolved: components["schemas"]["DateTime"];
      };
    };
    /**
     * UserScope 
     * @description A type of creator and a matching identifier.
     */
    UserScope: {
      /**
       * @description The type of user that created the resource. 
       * @enum {string}
       */
      type: "account" | "environment" | "platform" | "platform-pipeline" | "employee" | "api-key" | "visitor";
      id: components["schemas"]["ID"];
    };
    /**
     * BillingAmount 
     * @description An object holding information about term and amount that relates to a specific billing component.
     */
    BillingAmount: {
      /** @description 1/10th of a cent. */
      mills: number;
      /**
       * @description The length of the term. 
       * @enum {string}
       */
      term: "once" | "monthly" | "yearly";
    };
    /**
     * ItemPlan 
     * @description Information for an item's plan.
     */
    ServiceItem: {
      /** @description Information about the support component of the billing item. */
      support?: {
        id: components["schemas"]["ID"];
        /** @description The support contract name. */
        name: string;
        /** @description The price of the support contract (monthly). */
        price: number;
      };
      /** @description Information about the tier component of the billing item. */
      tier?: {
        id: components["schemas"]["ID"];
        /** @description The support contract name. */
        name: string;
        price: components["schemas"]["BillingAmount"];
      };
    };
    /**
     * OrderItem 
     * @description Describes a billing item
     */
    OrderItem: {
      id: string;
      service: components["schemas"]["ServiceItem"];
      description: string;
      price: components["schemas"]["BillingAmount"];
      discount?: {
        id: string;
        amount: components["schemas"]["BillingAmount"];
        expires: components["schemas"]["DateTime"];
      };
      net_price: number;
    };
    /** OrderState */
    OrderState: ({
      /**
       * @description The current state of the zone. 
       * @enum {string}
       */
      current: "new" | "processed" | "deleting" | "deleted";
    }) & components["schemas"]["State"];
    /**
     * Order 
     * @description An order is a resource that describes a billing order
     */
    Order: {
      hub_id: string;
      creator: components["schemas"]["UserScope"];
      promo_code_id: string | null;
      term: components["schemas"]["Term"];
      approved: boolean;
      items: (components["schemas"]["OrderItem"])[];
      total_price: number;
      /**
       * OrderEvents 
       * @description A collection of timestamps for each event in the orders lifetime.
       */
      events: {
        /** @description The timestamp of when the order expires. */
        expires: components["schemas"]["DateTime"];
      };
      state: components["schemas"]["OrderState"];
    };
    /**
     * PromoCode 
     * @description A billing promo code.
     */
    PromoCode: {
      /** @description The promo "code". */
      code: string;
      /** @description The amount of credit the promo code offers. */
      credit: ({
        [key: string]: {
          amount?: components["schemas"]["BillingAmount"];
          expires?: components["schemas"]["DateTime"];
        } | undefined;
      }) | null;
      /** PromoCodeState */
      state: ({
        /**
         * @description The current state of the promo code. 
         * @enum {string}
         */
        current: "live" | "deleted";
      }) & components["schemas"]["State"];
    };
    /**
     * PromoCodeIncludes 
     * @description A resource thats associated with a promo code.
     */
    PromoCodeInclude: {
      [key: string]: components["schemas"]["PromoCode"] | undefined;
    };
    /**
     * BillingOrderIncludes 
     * @description All includeable resources linkable to the given billing order.
     */
    OrderIncludes: {
      promo_codes?: components["schemas"]["PromoCodeInclude"];
    };
    /**
     * BillingOrder 
     * @description Information about an order.
     */
    BillingOrder: {
      id: components["schemas"]["ID"];
      hub_id: components["schemas"]["HubID"];
      creator: components["schemas"]["CreatorScope"];
      /** @description An ID associated with a promo code used with the order. */
      promo_code_id: string | null;
      term: components["schemas"]["Term"];
      /** @description A boolean where true represents the order is approved to be paid by the user. */
      approved: boolean;
      items: (components["schemas"]["ServiceItem"])[];
      /** @description 1/10th of a cent. */
      total_price: number;
      /**
       * BillingOrderEvents 
       * @description A collection of timestamps for each event in the billing order's lifetime.
       */
      events: {
        /** @description The timestamp of when the billing order was created. */
        created: components["schemas"]["DateTime"];
        /** @description The timestamp of when the billing order was updated. */
        updated: components["schemas"]["DateTime"];
        /** @description The timestamp of when the billing order was deleted. */
        deleted: components["schemas"]["DateTime"];
        /** @description The timestamp of when the billing order expires. */
        expires: components["schemas"]["DateTime"];
      };
      state: ({
        /**
         * @description The current state of the order. 
         * @enum {string}
         */
        current: "new" | "processed" | "deleting" | "deleted";
      }) & components["schemas"]["State"];
    };
    /**
     * TaskDescriptor 
     * @description A task descriptor object is returned on success by API calls that create jobs. It contains the action that was requested, as well as the ID of the job created as a result.
     */
    TaskDescriptor: {
      /** @description The action that was taken. */
      action: string;
      /** @description The ID of the job associated with this task. */
      job_id?: string;
      /** @description Contains some basic information about the job associated with this task. */
      job?: {
        /** @description The ID of the job */
        id: string;
        /** @description Describes if the job has been accepted */
        accepted: boolean;
        /** @description Describes the queue this job is a part of. */
        queue: string;
      };
    };
    /**
     * SupportPlanFeatures 
     * @description Information about billing support plan features.
     */
    SupportPlanFeatures: {
      /** @description A boolean where true indicates the contract includes support for engineering. */
      engineering_support: boolean;
      /** @description A boolean where true represents the contract has an uptime SLA agreement. */
      uptime_sla: boolean;
      /** @description The time in which this support contract guarantees response time. */
      guaranteed_response_time: string | null;
    };
    /**
     * SupportPlan 
     * @description Information about a billing support plan.
     */
    SupportPlan: {
      /** @description The name of the support plan. */
      name: string;
      price: components["schemas"]["BillingAmount"];
      /** @description Information about the billing support plan that describes the plan. */
      description: string;
      features: components["schemas"]["SupportPlanFeatures"];
      /** @description A boolean where true represents the plan is a long term contract, not just month to month. */
      contract: boolean;
      /** @description This returns true if it shows up. */
      default: boolean;
    };
    /**
     * BillingServers 
     * @description An object holding information about servers included in Billing tier
     */
    BillingServers: {
      /** @description The number of servers included in the tier price */
      included: number;
      /** @description A boolean indicating if there is a hard server limit on the tier */
      hard_cap: boolean;
      /** @description An object describing the additonal cost of servers exceeding the included server count */
      additional: {
        mills: number;
        /** @enum {string} */
        term: "once" | "monthly" | "yearly";
      };
    };
    /**
     * BillingMembers 
     * @description An object holding information about members included in Billing tier
     */
    BillingMembers: {
      /** @description The number of members included in the tier price */
      included: number;
      /** @description A boolean indicating if there is a hard member limit on the tier */
      hard_cap: boolean;
      /** @description An object describing the additonal cost of members exceeding the included member count */
      additional: {
        mills: number;
        /** @enum {string} */
        term: "once" | "monthly" | "yearly";
      };
    };
    /**
     * BillingRam 
     * @description An object holding information about servers included in Billing tier
     */
    BillingRam: {
      /** @description The GB of image storage included in tier */
      included_gb: number;
      /** @description Additional cost for image storage exceeding included_gb */
      additional_gb: {
        mills: number;
        /** @enum {string} */
        term: "once" | "monthly" | "yearly";
      };
      /** @description A boolean indicating if there is a hard limit on the image storage */
      hard_cap: boolean;
    };
    /**
     * BillingImageStorage 
     * @description An object holding information about servers included in Billing tier
     */
    BillingImageStorage: {
      /** @description The GB of image storage included in tier */
      included_gb: number;
      /** @description Additional cost for image storage exceeding included_gb */
      additional_gb: {
        mills: number;
        /** @enum {string} */
        term: "once" | "monthly" | "yearly";
      };
      /** @description A boolean indicating if there is a hard limit on the image storage */
      hard_cap: boolean;
    };
    /**
     * BillingBuilds 
     * @description An object holding information about servers included in Billing tier
     */
    BillingBuilds: {
      parallel: number;
      /** @description The number of CPU Cores availiable for builds */
      cpu_cores: number;
      /** @description The amount of RAM availiable for builds */
      ram_gb: number;
      /** @description The maximum number of builds processed per day */
      max_daily_builds: number | null;
    };
    /**
     * TierPlan 
     * @description A TierPlan object describes the attributes of a subscription tier
     */
    TierPlan: {
      id: string;
      name: string;
      code: string;
      generation: number;
      usable: boolean;
      price: components["schemas"]["BillingAmount"];
      servers: components["schemas"]["BillingServers"];
      members: components["schemas"]["BillingMembers"];
      max_nodes: number | null;
      max_members: number | null;
      advanced_features: {
        gpu: boolean;
        ial: boolean;
      };
      max_daily_api_requests: number | null;
      ram: components["schemas"]["BillingRam"];
      image_storage: components["schemas"]["BillingImageStorage"];
      builds: components["schemas"]["BillingBuilds"];
      hidden: boolean;
      description: string;
    };
    /**
     * BillingMethodAddress 
     * @description Address information for a given billing method.
     */
    Address: {
      /** @description The country this billing method is associated with. */
      country: string;
      /** @description The zip code this billing method is associated with. */
      zip: string;
    };
    /**
     * BillingMethodExpiration 
     * @description Expiration information for a billing method
     */
    BillingMethodExpiration: {
      /** @description The month the billing method expires. */
      month: number;
      /** @description The year the billing method expires. */
      year: number;
    };
    /**
     * CreditCard 
     * @description Information about a credit card.
     */
    CreditCard: {
      /** @description A name associated with the credit cards usage. */
      name: string;
      /** @description The brand of card - ex VISA. */
      brand: string;
      expiration: components["schemas"]["BillingMethodExpiration"];
      /** @description The last 4 digits of the card. */
      last_4: string;
    };
    /**
     * BillingMethod 
     * @description Information about a billing method, usable to pay invoices.
     */
    Method: {
      id: components["schemas"]["ID"];
      /** @description A name for the billing method. */
      name: string;
      /** @description A boolean where true represents this billing method is set to primary for a given hub. */
      primary: boolean;
      address: components["schemas"]["Address"];
      creator: components["schemas"]["CreatorScope"];
      credit_card: components["schemas"]["CreditCard"];
      state: ({
        /**
         * @description The current state of the method. 
         * @enum {string}
         */
        current: "live" | "deleting" | "deleted";
      }) & components["schemas"]["State"];
      /**
       * CreditCardEvents 
       * @description A collection of timestamps for each event in the credit card's lifetime.
       */
      events: {
        /** @description The timestamp of when the credit card was created. */
        created: components["schemas"]["DateTime"];
        /** @description The timestamp of when the credit card was updated. */
        updated: components["schemas"]["DateTime"];
        /** @description The timestamp of when the credit card was deleted. */
        deleted: components["schemas"]["DateTime"];
      };
    };
    /**
     * BillingSummary 
     * @description A billing summary.
     */
    BillingSummary: {
      /** @description The ID of the billing service, the summary pertains to. */
      service_id: string;
      /** @description The billing summary title. */
      title: string;
      /**
       * @description The plan type. 
       * @enum {string}
       */
      type: "tier" | "support";
      term: components["schemas"]["Term"];
      /** @description 1/10th of a cent. */
      price: string;
      /** @description 1/10th of a cent. */
      discount: string;
    };
    /**
     * PaymentGateway 
     * @description The type of payment gateway used. 
     * @enum {string}
     */
    PaymentGateway: "stripe";
    /**
     * BillingRefund 
     * @description A billing refund.
     */
    Refund: {
      id: components["schemas"]["ID"];
      /** @description A timestamp for the payment. */
      time: components["schemas"]["DateTime"];
      /** @description Some information about the payment refund. */
      description: string;
      /** @description 1/10th of a cent. */
      amount: number;
      gateway: components["schemas"]["PaymentGateway"];
    };
    /**
     * PaymentResult 
     * @description A billing payment result.
     */
    PaymentResult: {
      /** @description A boolean where true represents the success of the payment. */
      success: boolean;
      /** @description A description of the error that took place. */
      error: string;
    };
    /**
     * BillingPayment 
     * @description A billing payment.
     */
    Payment: {
      id: components["schemas"]["ID"];
      /** @description A timestamp for the payment. */
      time: components["schemas"]["DateTime"];
      /** @description Some information about the payment. */
      description: string;
      /** @description 1/10th of a cent. */
      amount: number;
      /** @description 1/10th of a cent. */
      amount_refunded: number;
      refunds: (components["schemas"]["Refund"])[];
      /** @description The ID associated with the billing method used. */
      method_id: string;
      result: components["schemas"]["PaymentResult"];
      gateway: components["schemas"]["PaymentGateway"];
    };
    /**
     * BillingInvoiceCredit 
     * @description A billing credit for a specific invoice.
     */
    InvoiceCredit: {
      id: components["schemas"]["ID"];
      /** @description Credit associated with an invoice. */
      associated_credit: {
        id: components["schemas"]["ID"];
        /** @description The amount of the credit. */
        amount: number;
      };
      /** @description A timestamp for when the invoice credit was created. */
      time: components["schemas"]["DateTime"];
      /** @description A description of the invoice credit. */
      description: string;
      /** @description The amount of credit for the invoice. */
      amount: number;
    };
    /**
     * LateFee 
     * @description A late fee, applied to an invoice.
     */
    LateFee: {
      id: components["schemas"]["ID"];
      /** @description A timestamp of when the late fee was created. */
      time: components["schemas"]["DateTime"];
      /** @description A description of the late fee. */
      description: string;
      /** @description 1/10th of a cent. */
      amount: number;
    };
    /** InvoiceState */
    InvoiceState: ({
      /**
       * @description The current state of the container. 
       * @enum {string}
       */
      current: "new" | "billing" | "billed" | "processing" | "partially-paid" | "paid" | "refunding" | "refunded" | "crediting" | "credited" | "voiding" | "voided" | "uncollectible";
    }) & components["schemas"]["State"];
    /**
     * InvoiceMeta 
     * @description A list of meta fields that can be applied to a invoice.
     */
    InvoiceMeta: {
      /** @description The amount due for a given invoice. */
      due?: number;
    };
    /**
     * BillingInvoice 
     * @description Information about a billing invoice.
     */
    Invoice: {
      id: components["schemas"]["ID"];
      hub_id: components["schemas"]["HubID"];
      /** @description A boolean where true represents the invoice is approved for collection. */
      approved: boolean;
      services: (components["schemas"]["BillingSummary"])[];
      payments: (components["schemas"]["Payment"])[];
      credits: (components["schemas"]["InvoiceCredit"])[];
      late_fees: components["schemas"]["LateFee"];
      /** @description The amount in charges generated through the licesnse agreement + overages for the billing period covered by the invoice. */
      charges: number;
      /** @description A timestamp of when the invoice is due to be paid. */
      due: components["schemas"]["DateTime"];
      /** @description A timestamp of when the invoice is overdue. */
      overdue: components["schemas"]["DateTime"];
      /**
       * BillingOrderEvents 
       * @description A collection of timestamps for each event in the billing order's lifetime.
       */
      events: {
        /** @description The timestamp of when the billing order was created. */
        created: components["schemas"]["DateTime"];
        /** @description The timestamp of when the billing order was updated. */
        updated: components["schemas"]["DateTime"];
        /** @description The timestamp of when the billing order was deleted. */
        deleted: components["schemas"]["DateTime"];
        /** @description The timestamp of when the billing order billed. */
        billed: components["schemas"]["DateTime"];
        /** @description The timestamp of when the billing order paid. */
        paid: components["schemas"]["DateTime"];
        /** @description The timestamp of when the billing order payment was attempted. */
        payment_attempt?: components["schemas"]["DateTime"];
        /** @description The timestamp of when the billing order credited. */
        credited: components["schemas"]["DateTime"];
        /** @description The timestamp of when the billing order voided. */
        voided: components["schemas"]["DateTime"];
      };
      state: components["schemas"]["InvoiceState"];
      meta?: components["schemas"]["InvoiceMeta"];
    };
    /**
     * BillingDiscount 
     * @description Billing discount information.
     */
    Discount: {
      id: components["schemas"]["ID"];
      amount: components["schemas"]["BillingAmount"];
      /** @description A timestamp of when the discount expires. */
      expires: components["schemas"]["DateTime"];
    };
    /** BillingServiceState */
    BillingServiceState: {
      /**
       * @description The current state of the billing service. 
       * @enum {string}
       */
      current: "active";
    } & components["schemas"]["State"];
    /**
     * BillingService 
     * @description Information about billing service.
     */
    Service: {
      id: components["schemas"]["ID"];
      hub_id: components["schemas"]["HubID"];
      creator: components["schemas"]["CreatorScope"];
      /** @description Billing service title. */
      title: string;
      order: components["schemas"]["Order"];
      item: components["schemas"]["ServiceItem"];
      discount: components["schemas"]["Discount"];
      price: components["schemas"]["BillingAmount"];
      term: components["schemas"]["Term"];
      /**
       * BillingServiceEvents 
       * @description A collection of timestamps for each event in the billing service's lifetime.
       */
      events: {
        /** @description The timestamp of when the billing service was created. */
        created: components["schemas"]["DateTime"];
        /** @description The timestamp of when the billing service was updated. */
        updated: components["schemas"]["DateTime"];
        /** @description The timestamp of when the billing service was deleted. */
        deleted: components["schemas"]["DateTime"];
        /** @description The timestamp of when the billing service was last billed. */
        last_billed: components["schemas"]["DateTime"];
      };
      state: components["schemas"]["BillingServiceState"];
    };
    /**
     * BillingOverage 
     * @description Information about billing overage.
     */
    Overage: {
      term: components["schemas"]["Term"];
      /** @description Used for gen 1 pricing. */
      ram: {
        /** @description The number of hours of overage. */
        gb_hours: number;
        /** @description The cost of the overage. */
        cost: number;
      };
    };
    /**
     * BillingCredit.yml 
     * @description Information about a billing credit.
     */
    Credit: {
      id: components["schemas"]["ID"];
      hub_id: components["schemas"]["HubID"];
      /** @description Some extra information about the billing credit. */
      description: string;
      /** @description The account the credit was issued to. */
      account_id: string;
      /** @description The amount of credit. */
      amount: number;
      /** @description The amount of the credit that remains after being applied to invoices. */
      amount_remaining: number;
      /** @description Information on when the billing credit expires. */
      expires: {
        /** @description A timestamp of when the billing credit expires. */
        date?: components["schemas"]["DateTime"];
      } | null;
      /**
       * BillingCreditEvents 
       * @description A collection of timestamps for each event in the billing order's lifetime.
       */
      events: {
        /** @description The timestamp of when the billing order was created. */
        created: components["schemas"]["DateTime"];
        /** @description The timestamp of when the billing order was updated. */
        updated: components["schemas"]["DateTime"];
        /** @description The timestamp of when the billing order was deleted. */
        deleted: components["schemas"]["DateTime"];
      };
      state: ({
        /**
         * @description The current state of the credit. 
         * @enum {string}
         */
        current: "new" | "live" | "expired";
      }) & components["schemas"]["State"];
    };
    /**
     * EnvironmentAbout 
     * @description Contains details regarding the environment.
     */
    EnvironmentAbout: {
      /** @description A custom description for this environment. */
      description: string;
      /** @description If true, this environment has been marked as a favorite. */
      favorite: boolean;
    };
    /** EnvironmentState */
    EnvironmentState: ({
      /**
       * @description The current state of the environment. 
       * @enum {string}
       */
      current: "new" | "live" | "cloning" | "deleting" | "deleted";
    }) & components["schemas"]["State"];
    /**
     * Features 
     * @description An object representing specialized features configured for this environment.
     */
    Features: {
      /** @description Whether or not legacy networking mode is enabled on this environment. */
      legacy_networking: boolean;
    };
    HAProxyConfig: {
      /** @description Settings that describe how incoming traffic to the load balancer is handled. */
      frontend: ({
        /**
         * @description The type of traffic expected by the load balancer for this port. Can be either: 
         *  - tcp: Traffic is forwarded without any parsing or additional manipulation. 
         *  - http: Traffic is treated as web traffic. If a LINKED record is configured for a container exposing this port, the domain will be parsed and it will be forwarded to the proper container. This allows multiple services to run on port 80 in the same environment. 
         * @enum {string}
         */
        mode: "tcp" | "http";
        /** @description The number of simultaneous connections that can be processed at a time. */
        max_connections: number | null;
        /** @description Various options for handling timeouts when communicating with the client. */
        timeouts: ({
          /** @description The number of seconds the load balancer will wait for a response from a client before disconnecting. */
          client_secs: number | null;
          /** @description The number of milliseconds the load balancer will wait for a client to send it data when one direction is already closed. This is particularly useful to avoid keeping connections in a waiting state for too long when clients do not disconnect cleanly. */
          client_fin_ms: number | null;
          /** @description The number of milliseconds the load balancer will wait for a new HTTP request to start coming after a response was set. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.2-timeout%20http-request) for more information. (`http` mode only) */
          http_keep_alive_ms: number | null;
          /** @description The number of milliseconds the load balancer will wait for a complete HTTP request. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.2-timeout%20http-request) for more information. (`http` mode only) */
          http_request_ms: number | null;
        }) | null;
      }) | null;
      /** @description Settings related to how the load balancer routes connections to container instances. */
      backend: ({
        /**
         * @description How connections are balanced across your container instances. Can be one of the following: 
         *  - `roundrobin`: Each container instance is used in turns. 
         *  - `static-rr`: Each container instance is used in turns, but is faster than Round Robin at the expense of being less dynamic. 
         *  - `leastconn`: Routes traffic to the instance with the least number of active connections. 
         *  - `first`: Routes traffic to the first available instance. 
         *  - `source`: The same client IP always reaches the same container instance as long as no instance goes down or up. 
         * @enum {string}
         */
        balance: "roundrobin" | "static-rr" | "leastconn" | "first" | "source";
        /** @description Various options for handling timeouts when communicating with a container instance behind the load balancer. */
        timeouts: ({
          /** @description The number of seconds the load balancer will wait for a response from the container instance. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.2-timeout%20server) for more information. */
          server_secs: number | null;
          /** @description The number of milliseconds the load balancer will wait for the server to send data when one direction is already closed. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-timeout%20server-fin) for more information. */
          server_fin_ms: number | null;
          /** @description The number of milliseconds the load balancer will wait for a successful connection to a container instance. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-timeout%20connect) for more information. */
          connect_ms: number | null;
          /** @description The number of milliseconds the load balancer will hold connections in a queue when the maximum number of connections has been reached. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-timeout%20queue) for more information. */
          queue_ms: number | null;
          /** @description The number of milliseconds the load balancer will allow for inactivity on a bidirectional tunnel. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-timeout%20tunnel) for more information. */
          tunnel_secs: number | null;
        }) | null;
      }) | null;
    };
    /**
     * LoadBalancerEnvironmentService 
     * @description Information about the environments loadbalancer service(s).
     */
    LoadBalancerEnvironmentService: ({
      /** @description Whether or not the loadbalancer service is enabled. */
      enable: boolean;
      /** @description The ID of the loadbalancer service container */
      container_id: string;
      /** @description A boolean representing if this service container is set to high availability mode or not. */
      high_availability: boolean;
      /** @description The config object for the loadbalancer service. */
      config: ({
        /** @description Describes settings that are passed to HAProxy within the load balancer. */
        haproxy: ({
          default: components["schemas"]["HAProxyConfig"];
          ports: {
            [key: string]: components["schemas"]["HAProxyConfig"] | undefined;
          };
        }) | null;
        /** @description Allow / disallow traffic to be routed via IPv4. */
        ipv4: boolean | null;
        /** @description Allow / disallow traffic to be routed via IPv6. */
        ipv6: boolean | null;
      }) | null;
    }) | null;
    /**
     * DiscoveryEnvironmentService 
     * @description Information about the environments discovery service(s).
     */
    DiscoveryEnvironmentService: {
      /** @description Whether or not the discovery service is enabled. */
      enable: boolean;
      /** @description The ID of the discovery service container */
      container_id: string;
      /** @description A boolean representing if this service container is set to high availability mode or not. */
      high_availability: boolean;
      /** @description The config object for the discovery service. */
      config: Record<string, never>;
    } | null;
    /**
     * VpnEnvironmentService 
     * @description Information about the environments vpn service(s).
     */
    VpnEnvironmentService: ({
      /** @description Whether or not the VPN service is enabled. */
      enable: boolean;
      /** @description The ID of the VPN service container */
      container_id: string;
      /** @description A boolean representing if this service container is set to high availability mode or not. */
      high_availability: boolean;
      /** @description The config object for the VPN service. */
      config: ({
        /** @description If true, routes all traffic through the VPN, even non-Cycle traffic. */
        allow_internet: boolean;
        /** @description Auth configuration for the VPN. */
        auth: {
          /** @description A webhook endpoint to hit. Will be passed the login credentials provided to the user, and should return a 200 status if the login is permitted. */
          webhook: string | null;
          /** @description If true, allows any Cycle account with access to the environment to log in to the VPN using their Cycle email and password. */
          cycle_accounts: boolean;
          /** @description If true, allows the custom VPN accounts to log in to the VPN. */
          vpn_accounts?: boolean;
        };
      }) | null;
    }) | null;
    /**
     * EnvironmentServices 
     * @description Service containers run by this environment and their configurations.
     */
    EnvironmentServices: {
      loadbalancer: components["schemas"]["LoadBalancerEnvironmentService"];
      discovery?: components["schemas"]["DiscoveryEnvironmentService"];
      vpn?: components["schemas"]["VpnEnvironmentService"];
    };
    /** IPNet */
    IPNet: {
      /**
       * @description The IP address. 
       * @example fd00::21:0:0:0
       */
      ip: string;
      /**
       * @description The CIDR notation, describing the range of IP addresses. 
       * @example fd00::21:0:0:0/96
       */
      cidr: string;
    };
    /**
     * LegacyNetwork 
     * @description Legacy network information for an environment.
     */
    LegacyNetwork: {
      /** @description The IPv4 subnet Id. */
      subnet: number;
      ipv4: components["schemas"]["IPNet"];
    } | null;
    /** PrivateNetwork */
    PrivateNetwork: {
      /** @description The vxlan tag added to each packet to help identify the network. */
      vxlan_tag: number;
      /** @description The subnet ID. */
      subnet: string;
      ipv6: components["schemas"]["IPNet"];
      legacy: components["schemas"]["LegacyNetwork"];
    } | null;
    /**
     * ResourceCountSummary 
     * @description A summary of resources by state 
     * @example {
     *   "state": {
     *     "new": 0,
     *     "starting": 0,
     *     "running": 5,
     *     "stopping": 0,
     *     "deleting": 0,
     *     "deleted": 0
     *   },
     *   "total": 5,
     *   "available": 5
     * }
     */
    StateCountSummary: {
      /**
       * CountsByState 
       * @description A count of this resource, grouped by state.
       */
      state: {
        [key: string]: number | undefined;
      };
      /** @description The total number of this resource */
      total: number;
      /** @description The total number of this resource available, less any deleted ones. */
      available: number;
    };
    /** ContainerState */
    ContainerState: ({
      /**
       * @description The current state of the container. 
       * @enum {string}
       */
      current: "new" | "starting" | "running" | "stopping" | "stopped" | "deleting" | "deleted";
      /**
       * @description The desired state of the container. 
       * @enum {string}
       */
      desired?: "new" | "starting" | "running" | "stopping" | "stopped" | "deleting" | "deleted";
    }) & components["schemas"]["State"];
    /**
     * ContainerImageSummary 
     * @description The Id of the image and information on if it is a service.
     */
    ContainerImageSummary: {
      id: components["schemas"]["ID"];
      /**
       * @description If this image is a service container this will say either `discovery` | `loadbalancer` | `vpn`. 
       * @enum {string|null}
       */
      service: "discovery" | "loadbalancer" | "vpn" | null;
    };
    /**
     * ContainerEnvironmentSummary 
     * @description A summary of supplemental environment and network information specific to a container.
     */
    ContainerEnvironmentSummary: {
      id: components["schemas"]["ID"];
      /** @description The cluster this environment is associated with. */
      cluster: string;
      /** @description The private network subnet ID for this container and its instances. */
      container_subnet: string;
      ipv6: components["schemas"]["IPNet"];
      legacy: components["schemas"]["LegacyNetwork"];
    };
    /**
     * ContainerSummary 
     * @description Contains useful and relevant data/statistics for a container that would otherwise be several separate API calls.
     */
    ContainerSummary: {
      id: components["schemas"]["ID"];
      /** @description A user defined name for the container resource. */
      name: string;
      state: components["schemas"]["ContainerState"];
      image: components["schemas"]["ContainerImageSummary"];
      environment: components["schemas"]["ContainerEnvironmentSummary"];
    };
    /**
     * EnvironmentMeta 
     * @description A list of meta fields that can be applied to this environment.
     */
    EnvironmentMeta: {
      containers_count?: components["schemas"]["StateCountSummary"];
      instances_count?: components["schemas"]["StateCountSummary"];
      containers?: (components["schemas"]["ContainerSummary"])[];
    };
    /**
     * Environment 
     * @description Environments are groups of containers with a private network built between them. For more information on environments, see the [main docs](https://docs.cycle.io/environments/overview/).
     */
    Environment: {
      id: components["schemas"]["ID"];
      /** @description A human readable slugged identifier for this environment. */
      identifier: components["schemas"]["Identifier"];
      /** @description A user defined name for the environment resource. */
      name: string;
      /** @description The cluster this environment is associated with. */
      cluster: string;
      about: components["schemas"]["EnvironmentAbout"];
      creator: components["schemas"]["CreatorScope"];
      hub_id: components["schemas"]["HubID"];
      state: components["schemas"]["EnvironmentState"];
      /**
       * EnvironmentEvents 
       * @description A collection of timestamps for each event in the environment's lifetime.
       */
      events: {
        /** @description The timestamp of when the environment was created. */
        created: components["schemas"]["DateTime"];
        /** @description The timestamp of when the environment was updated. */
        updated: components["schemas"]["DateTime"];
        /** @description The timestamp of when the environment was deleted. */
        deleted: components["schemas"]["DateTime"];
      };
      features: components["schemas"]["Features"];
      services: components["schemas"]["EnvironmentServices"];
      private_network: components["schemas"]["PrivateNetwork"];
      meta?: components["schemas"]["EnvironmentMeta"];
    };
    /**
     * Permissions 
     * @description Permissions information for an API Key
     */
    Permissions: {
      /** @description A boolean, where true represents this API key is authorized to make requests that involve all of a hubs environments */
      all_environments: boolean;
      /**
       * EnvironmentPermission 
       * @description An environment ID and a boolean representing management configuration for an API key
       */
      environments: ({
          id: components["schemas"]["ID"];
          /** @description A boolean, where true represents the API keys ability to make changes to the environment components */
          manage: boolean;
        })[];
    };
    /**
     * ApiKeyCreator 
     * @description An extended resource that has information on a Cycle hub API key
     */
    ApiKeyCreator: {
      id: components["schemas"]["ID"];
      /** @description The name of the API key */
      name: string;
      hub_id: components["schemas"]["ID"];
      /** @description The API key secret */
      secret?: string;
      permissions: components["schemas"]["Permissions"];
      /** @description The API key capabilities list */
      capabilities: {
        all: boolean;
        specific: (string)[];
      };
      ips: (string)[] | null;
      state: ({
        /** @enum {string} */
        current: "live" | "deleting" | "deleted";
      }) & components["schemas"]["State"];
      events: components["schemas"]["Events"];
    };
    /**
     * CreatorInclude 
     * @description An identity that created a resource.
     */
    CreatorInclude: {
      /** @description Included creators that are public accounts, keyed by ID. */
      accounts?: {
        [key: string]: components["schemas"]["PublicAccount"] | undefined;
      };
      /**
       * @description Included creators that are employees of Cycle, keyed by ID. 
       * @example null
       */
      employees?: {
        [key: string]: components["schemas"]["PublicAccount"] | undefined;
      };
      /**
       * @description Included creators that are not Cycle accounts, keyed by ID. 
       * @example null
       */
      visitors?: {
        [key: string]: components["schemas"]["PublicAccount"] | undefined;
      };
      /**
       * @description Included creators that are Cycle environments (usually automatically created resources), keyed by ID. 
       * @example null
       */
      environments?: {
        [key: string]: components["schemas"]["Environment"] | undefined;
      };
      /**
       * @description Included creators that are Cycle API Keys, keyed by ID. 
       * @example null
       */
      api_keys?: {
        [key: string]: components["schemas"]["ApiKeyCreator"] | undefined;
      };
    };
    /**
     * EnvironmentServiceContainerSummary 
     * @description An object containing information about a service container associated with this environment.
     */
    EnvironmentServiceContainerSummary: {
      /** @description Whether or not the service is enabled. */
      enable: boolean;
      container_id: components["schemas"]["ID"];
      state: components["schemas"]["ContainerState"];
      /** @description Whether or not the service is deployed in high availability */
      high_availability: boolean;
    };
    /**
     * EnvironmentSummary 
     * @description Contains useful and relevant data/statistics for an environment that would otherwise be several separate API calls.
     */
    EnvironmentSummary: {
      id: components["schemas"]["ID"];
      state: components["schemas"]["EnvironmentState"];
      /**
       * EnvironmentServiceSummary 
       * @description An object containing information about the service containers associated with this container. Each key is the name of a service, one of `discovery`, `vpn`, or `loadbalancer`.
       */
      services: {
        loadbalancer: components["schemas"]["EnvironmentServiceContainerSummary"];
        discovery: components["schemas"]["EnvironmentServiceContainerSummary"];
        vpn: components["schemas"]["EnvironmentServiceContainerSummary"];
      };
      /**
       * EnvironmentSummaryStats 
       * @description Statistics about the containers and instances associated with this environment.
       */
      stats: {
        containers: components["schemas"]["StateCountSummary"];
        instances: components["schemas"]["StateCountSummary"];
      };
    };
    /**
     * LoadBalancerInfoReturn 
     * @description Information about an environments load balancer configuration, state, and availability settings.
     */
    LoadBalancerInfoReturn: {
      /** @description The default configuration of the load balancer. */
      default_config: {
        /** @description Describes settings that are passed to HAProxy within the load balancer. */
        haproxy?: {
          default: components["schemas"]["HAProxyConfig"];
          ports: components["schemas"]["HAProxyConfig"];
        } | null;
        /** @description Allow / disallow traffic to be routed via IPv4. */
        ipv4?: boolean | null;
        /** @description Allow / disallow traffic to be routed via IPv6. */
        ipv6?: boolean | null;
      };
      /** @description Contains information about the status of the load balancer, as well as configuration overrides. */
      service: {
        /** @description Whether or not the loadbalancer service is enabled. */
        enable: boolean;
        /** @description The ID of the loadbalancer service container */
        container_id: string;
        /** @description A boolean representing if this service container is set to high availability mode or not. */
        high_availability: boolean;
        /** @description Contains custom configuration overrides for the load balancer. If null, the default config will be used. */
        config?: {
          /** @description Describes settings that are passed to HAProxy within the load balancer. */
          haproxy?: {
            default: components["schemas"]["HAProxyConfig"];
            ports: components["schemas"]["HAProxyConfig"];
          } | null;
          /** @description Allow / disallow traffic to be routed via IPv4. */
          ipv4?: boolean | null;
          /** @description Allow / disallow traffic to be routed via IPv6. */
          ipv6?: boolean | null;
        };
      };
    };
    /**
     * VPNInfo 
     * @description A summary of a VPN service for a given environment.
     */
    VPNInfoReturn: {
      /** @description A url associated with the VPN service. */
      url: string;
      service: components["schemas"]["VpnEnvironmentService"];
    };
    /**
     * VPNLogin 
     * @description A VPN login event record.
     */
    VPNLogin: {
      id: components["schemas"]["ID"];
      /** @description The username used when logging in. */
      username: string;
      /** @description The ID of the environment the VPN service is in. */
      environment_id: string;
      /** @description The IP address of the machine the user has logged in from. */
      ip: string;
      /** @description The timestamp for when the login occured. */
      time: components["schemas"]["DateTime"];
      /** @description A boolean where true means the login attempt was successful. */
      success: boolean;
    };
    /**
     * VPNUser 
     * @description A VPN user for a given VPN.
     */
    VPNUsers: {
      id: components["schemas"]["ID"];
      /** @description The username for the login. */
      username: string;
      creator: components["schemas"]["CreatorScope"];
      /** @description A timestamp of the last time the user logged into the VPN. */
      last_login: components["schemas"]["DateTime"];
      hub_id: components["schemas"]["HubID"];
      /** @description An identifier for the environment the VPN service is associated with. */
      environment_id: string;
      /**
       * VPNUserEvents 
       * @description A collection of timestamps for each event in the VPN user's lifetime.
       */
      events: {
        /** @description The timestamp of when the VPN user was created. */
        created: components["schemas"]["DateTime"];
        /** @description The timestamp of when the VPN user was updated. */
        updated: components["schemas"]["DateTime"];
        /** @description The timestamp of when the VPN user was deleted. */
        deleted: components["schemas"]["DateTime"];
      };
    };
    /**
     * InstanceTelemetryPoint 
     * @description A point-in-time snapshot of a count of instances by state.
     */
    InstanceTelemetryPoint: {
      /** @description A timestamp for when the data was collected. */
      time: components["schemas"]["DateTime"];
      /** @description Records for instance state and number of instances in that state. */
      instances: {
        [key: string]: number | undefined;
      };
    };
    /**
     * ScopedVariableScope 
     * @description Information about the assignment of the scoped variable and how it is invoked.
     */
    ScopedVariableScope: {
      /** @description The type or way the scoped variable is accessed. */
      access: {
        /** @description A boolean, where true represents this scoped variable is accessed like a normal environment variable. */
        env_variable: boolean;
        /** @description A boolean, where true represents this scoped variable is accessed through Cycle's internal API. */
        internal_api: boolean;
        /** @description A boolean, where true represents this scoped variables is accessed as a file located at `/var/run/cycle/variables/<identifier>` */
        file?: boolean;
      };
      /** @description Information about the assignment of the scoped variable to different containers in the environment. */
      containers: {
        /** @description A boolean where true represents the scoped variables is globally assigned to all current and future containers in the environment. */
        global: boolean;
        /** @description An array of container IDs, where each container identified will have access to the scoped variable. */
        ids: (string)[];
        /** @description An array of container identifiers, where each container identfied will have access to the scoped variable. */
        identifiers: (string)[];
      };
    };
    /**
     * URLScopedVariableSource 
     * @description The `URL` type of scoped variable `value`, referred to as a source. This means the value of this variable is the result of calling the given URL. It is dynamic, in that Cycle will refetch the contents on every start.
     */
    URLSource: {
      /**
       * @description The type of source value, can be either `raw` or `url`. 
       * @enum {string}
       */
      type: "url";
      details: {
        /** @description The URL to call to produce the value. */
        url: string;
      };
    };
    /**
     * RawScopedVariableSource 
     * @description The `raw` type of scoped variable `value`, referred to as a source.  This means that the value is static, not the result of a call to an external or internal URL.
     */
    RawSource: {
      /**
       * @description The type of source value, can be either `raw` or `url`. 
       * @enum {string}
       */
      type: "raw";
      details: {
        /** @description The value of the source. */
        string: string;
        /** @description A boolean where true represents the text the user is entering will be multi line. */
        blob: boolean;
      };
    };
    /** ScopedVariableState */
    ScopedVariableState: ({
      /**
       * @description The current state of the scoped variable. 
       * @enum {string}
       */
      current: "live" | "deleting" | "deleted";
    }) & components["schemas"]["State"];
    /**
     * ScopedVariable 
     * @description Scoped variables are a way for users to dynamically allocate runtime specific environment variables across any number of containers in an environment.
     */
    ScopedVariable: {
      id: components["schemas"]["ID"];
      creator: components["schemas"]["CreatorScope"];
      hub_id: components["schemas"]["HubID"];
      /** @description An identifier used to reference the environment this resource is scoped to. */
      environment_id: string;
      /** @description An identifier, similar to a key in an environment variable.  Its used when envoking the scoped variable. */
      identifier: string;
      /** @description An object with information about the encryption of the scoped variable. */
      secret: {
        /** @description A boolean where true means the scoped variables value is encrypted. */
        encrypted: boolean;
        /** @description A hint for the decryption password. */
        hint?: string;
      } | null;
      scope: components["schemas"]["ScopedVariableScope"];
      /** @description The source or value of the scoped variable. */
      source: components["schemas"]["URLSource"] | components["schemas"]["RawSource"];
      state: components["schemas"]["ScopedVariableState"];
      /**
       * ScopedVariableEvents 
       * @description A collection of timestamps for each event in the Scoped Variable's lifetime.
       */
      events: {
        /** @description The timestamp of when the scoped variable was created. */
        created: components["schemas"]["DateTime"];
        /** @description The timestamp of when the scoped variable was updated. */
        updated: components["schemas"]["DateTime"];
        /** @description The timestamp of when the scoped variable was deleted. */
        deleted: components["schemas"]["DateTime"];
      };
    };
    /**
     * ContainerImageSummary 
     * @description A summary of the image this container was created from.
     */
    ImageSummary: {
      id?: components["schemas"]["ID"];
      /**
       * @description If a service container, the identifier specifying which service it is. 
       * @enum {string|null}
       */
      service?: "loadbalancer" | "discovery" | "vpn" | null;
    };
    /**
     * ContainerStackSummary 
     * @description A summary of the stack this container was created format.
     */
    StackSummary: {
      id?: components["schemas"]["ID"];
      image?: {
        /** @description The ID of the image used for this container. */
        id?: string;
      };
      /** @description The ID of the stack build this container is associated with. */
      build_id?: string;
      /** @description The container identifier, usually the key to the container section of a stack file. */
      identifier?: string;
    };
    /**
     * ContainerNetwork 
     * @description Network configuration for a container.
     */
    ContainerNetwork: {
      /**
       * @description The public network settings for the given container 
       * @enum {string}
       */
      public: "enable" | "egress-only" | "disable";
      /** @description The hostname for the given container. */
      hostname: string;
      /** @description An array of port mappings for the container. */
      ports?: (string)[];
    };
    /**
     * DeploymentStrategyName 
     * @enum {string}
     */
    DeploymentStrategyName: "resource-density" | "high-availability" | "first-available" | "node" | "edge" | "manual";
    /**
     * ContainerDeploy 
     * @description Deployment configuration for the given container.
     */
    ContainerDeploy: {
      /** @description The number of initial desired instances for a given container. */
      instances: number;
      /** @description The deployment strategy to use when scaling the given container. */
      strategy?: components["schemas"]["DeploymentStrategyName"];
      stateful?: {
        options?: ({
          use_base_hostname?: boolean | null;
        }) | null;
      };
      /** @description Settings that give more granular control over deployment targets and conditions. */
      constraints?: {
        /** @description Constraint settings related to which nodes an instance can be deployed to. */
        node?: {
          /** @description Lists of server tags that formally declair servers that match the criteria for deployment. */
          tags: {
            /** @description A list of tags where a server matching any tags from the list is qualified as a deployment target. */
            any?: (string)[];
            /** @description A list of tags where a server matching all tags from the list is the only scenario where the server is qualified as a deployment target. */
            all?: (string)[];
          };
        };
        /** @description An array of container identifiers the platform will send the start signal to before sending the start signal to this container. */
        containers?: (string)[];
      };
      /** @description Configuration for what to do during container shutdown. */
      shutdown?: {
        /** @description The time in seconds the platform will wait for a container to stop gracefully. */
        graceful_timeout: number;
        /** @description Process signal sent to the container process. */
        signals: ("SIGTERM" | "SIGINT" | "SIGUSR1" | "SIGUSR2" | "SIGHUP" | "SIGQUIT")[];
      };
      /** @description Configurations for container startup. */
      startup?: {
        /** @description A value in seconds representing how long the platform will wait before sending the start signal to the given container. */
        delay?: number;
      };
      /** @description Configurations for how the container behaves when updating. */
      update?: {
        parallelism: number;
        delay: number;
      };
      /** @description Configurations for container restart events. */
      restart?: {
        /**
         * @description Policy for what should happen in the event of a container dying. 
         * @enum {string}
         */
        condition: "always" | "never" | "failure";
        /** @description Time in seconds the platform will wait before trying to restart the container. */
        delay: number;
        /** @description The amount of times the platform will attempt the restart policies. */
        max_attempts: number;
      };
      /** @description Configuration for determining the health of a container. */
      health_check?: {
        /** @description The command that will be run to verify the health of the container. */
        command: string;
        /** @description The number of times the platform will retry the command before marking the container unhealthy. */
        retries: number;
        /** @description The number of seconds between retries. */
        interval: number;
        /** @description The number of time in seconds before a health check attempt times out. */
        timeout: number;
        /** @description A boolean where `true` represents the desire for a container to restart if unhealthy. */
        restart: boolean;
      };
      /** @description Configuration settings for container telemetery reporting. */
      telemetry?: {
        /** @description The number in seconds for telemetry data to be retained. */
        retention: number;
        /** @description The number in seconds between samples. */
        interval: number;
        /** @description A boolean where true disables all telemetry reporting for this container. */
        disable: boolean;
        /** @description An endpoint to report the telemetry data to. */
        webhook?: string;
      };
    };
    /**
     * SeccompRule 
     * @description Rules for controlling Linux seccomp inside a container.
     */
    SeccompRule: {
      capabilities?: {
        includes?: string;
        excludes?: string;
      };
      /** @description LinuxSyscall is used to match a syscall in Seccomp */
      syscall?: {
        names: (string)[];
        action: string;
        errnoRet?: number;
        args?: ({
            index: number;
            value: number;
            valueTwo?: number;
            op: string;
          })[];
      };
    };
    /**
     * ContainerRuntime 
     * @description Runtime configurations for a given container.
     */
    ContainerRuntime: {
      /** @description A command that will be run in place of the images defined startup command. */
      command?: {
        /** @description System path for the command. */
        path: string;
        /** @description Arguments to pass to the command. */
        args: string;
      };
      /** @description Namespaces the given container will have access to. */
      namespaces?: ("ipc" | "pid" | "uts" | "network" | "mount" | "user")[];
      /** @description A record of environment variables for the given container. */
      environment_vars?: {
        [key: string]: string | undefined;
      };
      /** @description Selecting this option will give this container full permissions on the server. This is not recommended and increases the likelihood of your server being compromised. */
      privileged: boolean;
      /** @description A list of linux kernel capabilites for the given container. */
      capabilities?: ("CAP_CHOWN" | "CAP_FSETID" | "CAP_DAC_OVERRIDE" | "CAP_FOWNER" | "CAP_SETFCAP" | "CAP_SETGID" | "CAP_SETUID" | "CAP_KILL" | "CAP_MKNOD" | "CAP_NET_BIND_SERVICE" | "CAP_NET_RAW" | "CAP_AUDIT_WRITE" | "CAP_SYS_CHROOT" | "CAP_SETPCAP" | "CAP_DAC_READ_SEARCH" | "CAP_NET_ADMIN" | "CAP_NET_BROADCAST" | "CAP_SYS_ADMIN" | "CAP_SYS_MODULE" | "CAP_SYS_NICE" | "CAP_SYS_PACCT" | "CAP_SYS_PTRACE" | "CAP_SYS_RAWIO" | "CAP_SYS_RESOURCE" | "CAP_SYS_BOOT" | "CAP_SYS_TIME" | "CAP_SYS_TTY_CONFIG" | "CAP_SYSLOG" | "CAP_AUDIT_CONTROL" | "CAP_AUDIT_READ" | "CAP_IPC_LOCK" | "CAP_IPC_OWNER" | "CAP_LINUX_IMMUTABLE" | "CAP_MAC_ADMIN" | "CAP_MAC_OVERRIDE" | "CAP_BLOCK_SUSPEND" | "CAP_LEASE" | "CAP_WAKE_ALARM")[];
      /** @description Configure the working directory for the given container. */
      workdir?: string;
      /** @description A record of sysctl fields and values for a given container. */
      sysctl?: {
        [key: string]: string | undefined;
      };
      /** @description A record of rlimits and their values. */
      rlimits?: {
        [key: string]: {
          /** @description The hard limit for the rlimit. */
          hard?: number;
          /** @description The soft limit for the rlimit. */
          soft?: number;
        } | undefined;
      };
      seccomp: {
        disable?: boolean;
        rules?: (components["schemas"]["SeccompRule"])[];
      } | null;
      rootfs?: {
        /** @description Enabling this option will set the containers filesystem to readonly. Volumes associated with the container will not be affected by this. */
        readonly?: boolean;
      };
    };
    /**
     * ContainerResources 
     * @description Configuration settings for the resource allocations and limits of a given container.
     */
    ContainerResources: {
      /** @description Configurations settings related to CPU usage. */
      cpu: {
        /** @description A share represents 1/10th of the available compute time on a single thread. */
        shares?: {
          /** @description The limit (maximum) amount of shares each instance of a container can use. */
          limit: number;
          /** @description The reserve (allocation) number of shares for each instance of a given container. */
          reserve: number;
        };
        cpus?: string;
      };
      /** @description Configuration settings for limits and reserves of RAM resources for the given container. */
      ram: {
        /**
         * @description The limit (maximum) amount of RAM each instance of the given container can use. 
         * @example 1G, 2M
         */
        limit?: string;
        /** @description The reserve (allocation) of RAM given to each instance of the container. */
        reserve?: string;
      };
    };
    /**
     * ContainerIntegrations 
     * @description Configuration settings for integrations with a given container.
     */
    ContainerIntegrations: {
      /** @description Webhooks that can be set for specific event reporting and advanced container configurations. */
      webhooks?: {
        /** @description Container events that can be configured to report to a webhook. */
        events?: {
          /** @description A webhook to hit when a container deploy event happens. */
          deploy?: string;
          /** @description A webhook to hit when a container start event happens. */
          start?: string;
          /** @description A webhook to hit when a container stop event happens. */
          stop?: string;
        };
        /** @description An endpoint that the platform will react out to with a get request.  This endpoint serves a partial container config which can modify `runtime`, `resources`, and `integrations` configurations. */
        config?: string;
      };
      /** @description Inject remotely hosted files into container instances at runtime. */
      files?: ({
          /** @description The http endpoint that is hosting the files to be used. */
          source: string;
          /** @description The path in the container for these files to be injected. */
          destination: string;
        })[];
      /** @description Configuration settings to embed a TLS certificate in the container. */
      lets_encrypt?: {
        /** @description A boolean where true represents the desire for a container to have its corresponding TLS certificate(s) injected into the configured path(s). */
        enable: boolean;
        /** @description Path where the `certificate.cert` will be saved. */
        certificate_path?: string;
        /** @description Path where the `certificate.chain` will be saved. */
        chain_path?: string;
        /** @description Path where the `certificate.key` will be saved. */
        key_path?: string;
        /** @description Path where the `certificate.bundle` will be saved. */
        bundle_path?: string;
        /** @description File path where any remaining certificate files will be stored. */
        additional_certs_path?: string;
      };
      /** @description Automated backups configuration for the given container. */
      backups?: {
        /**
         * @description The storage provider to use for backups. 
         * @enum {string}
         */
        destination: "backblaze-b2";
        /** @description Configuration settings for each backup. */
        backup: {
          /** @description The command to run for the backup. */
          command: string;
          /** @description The time in seconds for the backup to attempt to run before timing out. */
          timeout?: number | null;
          /** @description A cron string that configures how often the backup will run. */
          cron_string?: string;
        };
        /** @description Configuration settings for restoring from a backup. */
        restore: {
          /** @description The command to run for restoring from a backup. */
          command: string;
          /** @description The time in seconds for the restore to appempt to complete before timing out. */
          timeout?: number | null;
        };
      };
    };
    /**
     * ContainerConfig 
     * @description A container configuration.
     */
    Config: {
      network: components["schemas"]["ContainerNetwork"];
      deploy: components["schemas"]["ContainerDeploy"];
      runtime?: components["schemas"]["ContainerRuntime"];
      resources?: components["schemas"]["ContainerResources"];
      integrations?: components["schemas"]["ContainerIntegrations"];
    };
    /**
     * ContainerVolume 
     * @description Configuration settings for container volumes.
     */
    ContainerVolume: {
      /** @description A boolean where true marks the volume as read only. */
      read_only: boolean;
      /** @description Configuration for settings local to the container filesystem. */
      local?: {
        /**
         * @description The maximum size the volume can grow to. A number followed by a size. `10G` would be 10 gigabytes. 
         * @example 10G
         */
        max_size: string;
        /** @description A boolean where true signifies using the largest drive over 2TB for the target server. */
        storage_pool?: boolean;
      };
      /** @description The mountpoint path for the container. */
      destination: string;
      /** @description Configuration settings for remotely accessing the container volume. */
      remote_access?: {
        /** @description A boolean where true represents this container volume being open to remote access connections over SFTP. */
        enable: boolean;
        ips?: (string)[];
        /** @description Call out to a webhook to authenticate usernames/passwords if an organization manages their own accounts */
        web_hook?: string;
        /** @description Password configuration settings for the remote access of the container volume. */
        password: ({
          /**
           * @description The hashing algorithm used to has the password. 
           * @enum {string}
           */
          algorithm: "raw" | "sha512" | "md5";
          /** @description The raw or hashed password. */
          data: string;
        }) | null;
      };
    };
    /**
     * VolumeSummary 
     * @description A summary of relevant volume information.
     */
    VolumeSummary: {
      id: components["schemas"]["ID"];
      /** @description A unique hash for the given volume. */
      hash: string;
      config: components["schemas"]["ContainerVolume"];
    };
    /**
     * DNSRecordTypes 
     * @description DNS record types the platform supports.
     */
    RecordTypes: {
      /** @description A DNS A record */
      a?: {
        /** @description The IPv4 address that the A record should map to. */
        ip: string;
      };
      /** @description A DNS AAAA record */
      aaaa?: {
        /** @description The IPv6 address that the AAAA record should map to. */
        ip: string;
      };
      /** @description A DNS CNAME record */
      cname?: {
        /** @description The domain string the record resolves to. */
        domain: string;
      };
      /** @description A DNS NS record */
      ns?: {
        /** @description The domain of the nameserver for this record. */
        domain: string;
      };
      /** @description A DNS MX record */
      mx?: {
        /** @description The priority setting for this mx record. */
        priority: string;
        /** @description The domain this mx record points to. */
        domain: string;
      };
      /** @description A DNS TXT record. */
      txt?: {
        /** @description The value for this TXT record. */
        value: string;
      };
      /** @description A DNS ALIAS record. */
      alias?: {
        /** @description The domain string returned from the DNS server when this alias record is requested. */
        domain: string;
      };
      /** @description A DNS SRV record. */
      srv?: {
        /** @description Teh weight configured for this record - breaks ties for priority. */
        weight: number;
        /** @description The priority for the record. */
        priority: number;
        /** @description The port number for the service. */
        port: number;
        /** @description The domain for the record. */
        domain: string;
      };
      /** @description A DNS CAA record. */
      caa?: {
        /** @description The ASCII string that represents the identifier of the property represented by the record. */
        tag: string;
        /** @description The value associated with the tag. */
        value: string;
      };
      /** @description A Linked record is a record special to Cycle.  It represents a url that points to a specific container, however the IP address mapping in handled automatically by the platform. */
      linked?: {
        /** @description The ID of the container this record is related to. */
        container_id?: string;
        /** @description Features associated with this record. */
        features: {
          /** @description TLS properties of the record. */
          tls: {
            /** @description A boolean, where true represents this record will be paired with a TLS certificate automatically maintained by the platform. */
            enable: boolean;
          };
        };
      };
    };
    /**
     * DNSRecordCertificate 
     * @description A TLS record certificate
     */
    Certificate: {
      id: components["schemas"]["ID"];
      generated: components["schemas"]["DateTime"];
      /** @description A value where true represents that the certificate is using a shared wildcard cert. */
      wildcard_child: boolean;
    } | null;
    /** DNSRecordState */
    RecordState: ({
      /**
       * @description The current state of the record. 
       * @enum {string}
       */
      current: "pending" | "live" | "deleting" | "deleted";
    }) & components["schemas"]["State"];
    /**
     * DNSRecord 
     * @description A DNS record.
     */
    Record: {
      id: components["schemas"]["ID"];
      hub_id: components["schemas"]["HubID"];
      creator: components["schemas"]["CreatorScope"];
      /** @description A unique identifier for the zone */
      zone_id: string;
      /** @description A name used for the record, where `@` signifies the use of the root domain. */
      name: string;
      /** @description The name of the record and the origin as a domain name. */
      resolved_domain: string;
      type: components["schemas"]["RecordTypes"];
      /** @description TLS features for the record. */
      features: {
        certificate: components["schemas"]["Certificate"];
      } | null;
      state: components["schemas"]["RecordState"];
      events: components["schemas"]["Events"];
    };
    /** IpState */
    IpState: ({
      /**
       * @description The current state of the IP. 
       * @enum {string}
       */
      current: "assigning" | "assigned" | "releasing" | "available";
    }) & components["schemas"]["State"];
    /**
     * Ip 
     * @description An IP resource.
     */
    Ip: {
      id: components["schemas"]["ID"];
      hub_id: components["schemas"]["HubID"];
      /**
       * @description The type of IP protocol this IP is. 
       * @enum {string}
       */
      kind: "ipv4" | "ipv6";
      /** @description Information about the assignment of this IP. */
      assignment?: {
        container_id: string;
        instance_id: string;
        environment_id: string;
      } | null;
      /** @description A unique identifier that associates the IP with an IP pool. */
      pool_id: string;
      /** @description The IP address. */
      address: string;
      /** @description The IP gateway. */
      gateway: string;
      /** @description The CIDR for the IP. */
      cidr: string;
      state: components["schemas"]["IpState"];
    };
    /**
     * ContainersMeta 
     * @description A list of meta fields that can be applied to a container.
     */
    ContainersMeta: {
      instances_count?: components["schemas"]["StateCountSummary"];
      /** @description The FQDN for this container, if there is one. */
      domain?: string;
      domains?: ({
          /** @description The fully qualified domain name. */
          fqdn: string;
          record: components["schemas"]["Record"];
        })[];
      /** @description An array of IP resources. */
      ips?: (components["schemas"]["Ip"])[];
    };
    /**
     * Container 
     * @description Containers are a way to package together your application along with it's dependencies, and run in a resource isolated process. They provide consistency across different hosts, efficiency over traditional hosting methods, and facilitate a micro-service based approach, where each logical piece of your application is split into multiple, easily testable parts (such as API, Backend, Frontend, etc).
     */
    Container: {
      id: components["schemas"]["ID"];
      /** @description A human readable slugged identifier for this container. Usually used as a key in a stack file. */
      identifier: components["schemas"]["Identifier"];
      /** @description A user defined name for the container resource. */
      name: string;
      creator: components["schemas"]["CreatorScope"];
      environment: components["schemas"]["ContainerEnvironmentSummary"];
      hub_id: components["schemas"]["HubID"];
      image: components["schemas"]["ImageSummary"];
      stack?: components["schemas"]["StackSummary"];
      config: components["schemas"]["Config"];
      /** @description The number of instances for a given container. */
      instances: number;
      volumes?: (components["schemas"]["VolumeSummary"])[];
      /** @description Custom meta data for a given container */
      annotations: ({
        [key: string]: string | undefined;
      }) | null;
      /**
       * @description The role of a given container if it has one. 
       * @enum {string|null}
       */
      role?: "orchestrator" | null;
      /** @description A boolean where true signifies the container is stateful. */
      stateful: boolean;
      /** @description A boolean where true signifies the container is marked as deprecated. */
      deprecate?: boolean;
      state: components["schemas"]["ContainerState"];
      /**
       * ContainerEvents 
       * @description A collection of timestamps for each event in the container's lifetime.
       */
      events: {
        /** @description The timestamp of when the container was created. */
        created: components["schemas"]["DateTime"];
        /** @description The timestamp of when the container was updated. */
        updated: components["schemas"]["DateTime"];
        /** @description The timestamp of when the container was deleted. */
        deleted: components["schemas"]["DateTime"];
        /** @description The timestamp of when the container was started. */
        started: components["schemas"]["DateTime"];
      };
      meta?: components["schemas"]["ContainersMeta"];
    };
    /** DockerHubSource */
    DockerHubSource: {
      /** @enum {string} */
      type?: "docker-hub";
      /** @description An image source origin that pulls from DockerHub. */
      details?: {
        /** @description The DockerHub target string. ex - `mysql:5.7` */
        target: string;
        /** @description For authentication, a username. */
        username?: string;
        /** @description For authentication, a token. */
        token?: string;
      };
    };
    /** HTTPSourceCredentials */
    CredentialsHTTP: {
      /** @enum {string} */
      type: "http";
      /** @description Authentication credentails for the Dockerfile image source type when authenticating over HTTP. */
      credentials: {
        /** @description For authentication, the username. */
        username: string;
        /** @description For authentication, the password. */
        password: string;
      };
    };
    /** SSHSourceCredentials */
    CredentialsSSH: {
      /** @enum {string} */
      type: "ssh";
      /** @description Authentication credentials for the Dockerfile image source type when authenticating with SSH. */
      credentials: {
        /** @description The username for the repo service, that is used to authenticate an ssh key. */
        username: string;
        /** @description The passphrase used for the key. */
        passphrase: string;
        /** @description A pem encoded private key. */
        private_key: string;
      };
    };
    /**
     * RepoSourceType 
     * @description Information about the repostiory.
     */
    RepoType: {
      /** @description The URL of the repository. */
      url: string;
      /** @description An optional branch arguement.  Default value is `master`. */
      branch?: string;
      /** @description Authentication information for the repository. */
      auth?: components["schemas"]["CredentialsHTTP"] | components["schemas"]["CredentialsSSH"];
      /** @description Repository reference information. */
      ref?: {
        /**
         * @description The type of reference being used. 
         * @enum {string}
         */
        type: "hash" | "tag";
        /** @description The value for the given reference type. */
        value: string;
      };
    };
    /**
     * DockerfileCredentails 
     * @description An array of credentials objects to be used when authenticating against private images used by the Dockerfile.
     */
    DockerfileCredentials: ({
        /** @description The url the resource is located at. */
        url?: string;
        /** @description A username for authentication. */
        username?: string;
        /** @description A token for authentication. */
        token?: string;
      })[];
    /** DockerfileFileSource */
    DockerfileFileSource: {
      /** @enum {string} */
      type?: "docker-file";
      /** @description An image source origin that creates an image from a Dockerfile that's listed in a repository. */
      details?: {
        repo?: components["schemas"]["RepoType"];
        /** @description An endpoint that serves the tar file. */
        targz_url?: string;
        /** @description The path to the directory to use as the context when building the image. */
        context_dir?: string;
        /** @description The path to the Dockerfile to be used for buiding the image. */
        build_file?: string;
        credentials?: components["schemas"]["DockerfileCredentials"];
      };
    };
    /** DockerRegistrySource */
    DockerRegistrySource: {
      /** @enum {string} */
      type?: "docker-registry";
      /** @description An image source origin that pulls from a private Docker registry. */
      details?: {
        /** @description The image name on the registry. */
        target: string;
        /** @description The url of the remote registry. */
        url: string;
        /** @description For authentication, a username. */
        username?: string;
        /** @description For authentication, a token. */
        token?: string;
        /** @description For authentication, a password. */
        password?: string;
      };
    };
    /**
     * ImageSourceOrigin 
     * @description The origin of the given image source.
     */
    ImageSourceOrigin: components["schemas"]["DockerHubSource"] | components["schemas"]["DockerfileFileSource"] | components["schemas"]["DockerRegistrySource"];
    /** ImageState */
    ImageState: ({
      /**
       * @description The current state of the image. 
       * @enum {string}
       */
      current: "new" | "downloading" | "building" | "verifying" | "saving" | "live" | "deleting" | "deleted";
    }) & components["schemas"]["State"];
    /**
     * ImageMeta 
     * @description A list of meta fields that can be applied to the image.
     */
    ImageMeta: {
      containers_count?: components["schemas"]["StateCountSummary"];
    };
    /**
     * Image 
     * @description An Image Resource, which is a point in time build on a given image source.
     */
    Image: {
      id: components["schemas"]["ID"];
      hub_id: components["schemas"]["HubID"];
      /** @description A user defined name for the image. */
      name: string;
      /** @description If the image is part of a stack, that information will be available here. */
      stack: {
        id: components["schemas"]["ID"];
        /** @description A unique identifier for the build the image is assocaited with. */
        build_id: string;
        /** @description If this image is being used for any containers their identifiers are listed here. */
        containers: (string)[];
      };
      /** @description The image size in bytes. */
      size: number;
      /** @description An object that holds information about the image. */
      about?: {
        /** @description A description of the image. */
        description: string | null;
      };
      /** @description Describes where the image is hosted. */
      backend: {
        /** @description The provider where this image is hosted. */
        provider: string;
        /** @description The size of the image in bytes. */
        size: string;
        /** @description A file name for the image, used by the platform. */
        file_name: string;
        /** @description A file id for the image, used by the platform. */
        file_id: string;
      };
      /** @description Tags that describe the version, package, or data about the image. */
      tags: (string)[];
      /** @description Configuration settings for the image. */
      config: {
        /** @description The linux user this image runs its processes as. */
        user: string;
        /** @description The port settings for the image. */
        ports: ({
            /** @description Host Port */
            host: number;
            container: number;
            type: string;
          })[];
        /** @description Image defined environment variables for the image. */
        env: {
          [key: string]: string | undefined;
        };
        /** @description Image labels. */
        labels: string;
        /** @description The CMD array used to start the container. */
        command: (string)[];
        /** @description Additional commands to run at build time. */
        onbuild: (string)[];
        /** @description An entrypoint command. */
        entrypoint: (string)[];
        /** @description Volumes information for the given image. */
        volumes: ({
            /** @description The path where the volume is mounted. */
            path?: string;
            /**
             * @description Permission settings for the volume. 
             * @enum {string}
             */
            mode?: "ro" | "rw";
          })[];
        /** @description The working directory for the image. */
        workdir: string;
        /** @description A set command to be run if a signal is called. */
        signal_stop: string;
      };
      source?: {
        type: string;
        details: {
          id: string;
          stack_id: string;
          origin: components["schemas"]["ImageSourceOrigin"];
        };
      };
      creator?: components["schemas"]["CreatorScope"];
      /** @description Identifies which factory the image was built on and when. */
      factory?: {
        /** @description The node holding the factory service that was responsible for building the image. */
        node_id: string;
        /** @description A date timestamp for when the node acknowledged the image import job. */
        acknowledged: components["schemas"]["DateTime"];
      };
      state: components["schemas"]["ImageState"];
      /**
       * ImageEvents 
       * @description A collection of timestamps for each event in the image's lifetime.
       */
      events: {
        /** @description The timestamp of when the image was created. */
        created: components["schemas"]["DateTime"];
        /** @description The timestamp of when the image was updated. */
        updated: components["schemas"]["DateTime"];
        /** @description The timestamp of when the image was deleted. */
        deleted: components["schemas"]["DateTime"];
      };
      meta?: components["schemas"]["ImageMeta"];
    };
    /**
     * ImageIncludes 
     * @description A resource associated with an image.
     */
    ImagesIncludes: {
      [key: string]: components["schemas"]["Image"] | undefined;
    };
    /** StackContainerConfigNetwork.yml */
    StackContainerConfigNetwork: {
      /** @enum {string} */
      public: "enable" | "disable" | "egress-only";
      hostname: string;
      ports?: (string)[];
    };
    /** StackContainerConfigDeploy.yml */
    StackContainerConfigDeploy: {
      instances: number;
      /** @enum {string} */
      strategy?: "resource-density" | "manual" | "high-availability" | "first-available" | "ephemeral";
      stateful?: {
        instances: ({
            match: {
              hostname?: string;
            };
            first_start?: {
              command?: {
                path?: string;
                args?: string;
              };
              environment_vars?: {
                [key: string]: string | undefined;
              };
            };
            start?: {
              command?: {
                path?: string;
                args?: string;
              };
              environment_vars?: {
                [key: string]: string | undefined;
              };
            };
          })[];
      };
      constraints?: {
        node?: {
          tags: {
            any?: (string)[];
            all?: (string)[];
          };
        };
        secrets?: (string)[];
        containers?: (string)[];
      };
      shutdown?: {
        graceful_timeout: number;
        signals?: ("SIGTERM" | "SIGINT" | "SIGUSR1" | "SIGUSR2" | "SIGHUP")[];
      };
      startup?: {
        delay?: number;
      };
      restart?: {
        /** @enum {string} */
        condition: "always" | "never" | "failure";
        delay: number;
        max_attempts: number;
        notify?: {
          emails?: (string)[];
          web_hook?: string;
        };
      };
      health_check?: {
        command: string;
        retries: number;
        interval: number;
        timeout: number;
        restart: boolean;
      };
      telemetry?: {
        retention: number;
        interval: number;
        disable: boolean;
      };
      update?: {
        parallelism: number;
        delay: number;
      };
    };
    /** StackContainerConfigScaling.yml */
    StackContainerConfigScaling: {
      auto?: {
        instances: {
          min: number;
          max: number;
        };
        rules?: {
          /** @enum {string} */
          metric: "ram";
          threshold: string;
        };
      };
    };
    /** StackContainerConfigRuntime */
    StackContainerConfigRuntime: {
      workdir?: string;
      command?: {
        path: string;
        args: string;
      };
      environment_vars?: {
        [key: string]: string | undefined;
      };
      namespaces?: ("ipc" | "pid" | "uts" | "network" | "mount" | "user")[];
      sysctl?: {
        [key: string]: string | undefined;
      };
      rlimits?: {
        [key: string]: {
          hard: number;
          soft: number;
        } | undefined;
      };
      seccomp?: {
        disable: boolean;
        rules?: ({
            capabilities: {
              includes: string;
              excludes: string;
            };
            specs: {
              names: (string)[];
              action: string;
              arrnoRet?: number;
              args: ({
                  index: number;
                  value: number;
                  valuetwo?: number;
                  op: string;
                })[];
            };
          })[];
      };
      privileged?: boolean;
      capabilities?: ("CAP_CHOWN" | "CAP_FSETID" | "CAP_DAC_OVERRIDE" | "CAP_FOWNER" | "CAP_SETFCAP" | "CAP_SETGID" | "CAP_SETUID" | "CAP_KILL" | "CAP_MKNOD" | "CAP_NET_BIND_SERVICE" | "CAP_NET_RAW" | "CAP_AUDIT_WRITE" | "CAP_SYS_CHROOT" | "CAP_SETPCAP" | "CAP_DAC_READ_SEARCH" | "CAP_NET_ADMIN" | "CAP_NET_BROADCAST" | "CAP_SYS_ADMIN" | "CAP_SYS_MODULE" | "CAP_SYS_NICE" | "CAP_SYS_PACCT" | "CAP_SYS_PTRACE" | "CAP_SYS_RAWIO" | "CAP_SYS_RESOURCE" | "CAP_SYS_TTY_CONFIG" | "CAP_SYSLOG" | "CAP_AUDIT_CONTROL" | "CAP_AUDIT_READ" | "CAP_IPC_LOCK" | "CAP_IPC_OWNER" | "CAP_LINUX_IMMUTABLE" | "CAP_MAC_ADMIN" | "CAP_MAC_OVERRIDE" | "CAP_BLOCK_SUSPEND")[];
      rootfs?: {
        readonly: boolean;
      };
    };
    /** StackContainerConfigResources */
    StackContainerConfigResources: {
      cpu: {
        shares?: {
          limit: number;
          reserve: number;
        };
        cpus?: string;
      };
      ram: {
        limit?: string;
        reserve?: string;
        swappiness?: number;
        kernel?: string;
        kernel_tcp?: string;
      };
    };
    /** StackContainerConfigIntegrations */
    StackContainerConfigIntegrations: {
      webhooks?: {
        events?: {
          deploy?: string;
          start?: string;
          stop?: string;
        };
        config?: string;
      };
      lets_encrypt?: {
        enable: boolean;
        certificate_path?: string;
        chain_path?: string;
        key_path?: string;
        bundle_path?: string;
        additional_certs_path?: string;
      };
      files?: ({
          source: string;
          destination: string;
        })[];
      backups?: {
        /** @enum {string} */
        destination: "backblaze-b2";
        backup: {
          command: number | null;
          timeout: number | null;
          cron_string: string | null;
        };
        restore: ({
          command: string;
          timeout: number | null;
        }) | null;
      };
    };
    /** StackContainerVolume.yml */
    StackContainerVolume: {
      read_only: boolean;
      local?: {
        max_size: string;
        storage_pool: boolean;
      };
      destination: string;
      remote_access?: {
        enable: boolean;
        ips?: ({
            ip: string;
            read_only: boolean;
            password: ({
              /** @enum {string} */
              algorithm: "raw" | "sha512" | "md5";
              data: string;
            }) | null;
          })[];
        web_hook?: string;
        password: {
          /** @enum {string} */
          algorithm: "raw" | "sha512" | "md5";
          data: string;
        };
      };
    };
    /**
     * StackContainer 
     * @description A list of records defining the stacks containers.
     */
    StackContainer: {
      [key: string]: {
        name: string;
        image: {
          name: string;
          origin: components["schemas"]["ImageSourceOrigin"];
          stateful?: boolean;
          config?: {
            network: components["schemas"]["StackContainerConfigNetwork"];
            deploy: components["schemas"]["StackContainerConfigDeploy"];
            scaling?: components["schemas"]["StackContainerConfigScaling"];
            runtime?: components["schemas"]["StackContainerConfigRuntime"];
            resources?: components["schemas"]["StackContainerConfigResources"];
            integrations?: components["schemas"]["StackContainerConfigIntegrations"];
          };
          /** @enum {string} */
          role?: "orchestrator";
          volumes?: (components["schemas"]["StackContainerVolume"])[];
        };
      } | undefined;
    };
    /**
     * StackSpec 
     * @description A stack spec resource.
     */
    StackSpec: {
      /** @enum {string} */
      type: "raw";
      details: {
        /** @description A string defining the version of the stack spec. */
        version: string;
        /** @description Information about the stack. */
        about?: {
          /** @description Internal version information set by the user. */
          version: string;
          /** @description Information describing the stack. */
          description: string;
        };
        containers: (components["schemas"]["StackContainer"])[] | null;
        /** @description Additional meta info about the stack. */
        annotations?: {
          [key: string]: string | undefined;
        };
      };
    };
    /**
     * StackGitCommit 
     * @description Information about the git commit this stack build was created from.
     */
    StackGitCommit: {
      /** @description The commit hash for the given stack build. */
      hash: string;
      /** @description The commit message for the given stack build hash. */
      message: string;
      /** @description The time the commit was made. */
      time: components["schemas"]["DateTime"];
      /** @description Inforamtion about the author of the commit. */
      author: {
        /** @description The commit authors name. */
        name: string;
        /** @description The commit authors email address. */
        email: string;
      };
    };
    /** StackBuildState */
    StackBuildState: ({
      /**
       * @description The current state of the stack build. 
       * @enum {string}
       */
      current: "new" | "importing" | "building" | "verifying" | "saving" | "live" | "deploying" | "deleting" | "deleted";
    }) & components["schemas"]["State"];
    /**
     * StackBuildMeta 
     * @description A list of meta fields that can be applied to a stack build.
     */
    StackBuildMeta: {
      containers_count?: components["schemas"]["StateCountSummary"];
    };
    /**
     * StackBuild 
     * @description A stack build resource.
     */
    StackBuild: {
      id: components["schemas"]["ID"];
      hub_id: components["schemas"]["HubID"];
      /** @description An identifier for the stack related to this build. */
      stack_id: string;
      spec: components["schemas"]["StackSpec"];
      /** @description Information about the stack build. */
      about: {
        /** @description Information about the version of the stack. */
        version: string;
        /** @description Information describing the stack */
        description: string;
        git_commit?: components["schemas"]["StackGitCommit"];
      };
      /** @description Git information on where to pull stack resources from. */
      instructions: {
        /** @description Git information specifics. */
        git?: {
          /**
           * @description The type of information the user is passing. 
           * @enum {string}
           */
          type: "hash" | "tag";
          /** @description The actual value to be passed. */
          value: string;
        };
      };
      /**
       * StackBuildEvents 
       * @description A collection of timestamps for each event in the stack build's lifetime.
       */
      events: {
        /** @description The timestamp of when the stack build was created. */
        created: components["schemas"]["DateTime"];
        /** @description The timestamp of when the stack build was updated. */
        updated: components["schemas"]["DateTime"];
        /** @description The timestamp of when the stack build was deleted. */
        deleted: components["schemas"]["DateTime"];
      };
      state: components["schemas"]["StackBuildState"];
      meta?: components["schemas"]["StackBuildMeta"];
    };
    /**
     * StackBuildInclude 
     * @description A resource thats associated with a stack build.
     */
    StackBuildIncludes: {
      [key: string]: components["schemas"]["StackBuild"] | undefined;
    };
    /**
     * StackRepoSourceType 
     * @description A repo source type for a stack.
     */
    RepoSpec: {
      /** @enum {string} */
      type: "git-repo";
      details: {
        /** @description The URL of the repository. */
        url: string;
        /** @description An optional branch arguement.  Default value is `master`. */
        branch?: string;
        /** @description Authentication information for the repository. */
        auth?: components["schemas"]["CredentialsHTTP"] | components["schemas"]["CredentialsSSH"];
        /** @description Repository reference information. */
        ref?: {
          /**
           * @description The type of reference being used. 
           * @enum {string}
           */
          type: "hash" | "tag";
          /** @description The value for the given reference type. */
          value: string;
        };
      };
    };
    /**
     * StackSource 
     * @description A source for a stack to be created from.
     */
    StackSource: components["schemas"]["RepoSpec"] | components["schemas"]["StackSpec"];
    /** StackState */
    StackState: ({
      /**
       * @description The current state of the stack. 
       * @enum {string}
       */
      current: "live" | "deleting" | "deleted";
    }) & components["schemas"]["State"];
    /**
     * StackMeta 
     * @description A list of meta fields that can be applied to this stack.
     */
    StackMeta: {
      containers_count?: components["schemas"]["StateCountSummary"];
      builds_count?: components["schemas"]["StateCountSummary"];
    };
    /**
     * Stack 
     * @description Stacks are a way to orchestrate multiple containers atomically and automatically.
     */
    Stack: {
      id: components["schemas"]["ID"];
      /** @description A human readable slugged identifier for this stack. */
      identifier: components["schemas"]["Identifier"];
      /** @description A user defined name for the stack resource. */
      name: string;
      hub_id: components["schemas"]["HubID"];
      creator: components["schemas"]["UserScope"];
      source: components["schemas"]["StackSource"];
      state: components["schemas"]["StackState"];
      /**
       * StackEvents 
       * @description A collection of timestamps for each event in the Stacks lifetime.
       */
      events: {
        /** @description The timestamp of when the stack was created. */
        created: components["schemas"]["DateTime"];
        /** @description The timestamp of when the stack was updated. */
        updated: components["schemas"]["DateTime"];
        /** @description The timestamp of when the stack was deleted. */
        deleted: components["schemas"]["DateTime"];
        /** @description The timestamp for the last build of the stack. */
        last_build: components["schemas"]["DateTime"];
      };
      meta?: components["schemas"]["StackMeta"];
    };
    /**
     * StackIncludes 
     * @description A resource associated with a stack.
     */
    StackIncludes: {
      [key: string]: components["schemas"]["Stack"] | undefined;
    };
    /**
     * EnvironmentInclude 
     * @description An identity that is associated with an environment.
     */
    EnvironmentIncludes: {
      [key: string]: components["schemas"]["Environment"] | undefined;
    };
    /**
     * ContainerIncludes 
     * @description All includable resources linkable to the given container.
     */
    ContainerIncludes: {
      creators?: components["schemas"]["CreatorInclude"];
      images?: components["schemas"]["ImagesIncludes"];
      stack_builds?: components["schemas"]["StackBuildIncludes"];
      stacks?: components["schemas"]["StackIncludes"];
      environments?: components["schemas"]["EnvironmentIncludes"];
    };
    /**
     * ServerProvider 
     * @description A resource regarding the provider a given server is deployed from.
     */
    ServerProvider: {
      /** @description An identifier for the provider this server is deployed from. */
      identifier: string;
      /** @description The model of the server that is deployed. */
      model: string;
      /** @description A location where the server is deployed. */
      location: string;
      /** @description A provider specific identifier for the server. */
      server: string;
      /** @description The IP's assigned to this server during provisioning. */
      init_ips?: (string)[];
      /** @description The mac address for the server. */
      mac_addr?: string;
      extra?: {
        [key: string]: unknown;
      };
      provision_options?: {
        attachesd_storage_size?: number;
        reservation_id?: string;
      };
    };
    /**
     * ServerFeatures 
     * @description A set of features a given server can have and their information.
     */
    ServerFeatures: {
      /** @description A boolean where true means the server accepts incoming SFTP connections through the remote volume integration. */
      sftp: boolean;
      /** @description The size of the base volume (where Cycle stores container images on this server). */
      base_volume_gb?: number;
    };
    /**
     * ServerConstraints 
     * @description Constraints to apply to the server.
     */
    ServerConstraints: {
      /** @description A list of server tags to put on the given server. */
      tags: (string)[];
      /** @description Settings for the server, things that are or are not allowed. */
      allow: {
        /** @description A boolean where true means - allow containers with no tags specified to be deployed to this server. */
        pool: boolean;
        /** @description A boolean where true means - allow service containers to be deployed to this container. */
        services: boolean;
        /** @description A boolean where true means - allow twice the normal amount of CPU shares to be allocated to containers deployed to this server. */
        overcommit: boolean;
      };
    };
    /** ServerState */
    ServerState: ({
      /**
       * @description The current state of the server. 
       * @enum {string}
       */
      current: "new" | "provisioning" | "configuring" | "live" | "deleting" | "deleted";
    }) & components["schemas"]["State"];
    /** NodeState */
    NodeState: ({
      /**
       * @description The current state of the node. 
       * @enum {string}
       */
      current: "new" | "offline" | "authorizing" | "online" | "decommissioned";
    }) & components["schemas"]["State"];
    /**
     * ServerStatsNetwork 
     * @description Statistics about the networks on a given server.
     */
    ServerStatsNetwork: {
      /** @description Network interfaces for a given server. */
      interfaces?: {
        [key: string]: {
          /** @description The interface name. */
          interface?: string;
          /** @description Flags for the given interface. */
          flags?: string;
          /** @description The maximum transmission unit for the interface. */
          mtu?: number;
          /** @description The mac address for the interface. */
          mac_addr?: string;
          /** @description An array of IP addresses associated with the interface. */
          addrs?: (string)[];
        } | undefined;
      };
      /** @description The public IPv4 address used to connect to this server. */
      external_ipv4: string;
      /** @description The public IPv6 address used to connect to this server. */
      external_ipv6: string;
    };
    /**
     * ServerStatsUptime 
     * @description Statistics describing the uptime of a given server.
     */
    ServerStatsUptime: {
      /** @description The amount in seconds the server has been up (resets on restart). */
      seconds?: number;
      /** @description CPU idle time. */
      cpu_idle?: number;
    };
    /**
     * ServerStatsCpu 
     * @description Statistics about the CPU resources on a server.
     */
    ServerStatsCpu: {
      /** @description The number of CPU's or vCPU's for a given server. */
      cores?: number;
      /** @description An array of processor information objects. */
      processors?: ({
          /** @description The model of the processor. */
          model?: string;
          /** @description The speed of the processor. */
          speed?: number;
        })[];
    };
    /**
     * ServerStatsLoad 
     * @description Statistics about the current load on the server.
     */
    ServerStatsLoad: {
      /** @description The 1 minute load average. */
      avg1m: number;
      /** @description The 5 minute load average. */
      avg5m: number;
      /** @description the 15 minute load average. */
      avg15m: number;
    };
    /**
     * ServerStatsRam 
     * @description Statistics about the RAM on a given server.
     */
    ServerStatsRam: {
      /** @description The available RAM on the server. */
      available: number;
      /** @description The free RAM on the server. */
      free: number;
      /** @description The total RAM on the server. */
      total: number;
    };
    /**
     * ServerStatsStorage 
     * @description Statistics about storage for a given server.
     */
    ServerStatsStorage: {
      /** @description An array of volume group objects. */
      volume_groups: {
        [key: string]: ({
          /** @description A name for the volume group. */
          name: string;
          /** @description A number representing the aggregate group volume size in megabytes. */
          size: number;
          /** @description The actual volumes. */
          volumes: {
            [key: string]: {
              /** @description The name of the volume. */
              name: string;
              /** @description The size in megabytes of the volume. */
              size: number;
              /** @description The percent of the volumes size being used by data. */
              data_percent: number;
              /** @description The percent of the volumes size being used by meta data. */
              meta_percent: number;
              /** @description The name of the volume pool this volume is associated with. */
              pool: string;
            } | undefined;
          };
        }) | undefined;
      };
      /** @description Records that show information about mounted filesystems where the key is the path to the mount. */
      mounts: {
        [key: string]: {
          /** @description The device assocaited with the mount. */
          device?: string;
          /** @description The type of filesystem in use by the mount. */
          type: string;
          /** @description The path the mount is associated with. */
          mountpoint?: string;
          /** @description The total amount of storage in KB available at this mount. */
          total: number;
          /** @description The amount of uninitialized storage in KB. */
          free: number;
          /** @description The amount of storage being used in KB. */
          used: number;
        } | undefined;
      };
    };
    /**
     * ServerStatsOS 
     * @description Statistics about the operating system installed on the server (CycleOS).
     */
    ServerStatsOS: {
      /** @description The currently installed release version of the OS. */
      release?: string;
      /** @description The currently installed kernel version. */
      kernel?: string;
      /** @description The hostname as set by the given server's OS. */
      hostname?: string;
    };
    /**
     * ServerStatsVersions 
     * @description Information about the versions of Cycle services on a given server.
     */
    ServerStatsVersions: {
      /** @description A list of records about Cycle services. */
      services: {
        [key: string]: ("factory" | "compute" | "compute-spawner" | "compute-proxy" | "public-api" | "admin-api" | "admin-portal" | "oauth" | "portal" | "console" | "manager" | "dns" | "agent" | "agent-spawner" | "nexus") | undefined;
      };
    };
    /**
     * NodeMetaStats 
     * @description Statistics that pertain to a specific node.
     */
    NodeMetaStats: {
      network: components["schemas"]["ServerStatsNetwork"];
      uptime: components["schemas"]["ServerStatsUptime"];
      cpu: components["schemas"]["ServerStatsCpu"];
      load: components["schemas"]["ServerStatsLoad"];
      ram: components["schemas"]["ServerStatsRam"];
      storage: components["schemas"]["ServerStatsStorage"];
      os: components["schemas"]["ServerStatsOS"];
      versions: components["schemas"]["ServerStatsVersions"];
    };
    /**
     * ServerMeta 
     * @description A list of meta fields that can be applied to a server.
     */
    ServerMeta: {
      /** @description Infrormation about the status of the server. */
      node?: {
        /** @description The last time this server checked in with the platform. */
        last_checkin: components["schemas"]["DateTime"];
        /** @description An array a drivers associated with the given server. */
        drivers: (string)[];
        state: components["schemas"]["NodeState"];
        stats: components["schemas"]["NodeMetaStats"];
        /** @description A boolean where true means the platform is reporting the server as healthy. */
        healthy: boolean;
        /** @description A boolean where true means the server is online and reachable by the platform. */
        online: boolean;
      };
      instances_count?: components["schemas"]["StateCountSummary"];
    };
    /**
     * Server 
     * @description The server resource, referring to servers that have been deployed to a Cycle hub.
     */
    Server: {
      id: components["schemas"]["ID"];
      hub_id: components["schemas"]["HubID"];
      /** @description An identifier for the location this server is deployed to. */
      location_id: string;
      /** @description An identifier for the model of server that is deployed. */
      model_id: string;
      /** @description An identifier for the node. */
      node_id: string;
      /** @description The server hostname. */
      hostname: string;
      creator: components["schemas"]["CreatorScope"];
      provider: components["schemas"]["ServerProvider"];
      /** @description The cluster the given server is deployed to. */
      cluster: string;
      features: components["schemas"]["ServerFeatures"];
      constraints: components["schemas"]["ServerConstraints"];
      state: components["schemas"]["ServerState"];
      /**
       * ServerEvents 
       * @description A collection of timestamps for each event in the server's lifetime.
       */
      events: {
        /** @description The timestamp of when the server was created. */
        created: components["schemas"]["DateTime"];
        /** @description The timestamp of when the server was updated. */
        updated: components["schemas"]["DateTime"];
        /** @description The timestamp of when the server was deleted. */
        deleted: components["schemas"]["DateTime"];
        /** @description Information about the provisioning of the server. */
        provisioning: {
          /** @description A timestamp of when the server started provisioning. */
          started: components["schemas"]["DateTime"];
          /** @description A timestamp of when the server completed provisioning. */
          completed: components["schemas"]["DateTime"];
        };
      };
      meta?: components["schemas"]["ServerMeta"];
    };
    /**
     * ServerIncludes 
     * @description A resource thats associated with a server.
     */
    ServersIncludes: {
      [key: string]: components["schemas"]["Server"] | undefined;
    };
    /**
     * LocationGeographic 
     * @description Geographic information about a provider location.
     */
    Geographic: {
      /** @description The latitude of the given provider datacenter. */
      latitude: number;
      /** @description The longitude of the given provider datacenter. */
      longitude: number;
      /** @description The city the datacenter resides in. */
      city: string;
      /** @description The state the datacenter resides in. */
      state: string;
      /** @description The country the datacenter resides in. */
      country: string;
      /** @description The region the datacenter resides in. */
      region: string;
    };
    /**
     * LocationProvider 
     * @description Information about the locaiton of the provider.
     */
    LocationProvider: {
      /** @description An identifier for the given provider */
      identifier: string;
      /** @description A location name returned from the provider. */
      location: string;
      /** @description A location code returned from the provider. */
      code: string;
    };
    /**
     * InfrastructureProviderLocation 
     * @description Location information for a given provider.
     */
    InfrastructureProviderLocation: {
      id: string;
      /** @description A name for the location. */
      name: string;
      geographic: components["schemas"]["Geographic"] | null;
      provider: components["schemas"]["LocationProvider"];
      /** @description A boolean where true means the locaiton is supported by the platform. */
      compatible: boolean;
      /** @description Additional information about available and supported features of the provider location. */
      features: {
        /** @description Available features for the provider location. */
        available: (string)[];
        /** @description Supported features for the provider location. */
        supported: (string)[];
      };
      /** @description An abbreviation for the given provider locaiton. */
      abbreviation: string;
      /** @description Additional information about the given provider locaiton. */
      annotations: {
        [key: string]: string | undefined;
      };
    };
    /**
     * LocationIncludes 
     * @description A resource thats associated with a provider location.
     */
    LocationsIncludes: {
      [key: string]: components["schemas"]["InfrastructureProviderLocation"] | undefined;
    };
    /**
     * IALAuth 
     * @description Infrastructure abstraction layer authentication information.
     */
    IALAuth: {
      /** @description A namespace for the IAL entry. */
      namespace?: string;
      /** @description Information about the region being used. */
      region?: string;
      /** @description The API key used to make a request against the given provider. */
      api_key?: string;
      /** @description A secret. */
      secret?: string;
      /** @description A config string. */
      config?: string;
      /** @description Information about the Cycle properties making the request. */
      cycle?: {
        /** @description The name of the hub. */
        hub_name: string;
        hub_id: components["schemas"]["HubID"];
      };
    };
    /**
     * NativeIntegration 
     * @description Information about a natively supported infrastructure provider.
     */
    NativeIntegration: {
      identifier: components["schemas"]["NativeProviderIdentifier"];
      auth: components["schemas"]["IALAuth"];
    };
    /**
     * AbstractionIntegration 
     * @description Information about an infrastructure provider abstraction.
     */
    AbstractionIntegration: {
      /** @description A name for a given infrastructure abstraction. */
      name: string;
      /** @description The base url, where the abstraction endpoints are located. */
      base_url: string;
      auth?: components["schemas"]["IALAuth"];
    };
    /**
     * InfrastructureProviderIntegration 
     * @description Information about a provider and how it integrates with the platform.
     */
    Integration: {
      native?: components["schemas"]["NativeIntegration"];
      abstraction?: components["schemas"]["AbstractionIntegration"];
    };
    /** ProviderState */
    ProviderState: ({
      /**
       * @description The current state of the provider. 
       * @enum {string}
       */
      current: "new" | "verifying" | "live" | "deleting" | "deleted";
    }) & components["schemas"]["State"];
    /**
     * ProviderMeta 
     * @description A list of meta fields that can be applied to a provider.
     */
    ProviderMeta: {
      locations?: (components["schemas"]["InfrastructureProviderLocation"])[];
    };
    /**
     * Provider 
     * @description A provider resource.
     */
    Provider: {
      id: components["schemas"]["ID"];
      hub_id: components["schemas"]["HubID"];
      integration: components["schemas"]["Integration"];
      /** @description A string describing the name of a provider */
      name?: string;
      /**
       * ProviderEvents 
       * @description A collection of timestamps for each event in the provider's lifetime.
       */
      events: {
        /** @description The timestamp of when the provider was created. */
        created: components["schemas"]["DateTime"];
        /** @description The timestamp of when the provider was updated. */
        updated: components["schemas"]["DateTime"];
        /** @description The timestamp of when the provider was deleted. */
        deleted: components["schemas"]["DateTime"];
        /** @description The timestamp of when the provider was last used to provision a server. */
        last_provision: components["schemas"]["DateTime"];
      };
      creator: components["schemas"]["CreatorScope"];
      state: components["schemas"]["ProviderState"];
      meta?: components["schemas"]["ProviderMeta"];
    };
    /**
     * ProvidersIncludes 
     * @description A resource thats associated with a provider.
     */
    ProvidersIncludes: {
      [key: string]: components["schemas"]["Provider"] | undefined;
    };
    /**
     * ContainersIncludes 
     * @description A resource thats associated with a contianer.
     */
    ContainersIncludes: {
      [key: string]: components["schemas"]["Container"] | undefined;
    };
    /**
     * InstanceIncludes 
     * @description A resource associated with an instance.
     */
    InstanceIncludes: {
      creators?: components["schemas"]["CreatorInclude"];
      servers: components["schemas"]["ServersIncludes"];
      locations: components["schemas"]["LocationsIncludes"];
      providers: components["schemas"]["ProvidersIncludes"];
      containers: components["schemas"]["ContainersIncludes"];
      environments: components["schemas"]["EnvironmentIncludes"];
    };
    /** ContainerStartActionTask */
    ContainerStartAction: {
      /**
       * @description The name of the action to perform. 
       * @enum {string}
       */
      action: "start";
    };
    /** ContainerStopActionTask */
    ContainerStopAction: {
      /**
       * @description The name of the action to perform. 
       * @enum {string}
       */
      action: "stop";
    };
    /** ReconfigureContainer */
    ReconfigureContainer: {
      /**
       * @description The action to take. 
       * @enum {string}
       */
      action: "reconfigure";
      contents: components["schemas"]["Config"];
    };
    /** ReconfigureVolumeTask */
    ReconfigureVolumes: {
      /**
       * @description The action to take. 
       * @enum {string}
       */
      action: "reconfigure.volumes";
      /** @description An array of volume objects to be reconfigured. */
      contents: (components["schemas"]["VolumeSummary"])[];
    };
    /** ReimageContainer */
    Reimage: {
      /**
       * @description The action to take. 
       * @enum {string}
       */
      action: "reimage";
      /** @description Additional information needed to complete the job. */
      contents: {
        /** @description The ID of the image to use when reimaging. */
        image_id: string;
        /** @description A boolean where true signifies the image being used to reimage does not have to have compatibility with the image being replaced. */
        allow_incompatible?: boolean;
        /** @description A boolean where true signifies the user wishes to overwrite the current runtime configuration for the given container during the reimage process. */
        overwrite_runtime_config?: boolean;
      };
    };
    /** ScaleContainer */
    Scale: {
      /**
       * @description The action to take. 
       * @enum {string}
       */
      action: "scale";
      /** @description Additional information needed to complete the job. */
      contents: {
        /** @description The number of desired instances to scale to. */
        instances: number;
      };
    };
    /**
     * ProviderSummary 
     * @description A summary of the provider a given resource is deployed to.
     */
    ProviderSummary: {
      /**
       * @description An identifier for the provider. Custom IAL providers will be listed as `abstraction-<ID>` where the ID is a MongoDB ID. 
       * @enum {string}
       */
      identifier: "equinix-metal" | "vultr" | "aws" | "abstraction-<MongoID>";
      /** @description A location identifier associated with the provider. */
      location: string;
    };
    /**
     * MigrationInstance 
     * @description Information about an instances migration.
     */
    MigrationInstance: {
      /** @description The ID of the instance. */
      instance_id: string;
      /** @description The ID of the server in the context its represented. */
      server_id: string;
    };
    /** InstanceState */
    InstanceState: ({
      /**
       * @description The current state of the instance. 
       * @enum {string}
       */
      current: "new" | "starting" | "reimaging" | "migrating" | "running" | "stopping" | "stopped" | "failed" | "deleting" | "deleted";
      /** @description information about the health of the instance. */
      health?: {
        /** @description A boolean where true represents the instance being healthy. */
        healthy: boolean;
        /** @description A timestamp of the last time the instance health was updated. */
        updated: components["schemas"]["DateTime"];
      };
    }) & components["schemas"]["State"];
    /**
     * Instance 
     * @description A container instance resource.
     */
    Instance: {
      id: components["schemas"]["ID"];
      hub_id: components["schemas"]["HubID"];
      /** @description A container identifier for the container that is associated with this instance. */
      container_id: string;
      /** @description A location identifier that's associated with the server this instance is deployed to. */
      location_id: string;
      /** @description Details about the environment network this instance is a member of. */
      environment: {
        id: components["schemas"]["ID"];
        network_subnet: string;
        subnet: string;
        ipv6: components["schemas"]["IPNet"];
        legacy: {
          host: number;
          subnet: number;
          ipv4: components["schemas"]["IPNet"];
        } | null;
        mac_addr: string;
        vxlan_tag: number;
      };
      /** @description Additional information about the instance relating to its setting as being stateful. */
      stateful: {
        id: components["schemas"]["ID"];
        /** @description The base hostname for the given instance. */
        base_hostname: string;
      } | null;
      provider: components["schemas"]["ProviderSummary"];
      /** @description An identifier for the server this instance is deployed to. */
      server_id: string;
      /**
       * @description The state as it relates to the following. * `active` - instance can be started or stopped. * `purge` - instance should be deleted. * `hibernate` - instance is active but not allowed to run. 
       * @enum {string}
       */
      ready_state: "active" | "purge" | "hibernate";
      /** @description The hostname of the instance. */
      hostname: string;
      /** @description If this instance is scheduled to be migrated or has been migrated in the past, there will be information populating this field with the server that the instance came from or the server that the instance was moved to and the instance ID. */
      migration: {
        to?: components["schemas"]["MigrationInstance"];
        from?: components["schemas"]["MigrationInstance"];
        /** @description A timestamp of when the migration was started. */
        started?: components["schemas"]["DateTime"];
        /** @description A timestamp of when the migration was completed. */
        completed?: components["schemas"]["DateTime"];
        /** @description A key used by the platform to verify the migration. */
        key: string;
        /** @description A boolean where true represents the volumes for the instance should be copied to the new server as well. */
        copy_volumes: boolean;
      } | null;
      /** @description If the instance was purged, the timestamp of when that happened. */
      purge_time?: components["schemas"]["DateTime"];
      /**
       * @description If the instance is an instance of a service container that will be denoted here. 
       * @enum {string|null}
       */
      service: "discovery" | "vpn" | "loadbalancer" | null;
      state: components["schemas"]["InstanceState"];
      /**
       * InstanceEvents 
       * @description A collection of timestamps for each event in the instnaces lifetime.
       */
      events: {
        /** @description The timestamp of when the instance was created. */
        created: components["schemas"]["DateTime"];
        /** @description The timestamp of when the instance was updated. */
        updated: components["schemas"]["DateTime"];
        /** @description The timestamp of when the instance was deleted. */
        deleted: components["schemas"]["DateTime"];
        /** @description The timestamp of when the instance was started. */
        first_started: components["schemas"]["DateTime"];
      };
    };
    /**
     * SSHToken 
     * @description An SSH token resource.
     */
    SSHToken: {
      id: components["schemas"]["ID"];
      /** @description The ID of the instance being connected to. */
      instance_id: string;
      /** @description The ID of the container from which the instance was created. */
      container_id: string;
      hub_id: components["schemas"]["HubID"];
      creator: components["schemas"]["CreatorScope"];
      /**
       * SSHTokenEvents 
       * @description A collection of timestamps for each event in the SSH token's lifetime.
       */
      events: {
        /** @description The timestamp of when the SSH token was created. */
        created: components["schemas"]["DateTime"];
        /** @description The timestamp of when the SSH token was used. */
        used: components["schemas"]["DateTime"];
        /** @description The timestamp of when the SSH token expires. */
        expires: components["schemas"]["DateTime"];
      };
      /** @description A boolean where true represents the token as being a valid token to be used for connection. */
      valid: boolean;
    };
    /**
     * SSHConnectionResponse 
     * @description SSH connection information for a given container instance.
     */
    SSHResponse: {
      token: components["schemas"]["SSHToken"];
      /** @description The SSH connection response secret. */
      secret: string;
      /** @description The SSH connection response address. */
      address: string;
    };
    /** MigrateAction */
    Migrate: {
      /**
       * @description The name of the action to perform. 
       * @enum {string}
       */
      action: "migrate";
      contents: {
        /** @description The ID of the server being migrated to. */
        destination_server_id: string;
        /** @description Information about additonal configuration settings used when migrating a stateful instance. */
        stateful?: {
          /** @description A boolean where true represents the desire to copy the contents of the volume for a given stateful instance with the migration. */
          copy_volumes: boolean;
        };
      };
    };
    /** RevertMigrationAction */
    RevertMigration: {
      /**
       * @description The name of the action to perform. 
       * @enum {string}
       */
      action: "migrate_revert";
    };
    /**
     * DeployedVolume 
     * @description A deployed volume resource.
     */
    DeployedVolume: {
      /** @description The ID of the server the instance is deployed to. */
      server_id: string;
      /** @description The ID of the container the instance was created from. */
      container_id: string;
      /** @description The ID for the volume withing the context of the container. */
      container_volume_id: string;
      /** @description The ID for the container instance this volume is attached to. */
      instance_id: string;
      /** @description A hash used as part of the identification mechanisms for the platform and API. */
      hash: string;
      /** @description The path where the volume is mounted on the instnace filesystem. */
      path: string;
      /** @description Storage information for the volume. */
      storage: {
        /** @description The amount of volume storage used, in MB's */
        used: number;
        /** @description The total amount of volume storage available, in MB's. */
        total: number;
      };
    };
    /**
     * InstanceVolumeSFTP 
     * @description Information about connecting to a instance volume over SFTP.
     */
    SFTP: {
      /** @description The hostname for connecting to the volume over SFTP. */
      host: string;
      /** @description The port number to use when connecting. */
      port: number;
      /** @description The username to use when connecting. */
      username: string;
      /** @description Password configuration settings for the remote access of the container volume. */
      password: {
        /**
         * @description The hashing algorithm used to has the password. 
         * @enum {string}
         */
        algorithm: "raw" | "sha512" | "md5";
        /** @description The raw or hashed password. */
        data: string;
      };
    };
    /**
     * InstanceVolume 
     * @description A container instance volume resource.
     */
    InstanceVolume: {
      id: components["schemas"]["ID"];
      config: components["schemas"]["ContainerVolume"];
      deployed: components["schemas"]["DeployedVolume"];
      sftp: components["schemas"]["SFTP"];
    };
    /**
     * InstanceTelemetryReportRequest 
     * @description A summary of report requests and when they occured.
     */
    TelemetryReportRequest: {
      /** @description The ID of the instance this telemetry reporting pertains to. */
      instance_id: string;
      /** @description A timestamp of when the snapshot began. */
      start: components["schemas"]["DateTime"];
      /** @description A timestamp of when the snapshot ended. */
      end: components["schemas"]["DateTime"];
    };
    /**
     * InstanceTelemetryCPUSnapshot 
     * @description A telemetry snapshot pertaining to CPU usage.
     */
    CPUSnapshot: {
      /** @description Usage statistics. */
      usage: {
        /** @description Total amount of VPU time since last restart. */
        total: number;
        /** @description An array showing CPU core specific usage in nanoseconds since the last restart. */
        per_core: (number)[];
        /** @description The amount of time in nanoseconds used by the kernel since last restart. */
        kernel: number;
        /** @description The amount of time in nanoseconds taken up for user processes. */
        user: number;
      };
      /** @description Throttling statistics. */
      throttling: {
        /** @description The amount of periods that have passed since the last restart. */
        periods?: number;
        /** @description How many times the instance has been throttled for using all its alloted CPU during a period. */
        throttled_periods?: number;
        /** @description The amount of time in nanoseconds this instnace has spent with throttled CPU resources. */
        throttled_time?: number;
      };
    };
    /** MemoryData */
    MemoryData: {
      /** @description The number in bytes of memory being used by the instance at the time of the snapshot. */
      usage?: number;
      /** @description The highest amoun tof memory usage since the last restart. */
      max_usage?: number;
      /** @description The number of times the memory liimit was exceeded for the instance. */
      fail_count?: number;
      /** @description The maximum number of bytes of memory this instance has acess to. */
      limit?: number;
    };
    /**
     * InstanceTelemetryMemorySnapshot 
     * @description A snapshot of memory usage statistics.
     */
    MemorySnapshot: {
      /** @description The number of bytes of page cache memory being used by this instance. */
      cache?: number;
      /** @description The memory usage data. */
      usage?: components["schemas"]["MemoryData"];
      /** @description Memory swap usage data. */
      swap_usage?: components["schemas"]["MemoryData"];
      /** @description Kernal memory usage. */
      kernel_usage?: components["schemas"]["MemoryData"];
      /** @description Kernel TCP buffer usage. */
      kernel_tcp_usage?: components["schemas"]["MemoryData"];
    };
    /**
     * InstanceTelemetryProcessesSnapshot 
     * @description Process information for a given snapshot.
     */
    ProcessesSnapshot: {
      /** @description The current number of running processes in the instance. */
      current?: number;
      /** @description The maximum number of running processes for the instance. */
      limit?: number;
    };
    /**
     * HugeTLB 
     * @description HugeTLB data.
     */
    HugeTLB: {
      /** @description The number of bytes being consumed by huge pages of all sizes. */
      usage?: number;
      /** @description The maximum number of bytes allowed to be used for huge pages for this instance. */
      max?: number;
      /** @description The number of times the hugeTLB memory limit has been exceeded by this instance. */
      fail_count?: number;
    };
    /**
     * InstanceTelemetryResourceSnapshot 
     * @description A resource snapshot that shows instance telemetry.
     */
    ResourceSnapshot: {
      /** @description A timestamp of the time this snapshot was captured at. */
      time: components["schemas"]["DateTime"];
      hub_id?: components["schemas"]["HubID"];
      /** @description An ID for an associated container. */
      container_id?: string;
      /** @description An ID for an associated instance. */
      instance_id?: string;
      /** @description An ID for an associated environment. */
      environment_id?: string;
      cpu: components["schemas"]["CPUSnapshot"];
      memory: components["schemas"]["MemorySnapshot"];
      processes: components["schemas"]["ProcessesSnapshot"];
      hugetlb?: components["schemas"]["HugeTLB"];
    };
    /**
     * InstanceTelemetryReport 
     * @description An instance telemetry report.
     */
    InstanceTelemetryReport: {
      request: components["schemas"]["TelemetryReportRequest"];
      /** @description An array of telemetry snapshots. */
      snapshots: (components["schemas"]["ResourceSnapshot"])[];
    };
    /**
     * ServerInstances 
     * @description Information about the instances on a server.
     */
    ServersList: {
      id: components["schemas"]["ID"];
      /**
       * @description A summary of resources by state 
       * @example {
       *   "state": {
       *     "new": 0,
       *     "starting": 0,
       *     "reimaging": 1,
       *     "migrating": 1,
       *     "running": 5,
       *     "stopping": 0,
       *     "failed": 0,
       *     "deleting": 0,
       *     "deleted": 0
       *   },
       *   "total": 7,
       *   "available": 5
       * }
       */
      instances: {
        /**
         * CountsByState 
         * @description A count of this resource, grouped by state.
         */
        state: {
          [key: string]: number | undefined;
        };
        /** @description The total number of this resource */
        total: number;
        /** @description The total number of this resource available, less any deleted ones. */
        available: number;
      };
      /** @description The server hostname. */
      hostname: string;
    };
    /**
     * CPUServerSpec 
     * @description Information about the CPU for a given server.
     */
    CPUSpec: {
      /** @description The number of CPUs. */
      count: number;
      /** @description The number of cores. */
      cores?: number;
      /** @description The number of threads. */
      threads?: number;
      /** @description The type of the CPU. */
      type: string;
      /** @description A boolean where true represents the CPU is shared. */
      shared?: boolean;
      /** @description Extra information about the CPU if there is any. */
      extra?: {
        [key: string]: string | undefined;
      };
    };
    /**
     * GPUServerSpec 
     * @description Information about a given servers GPU resources.
     */
    GPUSpec: {
      /** @description The number of GPUs. */
      count: number;
      /** @description The number of cores. */
      cores?: number;
      /** @description The amount of virtaul RAM for the GPU. */
      vram_gb?: number;
      /** @description The type of the GPU. */
      type: string;
      /** @description A boolean where true represents the GPU is shared. */
      shared?: boolean;
      /** @description Extra information about the GPU if there is any. */
      extra?: {
        [key: string]: string | undefined;
      };
    };
    /**
     * MemoryServerSpec 
     * @description Information about the memory resources of a given server.
     */
    MemorySpec: {
      /** @description A number that represents the memory resources in GB. */
      size_gb: number;
      /** @description The type of the memory resources. */
      type: string;
      /** @description Extra inforamtion about the memory resources. */
      extra: {
        [key: string]: string | undefined;
      };
    };
    /**
     * StorageServerSpec 
     * @description Information about the storage resources for a given server.
     */
    StorageSpec: {
      /** @description The number of storage devices for a given server. */
      count: number;
      /** @description The total amount of storage on a given server, in GB. */
      size_gb: number;
      /** @description The type of the storage device(s). */
      type: string;
      /** @description Extra information about the storage resources for a given server. */
      extra: {
        [key: string]: string | undefined;
      };
    };
    /**
     * NetworkServerSpec 
     * @description Information about the network resources for a given server.
     */
    NetworkSpec: {
      /** @description The number of network resources for a given server. */
      count: number;
      /**
       * @description The scope of the interfaces. 
       * @enum {string}
       */
      scope: "public" | "private" | "shared";
      /** @description The network throughput in MB(per second). */
      throughput: number;
      /** @description The type of the NIC. */
      type: string;
    };
    /**
     * FeaturesServerSpec 
     * @description The spec for server features.
     */
    FeaturesSpec: {
      /** @description The type of raid supported, if any. */
      raid: string | null;
      /** @description Features specific to AWS. */
      aws?: {
        /** @description A boolean where true indicates this is a machine that can support a much higher networking throughput. */
        ena_support: boolean;
        /** @description A boolean where true indicates this is a machine that can support higher storage throughput. */
        ebs_optimized: boolean;
      };
    };
    /**
     * ServerSpecs 
     * @description Specs for a given server
     */
    ServerSpecs: {
      cpu: components["schemas"]["CPUSpec"];
      gpu: components["schemas"]["GPUSpec"];
      memory: components["schemas"]["MemorySpec"];
      storage: (components["schemas"]["StorageSpec"])[];
      network: (components["schemas"]["NetworkSpec"])[];
      features: components["schemas"]["FeaturesSpec"];
    };
    /**
     * ProviderServerSpec 
     * @description Higher level information about a providers server.
     */
    ProviderServerSpec: {
      /** @description A provider identifier */
      identifier: string;
      /** @description A category for the server. */
      category: string;
      /** @description A class for the server. */
      class?: string;
      /** @description The model of the server. */
      model: string;
      /** @description A plan identifier, if there is one. */
      plan_identifier?: string;
      /** @description A list of location ID's this server is available. */
      locations: (string)[];
      availability_zones?: {
        [key: string]: (string)[] | undefined;
      };
    };
    /**
     * ProviderServer 
     * @description A server from a provider.
     */
    ProviderServer: {
      id: components["schemas"]["ID"];
      /** @description A name for the server. */
      name: string;
      /** @description A description of the server. */
      description: string;
      specs: components["schemas"]["ServerSpecs"];
      provider: components["schemas"]["ProviderServerSpec"];
      price: components["schemas"]["BillingAmount"];
      /** @description A boolean where true signifies this server is compatible with the platform. */
      compatible: boolean;
      /** @description A boolean where true signifies the server has a limited amount of resources and should only be used for very lightweight workloads. */
      low_resource: boolean;
      /** @description An array of location IDs where this server type is available. */
      location_ids: (string)[];
    };
    /**
     * ProviderServers.Server 
     * @description A resources that assocaited with a provider server.
     */
    ProviderServersServerIncludes: {
      [key: string]: components["schemas"]["ProviderServer"] | undefined;
    };
    /**
     * ServerIncludes 
     * @description A resource associated with a server.
     */
    ServerIncludes: {
      locations: components["schemas"]["LocationsIncludes"];
      models: components["schemas"]["ProviderServersServerIncludes"];
      providers: components["schemas"]["ProvidersIncludes"];
    };
    /**
     * BackupTarget 
     * @description A target for the given backup.
     */
    Target: {
      /**
       * @description The target service to be used for a backup. 
       * @enum {string}
       */
      destination: "backblaze-b2";
      /** @description The target for where to store the backup on the backup destination service. */
      path: string;
      /** @description The total size of the backup. */
      size: number;
    };
    /** BackupState */
    BackupState: ({
      /**
       * @description The current state of the backup. 
       * @enum {string}
       */
      current: "saving" | "live" | "deleting" | "deleted";
    }) & components["schemas"]["State"];
    /**
     * Backup 
     * @description A container backup resource.
     */
    Backup: {
      id: components["schemas"]["ID"];
      hub_id: components["schemas"]["HubID"];
      /** @description The ID of the given container. */
      container_id: string;
      /** @description The ID of the instance the backup belongs to. */
      instance_id: string;
      target: components["schemas"]["Target"];
      state: components["schemas"]["BackupState"];
      /**
       * BackupEvents 
       * @description A collection of timestamps for each event in the backup's lifetime.
       */
      events: {
        /** @description The timestamp of when the backup was created. */
        created: components["schemas"]["DateTime"];
        /** @description The timestamp of when the backup was updated. */
        updated: components["schemas"]["DateTime"];
        /** @description The timestamp of when the backup was deleted. */
        deleted: components["schemas"]["DateTime"];
      };
    };
    /**
     * BackupLogs 
     * @description Backup logs for a given container.
     */
    Logs: {
      id: components["schemas"]["ID"];
      /** @description An identifier for the backup. */
      backup_id: string;
      hub_id: components["schemas"]["HubID"];
      /**
       * @description The type of the backup log. 
       * @enum {string}
       */
      type: "restore" | "backup";
      /** @description The log. */
      log: string;
      /**
       * BackupLogEvents 
       * @description A collection of timestamps for each event in the backup log's lifetime.
       */
      events: {
        /** @description The timestamp of when the backup log was created. */
        created: components["schemas"]["DateTime"];
        /** @description The timestamp of when the backup log was updated. */
        updated: components["schemas"]["DateTime"];
        /** @description The timestamp of when the backup log was deleted. */
        deleted: components["schemas"]["DateTime"];
      };
    };
    /** DNSZoneState */
    ZoneState: ({
      /**
       * @description The current state of the zone. 
       * @enum {string}
       */
      current: "new" | "pending" | "verifying" | "live" | "disabled" | "deleting" | "deleted";
    }) & components["schemas"]["State"];
    /**
     * DNSZone 
     * @description DNS (Domain Name System), in short, is a decentralized naming system for computers, services, or other resources connected to the internet or a private network. It is what allows the translation of a URL, such as http://example.com, to an IP address.
     */
    Zone: {
      id: components["schemas"]["ID"];
      hub_id: components["schemas"]["HubID"];
      creator: components["schemas"]["CreatorScope"];
      /** @description The origin for the given DNS zone. */
      origin: string;
      /** @description A boolean where true represents this zone is a hosted zone. */
      hosted: boolean;
      state: components["schemas"]["ZoneState"];
      /**
       * ZoneEvents 
       * @description A collection of timestamps for each event in the DNS zone's lifetime.
       */
      events: {
        /** @description The timestamp of when the DNS zone was created. */
        created: components["schemas"]["DateTime"];
        /** @description The timestamp of when the DNS zone was updated. */
        updated: components["schemas"]["DateTime"];
        /** @description The timestamp of when the DNS zone was deleted. */
        deleted: components["schemas"]["DateTime"];
        /** @description The timestamp of when the DNS zone was last_verification. */
        last_verification: components["schemas"]["DateTime"];
        /** @description The timestamp of when the DNS zone was verified. */
        verified: components["schemas"]["DateTime"];
      };
    };
    /**
     * ZoneIncludes 
     * @description All includable resources linkable to the given Zone.
     */
    ZoneIncludes: {
      creators?: components["schemas"]["CreatorInclude"];
    };
    /**
     * RecordIncludes 
     * @description All includable resources linkable to the given records.
     */
    RecordIncludes: {
      creators?: components["schemas"]["CreatorInclude"];
      containers?: components["schemas"]["ContainersIncludes"];
    };
    /**
     * DNSTLSAttempt 
     * @description A DNS TLS certificate generation attempt resource.
     */
    Attempt: {
      id: components["schemas"]["ID"];
      hub_id: components["schemas"]["HubID"];
      /** @description A list of domains associated with the attempt. */
      domains: (string)[];
      /** @description A timestamp for when the attempt took place. */
      time: components["schemas"]["DateTime"];
      /** @description A boolean where true means the attept was successful at creating the TLS certificate. */
      success: boolean;
      /** @description If success is false this property will be populated with an error. */
      error?: string;
    };
    /**
     * Certificate 
     * @description A DNS TLS certificate.
     */
    DnsTlsCertificate: {
      id: components["schemas"]["ID"];
      hub_id: components["schemas"]["HubID"];
      /** @description A list of domains associated with the certificate. */
      domains: (string)[];
      /**
       * CertificateEvents 
       * @description A collection of timestamps for each event in the certificate's lifetime.
       */
      events: {
        /** @description [unused] */
        created?: components["schemas"]["DateTime"];
        /** @description [unused] */
        updated?: components["schemas"]["DateTime"];
        /** @description [unused] */
        deleted?: components["schemas"]["DateTime"];
        /** @description When the certificate was generated; useful for calculating expiration (+90 days) */
        generated?: components["schemas"]["DateTime"];
      };
      /** @description The certificate bundle */
      bundle: string;
      /** @description The private key for the certificate */
      private_key: string;
    };
    /**
     * ActivityContext 
     * @description ID context for resources associated with an activity.
     */
    Context: {
      /** @description An ID for the given resource. */
      environment_id?: string;
      /** @description An ID for the given resource. */
      container_id?: string;
      /** @description An ID for the given resource. */
      instance_id?: string;
      /** @description An ID for the given resource. */
      server_id?: string;
      /** @description An ID for the given resource. */
      stack_id?: string;
      /** @description An ID for the given resource. */
      dns_zone_id?: string;
    };
    /**
     * ActivitySession 
     * @description Session info about the activity entry.
     */
    Session: ({
      /** @description URL endpoint assocaited with the activity context - does not include domain. */
      url: string;
      /** @description The IP of the account associated with the session. */
      ip: string;
      /** @description The API key ID. */
      api_key: string | null;
    }) | null;
    /**
     * ActivityDetail 
     * @description Details about a given event that is part of an activity.
     */
    Detail: {
      id?: components["schemas"]["ID"];
      /** @description A number describing the amount of the resource that exists. */
      number?: number;
      /** @description Additional information. */
      string?: string;
    };
    /**
     * ActivityChange 
     * @description An object with information of details for before and after a resource changed.
     */
    Change: {
      /** @description A description of the resource that was changed. */
      component: string;
      before?: components["schemas"]["Detail"];
      after?: components["schemas"]["Detail"];
    };
    /**
     * Activity 
     * @description A resource representing information about activity taking place on a given hub.
     */
    Activity: {
      id: components["schemas"]["ID"];
      hub_id: components["schemas"]["HubID"];
      /** @description Userscope */
      user: {
        /**
         * @description The type of user. 
         * @enum {string}
         */
        type: "account" | "environment" | "platform" | "platform-pipeline" | "employee" | "api-key" | "visitor";
        /** @description The given users ID. */
        id: string;
      };
      /** @description A number representing how verbose the acitivty reporting is for a given hub. */
      verbosity: number;
      context: components["schemas"]["Context"];
      session?: components["schemas"]["Session"];
      /** @description An array of changes. */
      changes: (components["schemas"]["Change"])[];
      /** @description A record of additional annotations for the activity. */
      annotations: {
        [key: string]: string | undefined;
      };
      /** @description An object describing a given activity error. */
      error: {
        /** @description The error message. */
        message: string;
      } | null;
      /** @description An object holding information about a component. */
      component: {
        id: components["schemas"]["ID"];
        /** @description The type of component. */
        type: string;
      } | null;
      /** @description An array of tags that denote things such as a type of security event, or can be user-provided. */
      tags?: (string)[];
      /**
       * @description A status for the given activity. 
       * @enum {string}
       */
      status: "info" | "warning" | "request" | "success" | "error" | "alert" | "recovery";
      /**
       * @description The activity event. 
       * @enum {string}
       */
      event: "hub.task.delete" | "hub.update" | "hub.create" | "hub.images.prune" | "hub.task.images.prune" | "environment.initialize" | "environment.start" | "environment.stop" | "environment.task.start" | "environment.task.stop" | "environment.task.initialize" | "environment.delete" | "environment.task.delete" | "environment.update" | "environment.create" | "environment.services.discovery.task.reconfigure" | "environment.services.lb.task.reconfigure" | "environment.services.vpn.task.reconfigure" | "image.import" | "image.task.import" | "image.update" | "image.create" | "image.delete" | "image.task.delete" | "image.source.create" | "image.source.update" | "image.source.task.delete" | "container.create" | "container.update" | "container.initialize" | "container.start" | "container.task.start" | "container.stop" | "container.task.stop" | "container.reconfigure" | "container.task.reconfigure" | "container.reconfigure.volumes" | "container.task.reconfigure.volumes" | "container.reimage" | "container.task.reimage" | "container.scale" | "container.task.scale" | "container.delete" | "container.task.delete" | "container.instance.error" | "container.instance.sftp.login" | "container.instance.migration.start" | "container.instance.migration.revert" | "container.instance.delete" | "container.instances.delete" | "container.instances.create" | "container.instance.healthcheck.restarted" | "container.backup.create" | "container.backup.restore" | "container.backup.task.restore" | "container.backup.delete" | "container.backup.task.delete" | "dns.zone.task.verify" | "dns.zone.task.delete" | "dns.zone.update" | "dns.zone.create" | "dns.zone.verify" | "dns.zone.delete" | "dns.zone.record.cert.generate.auto" | "dns.zone.record.cert.generate" | "dns.zone.record.delete" | "dns.zone.record.update" | "dns.zone.record.create" | "dns.zone.record.task.delete" | "dns.zone.record.task.cert.generate" | "stack.task.delete" | "stack.update" | "stack.create" | "stack.task.prune" | "stack.build.create" | "stack.build.generate" | "stack.build.deploy" | "stack.build.delete" | "stack.build.task.generate" | "stack.build.task.delete" | "infrastructure.server.task.delete" | "infrastructure.server.task.restart" | "infrastructure.server.task.provision" | "infrastructure.server.update" | "infrastructure.server.delete" | "infrastructure.server.restart" | "infrastructure.server.compute.restart" | "infrastructure.server.provision" | "infrastructure.server.live" | "infrastructure.server.services.sftp.lockdown.auto" | "infrastructure.server.reconfigure.features" | "infrastructure.server.task.reconfigure.features" | "infrastructure.provider.create" | "infrastructure.provider.update" | "infrastructure.provider.delete" | "sdn.network.task.delete" | "sdn.network.update" | "sdn.network.create" | "sdn.network.task.reconfigure" | "infrastructure.ips.pool.task.delete" | "billing.order.task.confirm" | "billing.order.confirm" | "billing.invoice.task.void" | "billing.invoice.task.credit" | "billing.invoice.task.refund" | "billing.invoice.task.pay" | "billing.invoice.pay" | "billing.method.update" | "billing.method.create" | "billing.method.delete" | "billing.method.task.delete" | "hub.apikey.create" | "hub.apikey.update" | "hub.apikey.delete" | "hub.membership.create" | "hub.membership.delete" | "pipeline.update" | "pipeline.task.delete" | "pipeline.delete" | "pipeline.create" | "pipeline.task.trigger" | "pipeline.trigger" | "pipeline.key.update" | "pipeline.key.delete" | "pipeline.key.create";
      /** @description A timestamp for when the activity took place. */
      time: components["schemas"]["DateTime"];
    };
    /**
     * IPPoolProvider 
     * @description A IP Pool provider.
     */
    PoolProvider: {
      /**
       * @description An identifier for a native provider. 
       * @enum {string}
       */
      identifier: "equinix-metal" | "vultr" | "aws";
      /** @description Information about the location of the provider this pool is associated with. */
      location: string;
      /** @description A reservation identifier associated with the pool reservation. */
      reservation: string;
      /** @description A server identifier associated with the pool. */
      server: string;
      /** @description An identifier linked to the server assingment of the IP pool. */
      server_assignment: string;
    };
    /** PoolState */
    PoolState: ({
      /**
       * @description The current state of the pool. 
       * @enum {string}
       */
      current: "live" | "releasing" | "released";
    }) & components["schemas"]["State"];
    /**
     * InfrastructureIPPool 
     * @description An IP Pool resource
     */
    Pool: {
      id: components["schemas"]["ID"];
      hub_id: components["schemas"]["HubID"];
      /** @description An ID associated with a server resource. */
      server_id: string;
      /** @description An ID associated with a location resource. */
      location_id: string;
      /**
       * @description The type of IP pool. 
       * @enum {string}
       */
      kind: "ipv4" | "ipv6";
      provider: components["schemas"]["PoolProvider"];
      /** @description A boolean where true represents the pool as a floating IP pool. */
      floating: boolean;
      /** @description Data about IPs in the pool. */
      ips: {
        /** @description The total number of IPs in the pool. */
        total: number;
        /** @description Of the total number of IP's how many are available to be assigned. */
        available: number;
      };
      /** @description Network information about the pool. */
      block: {
        /** @description A cidr for the pool. */
        cidr: string;
        /** @description A gateway for the pool. */
        gateway: string;
        /** @description A netmask for the pool. */
        netmask: string;
        /** @description A network for the pool. */
        network: string;
      };
      state: components["schemas"]["PoolState"];
    };
    /** ApiKeyState */
    ApiKeyState: ({
      /**
       * @description The current state of the API key. 
       * @enum {string}
       */
      current: "new" | "configuring" | "live" | "inactive" | "deleting" | "deleted";
    }) & components["schemas"]["State"];
    /**
     * ApiKey 
     * @description An API key resource
     */
    ApiKey: {
      id: components["schemas"]["ID"];
      hub_id: components["schemas"]["HubID"];
      /** @description A name for the API key. */
      name: string;
      creator: components["schemas"]["CreatorScope"];
      /** @description The API key secret. */
      secret: string;
      /** @description Information about this members permissions for a given resource. */
      permissions: {
        /** @description A boolean where true represents the member has access to view and manage all environments for the resource. */
        all_environments: boolean;
        /** @description An array of environments this resource has access to. */
        environments: ({
            id: components["schemas"]["ID"];
            /** @description A boolean where true represents this environment can be managed by the resource (i.e. its not just read-only). */
            manage: boolean;
          })[];
      };
      /** @description An object holding information about the capabilities of this API key. */
      capabilities: {
        /** @description A boolean where true represents this key has all available capabilities. */
        all: boolean;
        /** @description An array a capabilities this key has. */
        specific: (components["schemas"]["Capability"])[];
      };
      /** @description An array of IP's this API key can make calls from. */
      ips: (string)[] | null;
      state: components["schemas"]["ApiKeyState"];
      /**
       * HubEvents 
       * @description A collection of timestamps for each event in the hub's lifetime.
       */
      events: {
        /** @description The timestamp of when the hub was created. */
        created: components["schemas"]["DateTime"];
        /** @description The timestamp of when the hub was updated. */
        updated: components["schemas"]["DateTime"];
        /** @description The timestamp of when the hub was deleted. */
        deleted: components["schemas"]["DateTime"];
      };
    };
    /** NetworkState */
    NetworkState: ({
      /**
       * @description The current state of the network. 
       * @enum {string}
       */
      current: "live" | "deleting" | "deleted";
    }) & components["schemas"]["State"];
    /**
     * PrivateNetwork 
     * @description Private network information for a Cycle SDN.
     */
    SDNPrivateNetwork: {
      /** @description A tag used to ensure proper routing. */
      vxlan_tag: number;
      /** @description The subnet of the private network. */
      subnet: string;
      /** @description A number used to ensure a MAC address exists for each network. */
      mac_addr_suffix: number;
      /** @description IPv6 infromation for the network. */
      ipv6: {
        /** @description The networks IPv6 base. */
        ip: string;
        /** @description The private network CIDR. */
        cidr: string;
      };
    };
    /**
     * SDNNetwork 
     * @description SDN Network resource.
     */
    SDNNetwork: {
      id: components["schemas"]["ID"];
      /** @description The name of the network. */
      name: string;
      /** @description A network identifier used to construct http calls that specifically use this network over another. */
      identifier: string;
      /** @description The infrastructure cluster the environments belonging to this network belong to. */
      cluster: string;
      creator: components["schemas"]["CreatorScope"];
      hub_id: components["schemas"]["HubID"];
      state: components["schemas"]["NetworkState"];
      private_network: components["schemas"]["SDNPrivateNetwork"];
      /** @description An array of environments and timestamps. */
      environments: ({
          id: components["schemas"]["ID"];
          /** @description A timestamp of when the environment was added. */
          added: components["schemas"]["DateTime"];
        })[];
      /**
       * NetworkEvents 
       * @description A collection of timestamps for each event in the image's lifetime.
       */
      events: {
        /** @description The timestamp of when the image was created. */
        created: components["schemas"]["DateTime"];
        /** @description The timestamp of when the image was updated. */
        updated: components["schemas"]["DateTime"];
        /** @description The timestamp of when the image was deleted. */
        deleted: components["schemas"]["DateTime"];
      };
    };
    /**
     * ImageSourceAbout 
     * @description Information about the image source resource.
     */
    ImageSourceAbout: {
      /** @description Some information about the image source resource. */
      description: string;
    };
    /**
     * ImageSourceCreateStep 
     * @description Settings for the image source create step for a pipeline.
     */
    ImageSourceCreateStep: {
      /** @description An identifier for the step. */
      identifier?: string;
      options?: {
        skip?: boolean;
      };
      /**
       * @description The action that the step takes. 
       * @enum {string}
       */
      action: "image.source.create";
      details: {
        name: string;
        type: string;
        about?: components["schemas"]["ImageSourceAbout"];
        origin: components["schemas"]["ImageSourceOrigin"];
      };
    };
    /**
     * StepResourceLocation 
     * @description Either a details ID or details from where the ID is an identifier for an existing resource and a from is an identifier from a previous step in this pipeline.
     */
    ResourceLocation: OneOf<[{
      /** @description The ID of an existing resource that exists before the pipeline is run. */
      id?: string;
    }, {
      /** @description The stage and step to report on. */
      from?: {
        /** @description An identifier for the stage the step being reported on resides in. */
        stage?: string;
        /** @description An identifier for the step to be reported on. */
        step: string;
      };
    }]>;
    /**
     * ImageCreateStep 
     * @description Settings for the image create step for a pipeline.
     */
    ImageCreateStep: {
      /** @description An identifier for the step. */
      identifier?: string;
      options?: {
        skip?: boolean;
      };
      /**
       * @description The action that the step takes. 
       * @enum {string}
       */
      action: "image.create";
      details: {
        name?: string;
        source: components["schemas"]["ResourceLocation"];
      };
    };
    /**
     * ImageImportStep 
     * @description Settings for the image import step for a pipeline.
     */
    ImageImportStep: {
      /** @description An identifier for the step. */
      identifier?: string;
      options?: {
        skip?: boolean;
      };
      /**
       * @description The action that the step takes. 
       * @enum {string}
       */
      action: "image.import";
      details: components["schemas"]["ResourceLocation"];
    };
    /**
     * ImagePruneStep 
     * @description Settings for the images prune step for a pipeline.
     */
    ImagesPruneStep: {
      /** @description An identifier for the step. */
      identifier?: string;
      options?: {
        skip?: boolean;
      };
      /**
       * @description The action that the step takes. 
       * @enum {string}
       */
      action: "images.prune";
      details: {
        source_ids: (components["schemas"]["ID"])[];
      };
    };
    /**
     * ContainerCreateStep 
     * @description Settings for the create container step for a pipeline.
     */
    ContainerCreateStep: {
      /** @description An identifier for the step. */
      identifier?: string;
      options?: {
        skip?: boolean;
      };
      /**
       * @description The action that the step takes. 
       * @enum {string}
       */
      action: "container.create";
      details: components["schemas"]["ResourceLocation"] & {
        name: string;
        environment: components["schemas"]["ResourceLocation"];
        image: components["schemas"]["ResourceLocation"];
        stateful: boolean;
        annotations: Record<string, never>;
        config: components["schemas"]["Config"];
        volumes: (components["schemas"]["ContainerVolume"])[];
      };
    };
    /**
     * ContainerStartStep 
     * @description Settings for starting a container in a pipeline
     */
    ContainerStartStep: {
      /** @description An identifier for the step. */
      identifier?: string;
      options?: {
        skip?: boolean;
      };
      /**
       * @description The action that the step takes. 
       * @enum {string}
       */
      action: "container.start";
      details: components["schemas"]["ResourceLocation"];
    };
    /**
     * ContainerStopStep 
     * @description Settings for stopping a container in a pipeline
     */
    ContainerStopStep: {
      /** @description An identifier for the step. */
      identifier?: string;
      options?: {
        skip?: boolean;
      };
      /**
       * @description The action that the step takes. 
       * @enum {string}
       */
      action: "container.stop";
      details: components["schemas"]["ResourceLocation"];
    };
    /**
     * ContainerDeleteStep 
     * @description Settings for deleting a container in a pipeline
     */
    ContainerDeleteStep: {
      /** @description An identifier for the step. */
      identifier?: string;
      options?: {
        skip?: boolean;
      };
      /**
       * @description The action that the step takes. 
       * @enum {string}
       */
      action: "container.delete";
      details: components["schemas"]["ResourceLocation"];
    };
    /**
     * ContainerReimageStep 
     * @description Settings for reimaging a container in a pipeline
     */
    ContainerReimageStep: {
      /** @description An identifier for the step. */
      identifier?: string;
      options?: {
        skip?: boolean;
      };
      /**
       * @description The action that the step takes. 
       * @enum {string}
       */
      action: "container.reimage";
      details: components["schemas"]["ResourceLocation"] & {
        image: components["schemas"]["ResourceLocation"];
        options?: {
          allow_incompatible: boolean;
        };
      };
    };
    /**
     * ContainerRestartStep 
     * @description Settings for restarting a container in a pipeline
     */
    ContainerRestartStep: {
      /** @description An identifier for the step. */
      identifier?: string;
      options?: {
        skip?: boolean;
      };
      /**
       * @description The action that the step takes. 
       * @enum {string}
       */
      action: "container.restart";
      details: components["schemas"]["ResourceLocation"];
    };
    /**
     * EnvironmentCreateStep 
     * @description Settings for creating an environment in a pipeline.
     */
    EnvironmentCreateStep: {
      /** @description An identifier for the step. */
      identifier?: string;
      options?: {
        skip?: boolean;
      };
      /**
       * @description The action that the step takes. 
       * @enum {string}
       */
      action: "environment.create";
      details: components["schemas"]["ResourceLocation"] & {
        name: string;
        about?: components["schemas"]["EnvironmentAbout"];
        cluster: string;
        stack_build?: components["schemas"]["ResourceLocation"];
        features: components["schemas"]["Features"];
      };
    };
    /**
     * EnvironmentStartStep 
     * @description Settings for starting an environment in a pipeline.
     */
    EnvironmentStartStep: {
      /** @description An identifier for the step. */
      identifier?: string;
      options?: {
        skip?: boolean;
      };
      /**
       * @description The action that the step takes. 
       * @enum {string}
       */
      action: "environment.start";
      details: components["schemas"]["ResourceLocation"];
    };
    /**
     * EnvironmentStopStep 
     * @description Settings for stopping an environment in a pipeline.
     */
    EnvironmentStopStep: {
      /** @description An identifier for the step. */
      identifier?: string;
      options?: {
        skip?: boolean;
      };
      /**
       * @description The action that the step takes. 
       * @enum {string}
       */
      action: "environment.stop";
      details: components["schemas"]["ResourceLocation"];
    };
    /**
     * EnvironmentDeleteStep 
     * @description Settings for deleting an environment in a pipeline.
     */
    EnvironmentDeleteStep: {
      /** @description An identifier for the step. */
      identifier?: string;
      options?: {
        skip?: boolean;
      };
      /**
       * @description The action that the step takes. 
       * @enum {string}
       */
      action: "environment.delete";
      details: components["schemas"]["ResourceLocation"];
    };
    /**
     * StackBuildInstructions 
     * @description Git information on where to pull stack resources from.
     */
    StackBuildInstructions: {
      /** @description Git information specifics. */
      git?: {
        /**
         * @description The type of information the user is passing. 
         * @enum {string}
         */
        type: "hash" | "tag";
        /** @description The actual value to be passed. */
        value: string;
      };
    };
    /**
     * StackBuildAbout 
     * @description Information about the stack build.
     */
    StackBuildAbout: {
      /** @description A user defined version of the build. */
      version: string;
      /** @description A user defined description for the build. */
      description: string;
      git_commit?: components["schemas"]["StackGitCommit"];
    };
    /**
     * StackBuildCreateStep 
     * @description Settings for creating a stack build in a pipeline.
     */
    StackBuildCreateStep: {
      /** @description An identifier for the step. */
      identifier?: string;
      options?: {
        skip?: boolean;
      };
      /**
       * @description The action that the step takes. 
       * @enum {string}
       */
      action: "stack.build.create";
      details: components["schemas"]["ResourceLocation"] & {
        stack: components["schemas"]["ResourceLocation"];
        instructions?: components["schemas"]["StackBuildInstructions"];
        about?: components["schemas"]["StackBuildAbout"];
      };
    };
    /**
     * StackBuildGenerateStep 
     * @description Settings for the stack build generate step for a pipeline.
     */
    StackBuildGenerateStep: {
      /** @description An identifier for the step. */
      identifier?: string;
      options?: {
        skip?: boolean;
      };
      /**
       * @description The action that the step takes. 
       * @enum {string}
       */
      action: "stack.build.generate";
      details: components["schemas"]["ResourceLocation"];
    };
    /**
     * StackDeployContainersObject 
     * @description Options to control how a container behaves when a stack build is deployed.
     */
    StackDeployContainersObject: {
      /** @description A boolean where true represents the container is to be reimaged. */
      reimage: boolean;
      /** @description A boolean where true represents the container is to be reconfigured. */
      reconfigure: boolean;
    };
    /**
     * StackBuildContainerUpdate 
     * @description Optional update object used to specify specific params to update from the stack build.
     */
    StackBuildContainerUpdate: {
      /** @description A map of the container names to update within the environment. */
      containers: {
        [key: string]: components["schemas"]["StackDeployContainersObject"] | undefined;
      };
    };
    /**
     * StackBuildDeployStep 
     * @description Settings for deploying a stack build in a pipeline.
     */
    StackBuildDeployStep: {
      /** @description An identifier for the step. */
      identifier?: string;
      options?: {
        skip?: boolean;
      };
      /**
       * @description The action that the step takes. 
       * @enum {string}
       */
      action: "stack.build.deploy";
      details: components["schemas"]["ResourceLocation"] & {
        /** @description Id of stack build */
        id: string;
        environment: components["schemas"]["ResourceLocation"];
        update?: components["schemas"]["StackBuildContainerUpdate"];
      };
    };
    /**
     * SleepStep 
     * @description Settings for the sleep step for a pipeline.
     */
    SleepStep: {
      /** @description An identifier for the step. */
      identifier?: string;
      options?: {
        skip?: boolean;
      };
      /**
       * @description The action that the step takes. 
       * @enum {string}
       */
      action: "sleep";
      details: {
        /** @description Total duration (seconds) to run this step for, before moving on to the next step. */
        seconds?: number;
      };
    };
    /**
     * WebhookPostStep 
     * @description An action describing a webhook post. The webhook will post the full body of the resource referenced by the step - for example if you were to reference a step creating a container, you would receive that container object in the post body.
     */
    WebhookPostStep: {
      /** @description An identifier for the step. */
      identifier?: string;
      options?: {
        skip?: boolean;
      };
      /**
       * @description The action that the step takes. 
       * @enum {string}
       */
      action: "webhook.post";
      details: components["schemas"]["ResourceLocation"] & {
        /** @description The url to post to. */
        url: string;
      };
    };
    /**
     * PipelineStep 
     * @description A step for a pipeline stage.
     */
    PipelineSteps: components["schemas"]["ImageSourceCreateStep"] | components["schemas"]["ImageCreateStep"] | components["schemas"]["ImageImportStep"] | components["schemas"]["ImagesPruneStep"] | components["schemas"]["ContainerCreateStep"] | components["schemas"]["ContainerStartStep"] | components["schemas"]["ContainerStopStep"] | components["schemas"]["ContainerDeleteStep"] | components["schemas"]["ContainerReimageStep"] | components["schemas"]["ContainerRestartStep"] | components["schemas"]["EnvironmentCreateStep"] | components["schemas"]["EnvironmentStartStep"] | components["schemas"]["EnvironmentStopStep"] | components["schemas"]["EnvironmentDeleteStep"] | components["schemas"]["StackBuildCreateStep"] | components["schemas"]["StackBuildGenerateStep"] | components["schemas"]["StackBuildDeployStep"] | components["schemas"]["SleepStep"] | components["schemas"]["WebhookPostStep"];
    /**
     * PipelineStage 
     * @description A stage for a given pipeline.
     */
    PipelineStage: {
      /** @description A stage identifier. */
      identifier: string;
      /** @description An array of steps for the stage. */
      steps: (components["schemas"]["PipelineSteps"])[];
      /** @description Additonal options for the stage. */
      options?: {
        /** @description A boolean where true indicates the given stage should be skipped when the pipeline is run. */
        skip?: boolean;
      };
    };
    /** PipelineState */
    PipelineState: ({
      /**
       * @description The current state of the pipeline. 
       * @enum {string}
       */
      current: "live" | "deleting" | "deleted";
    }) & components["schemas"]["State"];
    /**
     * Pipeline 
     * @description A pipeline resource.
     */
    Pipeline: {
      id: components["schemas"]["ID"];
      identifier?: components["schemas"]["Identifier"];
      /** @description A name for the pipeline. */
      name: string;
      creator: components["schemas"]["CreatorScope"];
      hub_id: components["schemas"]["HubID"];
      /** @description A boolean where true signifies the pipeline is disabled. */
      disable: boolean;
      /** @description An array of stages. */
      stages?: (components["schemas"]["PipelineStage"])[];
      /**
       * PipelineEvents 
       * @description A collection of timestamps for each event in the pipeline's lifetime.
       */
      events: {
        /** @description The timestamp of when the pipeline was created. */
        created: components["schemas"]["DateTime"];
        /** @description The timestamp of when the pipeline was updated. */
        updated: components["schemas"]["DateTime"];
        /** @description The timestamp of when the pipeline was deleted. */
        deleted: components["schemas"]["DateTime"];
        /** @description The timestamp of when the pipeline was last run. */
        last_run: components["schemas"]["DateTime"];
      };
      state: components["schemas"]["PipelineState"];
    };
    /** TriggerKeyState */
    TriggerKeyState: ({
      /**
       * @description The current state of the trigger key. 
       * @enum {string}
       */
      current: "live" | "deleting" | "deleted";
    }) & components["schemas"]["State"];
    /**
     * TriggerKey 
     * @description A pipeline trigger key resource.
     */
    TriggerKey: {
      id: components["schemas"]["ID"];
      /** @description The name of the trigger key. */
      name: string;
      /** @description The secret used when calling the trigger key programmatically. */
      secret: string;
      creator: components["schemas"]["CreatorScope"];
      hub_id: components["schemas"]["HubID"];
      /** @description The ID for the pipeline related to this trigger key. */
      pipeline_id: string;
      state: components["schemas"]["TriggerKeyState"];
      /**
       * TriggerKeyEvents 
       * @description A collection of timestamps for each event in the trigger key's lifetime.
       */
      events: {
        /** @description The timestamp of when the trigger key was created. */
        created: components["schemas"]["DateTime"];
        /** @description The timestamp of when the trigger key was updated. */
        updated: components["schemas"]["DateTime"];
        /** @description The timestamp of when the trigger key was deleted. */
        deleted: components["schemas"]["DateTime"];
      };
      /** @description An array of ips this trigger key is usable from. */
      ips: (string)[];
    };
    /**
     * ComponentIncludes 
     * @description A resource thats assocaited with activity.
     */
    ComponentsIncludes: {
      [key: string]: (components["schemas"]["Container"] | components["schemas"]["Instance"] | components["schemas"]["Environment"] | components["schemas"]["Image"] | components["schemas"]["Server"] | components["schemas"]["Pool"] | components["schemas"]["Stack"] | components["schemas"]["StackBuild"] | components["schemas"]["Zone"] | components["schemas"]["Record"] | components["schemas"]["ApiKey"] | components["schemas"]["Provider"] | components["schemas"]["SDNNetwork"] | components["schemas"]["HubMembership"] | components["schemas"]["Pipeline"] | components["schemas"]["TriggerKey"]) | undefined;
    };
    /**
     * ActivityIncludes 
     * @description All includable resources linkable to the given records.
     */
    ActivityIncludes: {
      users?: components["schemas"]["CreatorInclude"];
      components?: components["schemas"]["ComponentsIncludes"];
    };
    /**
     * HubUsageDatum 
     * @description A hub usage data point
     */
    HubUsageDatum: {
      time: string;
      servers: number;
      members: number;
      environments: number;
      containers: number;
    };
    /**
     * IndexComponent 
     * @description Generic component format for describing resources for the search index
     */
    Component: {
      /** @description ID of the component */
      id: string;
      /** @description Name of the component */
      name: string;
      /** @description State of the component */
      state: string;
      events: components["schemas"]["Events"];
      /** @description related strings for fuzzy search */
      context_blobs: (string)[];
      /** @description Component associations */
      associations: {
        /** @description Associated container Id */
        container?: string;
        /** @description Associated environment Id */
        environment?: string;
        /** @description Associated image source Id */
        "image-source"?: string;
        /** @description Associated image Id */
        image?: string;
        /** @description Associated stack Id */
        stack?: string;
        /** @description Associated server Id */
        server?: string;
        /** @description Associated provider location Id */
        "provider-location"?: string;
      };
    };
    /**
     * Index 
     * @description An index that enables search in the portal
     */
    Index: {
      /** @description The timestampof when the index was generated */
      generated: components["schemas"]["DateTime"];
      /** @description Id describing the Hub */
      hub_id: string;
      containers: {
        [key: string]: components["schemas"]["Component"] | undefined;
      };
      environments: {
        [key: string]: components["schemas"]["Component"] | undefined;
      };
      image_sources: {
        [key: string]: components["schemas"]["Component"] | undefined;
      };
      dns_zones: {
        [key: string]: components["schemas"]["Component"] | undefined;
      };
      stacks: {
        [key: string]: components["schemas"]["Component"] | undefined;
      };
      servers: {
        [key: string]: components["schemas"]["Component"] | undefined;
      };
    };
    /** ImageSourceState */
    ImageSourceState: ({
      /**
       * @description The current state of the image source. 
       * @enum {string}
       */
      current: "live" | "deleting" | "deleted";
    }) & components["schemas"]["State"];
    /**
     * ImageSourceMeta 
     * @description A list of meta fields that can be applied to this environment.
     */
    ImageSourceMeta: {
      images_count?: {
        /** @description Number of image sources */
        total: number;
        state: {
          /** @description Number of images in this source with state new */
          new: number;
          /** @description Number of images in this source with state downloading */
          downloading: number;
          /** @description Number of images in this source with state building */
          building: number;
          /** @description Number of images in this source with state verifying */
          verifying: number;
          /** @description Number of images in this source with state saving */
          saving: number;
          /** @description Number of images in this source with state live */
          live: number;
          /** @description Number of images in this source with state deleting */
          deleting: number;
        };
      };
    };
    /**
     * ImageSource 
     * @description An image source is a set of resources that direct the platform on where it can find the resources needed to build an image resource.
     */
    ImageSource: {
      id: components["schemas"]["ID"];
      /** @description A human readable slugged identifier for this image source. */
      identifier: components["schemas"]["Identifier"];
      hub_id: components["schemas"]["HubID"];
      /** @description A name for the image source resource. */
      name: string;
      about?: components["schemas"]["ImageSourceAbout"];
      origin: components["schemas"]["ImageSourceOrigin"];
      creator: components["schemas"]["CreatorScope"];
      state: components["schemas"]["ImageSourceState"];
      /**
       * ImageSourceEvents 
       * @description A collection of timestamps for each event in the iamge source's lifetime.
       */
      events: {
        /** @description The timestamp of when the iamge source was created. */
        created: components["schemas"]["DateTime"];
        /** @description The timestamp of when the iamge source was updated. */
        updated: components["schemas"]["DateTime"];
        /** @description The timestamp of when the iamge source was deleted. */
        deleted: components["schemas"]["DateTime"];
      };
      /** @description Information about a server resource this image requires to function properly. */
      requires: {
        /** @description A boolean where true represents this image requies an Nvidia GPU to run properly. */
        nvidia_gpu: boolean | null;
      };
      meta?: components["schemas"]["ImageSourceMeta"];
    };
    /**
     * ImageSourceIncludes 
     * @description A resource associated with an image source.
     */
    ImageSourceIncludes: {
      [key: string]: components["schemas"]["ImageSource"] | undefined;
    };
    /**
     * ImageIncludes 
     * @description All includable resources linkable to the given image.
     */
    ImageIncludes: {
      creators?: components["schemas"]["CreatorInclude"];
      stack_builds?: components["schemas"]["StackBuildIncludes"];
      stacks?: components["schemas"]["StackIncludes"];
      sources?: components["schemas"]["ImageSourceIncludes"];
    };
    /**
     * ImageBuildLog 
     * @description A build log for a given image.
     */
    BuildLog: {
      id: components["schemas"]["ID"];
      hub_id: components["schemas"]["HubID"];
      /** @description The ID of the image the build log pertains to. */
      image_id: string;
      /** @description The log itself. */
      log: string;
      /**
       * BuildLogEvents 
       * @description A collection of timestamps for each event in the build log's lifetime.
       */
      events: {
        /** @description The timestamp of when the build log was created. */
        created: components["schemas"]["DateTime"];
        /** @description The timestamp of when the build log was updated. */
        updated: components["schemas"]["DateTime"];
        /** @description The timestamp of when the build log was deleted. */
        deleted: components["schemas"]["DateTime"];
      };
    };
    /**
     * SourceIncludes 
     * @description A resource associate with an image source.
     */
    SourceIncludes: {
      creators?: components["schemas"]["CreatorInclude"];
    };
    /** @description Information about server CPU, RAM and Disk resources. */
    ServerResources: {
      /** @description Information about RAM Resources. */
      ram: {
        /** @description The total amount of RAM in MBsr. */
        total_mb: number;
        /** @description The total amount of allocated RAM in MBs. */
        allocated_mb: number;
        /** @description The total amount of used RAM in MBs. */
        used_mb: number;
        /** @description The total amount of provisioned RAM in MBs. */
        provisioned_mb: number;
      };
      /** @description Information about CPU resources. */
      cpu: {
        /** @description The number of CPU cores. */
        cores: number;
        /** @description Information about CPU shares. */
        shares: {
          /** @description The number of shares allocated. */
          allocated: number;
          /** @description The total number of shares available. */
          total: number;
        };
        /** @description The ratio of shares allocated to total shares. */
        share_ratio?: number;
      };
      /** @description Information about disk size and usage. */
      disk: {
        /** @description The total amount of disk space in MBs. */
        total_mb: number;
        /** @description The amount of disk space used in MBs. */
        used_mb: number;
      };
    };
    /**
     * ClusterVersionServerCount 
     * @description A count of servers in a cluster with the given version of Cycle software
     */
    ClusterVersionServerCount: {
      agent: {
        [key: string]: number | undefined;
      };
      "agent-spawner": {
        [key: string]: number | undefined;
      };
      compute: {
        [key: string]: number | undefined;
      };
      "compute-spawner": {
        [key: string]: number | undefined;
      };
    };
    /**
     * InfrastructureSummary 
     * @description An infrastructure summary resource.
     */
    InfrastructureSummary: {
      hub_id: components["schemas"]["HubID"];
      /** @description The number of servers on the cluster */
      servers: number;
      /** @description Statistics about image usage. */
      images: {
        /** @description Image tier information. */
        tier: {
          /** @description A value in MB representing the total MB of space on the infrastructure available for images. */
          total_mb: number;
          /** @description A value in MB representing the amount of allocated space for images. */
          allocated_mb: number;
          /** @description A value in MB representing the total MB of space images are taking up out of the total megabytes available. */
          used_mb: number;
        };
      };
      /** @description Records pointing to information about clusters that make up this hubs infrastructure. */
      clusters: {
        [key: string]: ({
          /** @description The name of the cluster */
          name: string;
          /** @description Information about the aggregate resources of the cluster. */
          resources: components["schemas"]["ServerResources"];
          /** @description Whether Cycle has determined this cluster to be healthy or not. */
          healthy: boolean;
          versions: components["schemas"]["ClusterVersionServerCount"];
          instances: components["schemas"]["StateCountSummary"];
          servers: {
            count: number;
            providers: {
              [key: string]: ({
                count: number;
                locations: {
                  [key: string]: number | undefined;
                };
                models: {
                  [key: string]: number | undefined;
                };
              }) | undefined;
            };
          };
        }) | undefined;
      };
      /** @description A timestamp of when the infrastructure was last updated. */
      updated: components["schemas"]["DateTime"];
    };
    /**
     * NativeProvider 
     * @description All relevant information about a natively supported Cycle provider
     */
    NativeProvider: {
      /** @description String describing the display name of a native provider */
      name: string;
      /** @description String describing the identifier of a native provider */
      identifier: string;
      /** @description String describing the website of a native provider for more info */
      website?: string;
      /** @description Object with required fields and regex for each field */
      required_fields: {
        [key: string]: {
          /** @description display name of the field */
          caption: string;
          /** @description validation regex for the field */
          regex: string;
        } | undefined;
      };
      /** @description Record of notices related to native provider */
      notices: {
        [key: string]: string | undefined;
      };
      features: (string)[];
    };
    /**
     * ServerStatsTelemetry 
     * @description Statistics about a given servers telemetery data.
     */
    ServerStatsTelemetry: {
      /** @description The timestamp for when the telemetery data was collected. */
      time: components["schemas"]["DateTime"];
      load: components["schemas"]["ServerStatsLoad"];
      ram: components["schemas"]["ServerStatsRam"];
      /** @description Telemetry data for the base volume of a given server. */
      storage_base: {
        /** @description The amount of storage currently used in the base volume. */
        used: number;
        /** @description The amount of free space on the base volume. */
        free: number;
        /** @description The total amount of space on the base volume. */
        total: number;
      };
      /** @description User data storage across all devices. */
      storage_pool: {
        /** @description The percentage of storage used by user data. */
        data_percent: number;
        /** @description The percentage of storage used by the file allocation stables, etc. */
        meta_percent: number;
        /** @description The total amount of storage available. */
        total: number;
      };
    };
    /** ReconfigureServerAction */
    ReconfigureServer: {
      /**
       * @description The action to take. 
       * @enum {string}
       */
      action: "reconfigure.features";
      /** @description Supplemental information needed to perform the action. */
      contents: {
        /** @description A boolean where true represents the desire for the server to accept incoming SFTP requests for container volumes. */
        sftp: boolean;
        /** @description A number in GB for how big the base volume should be.  This cannot be lower than the currently set value for the server. */
        base_volume_gb: number | null;
      };
    };
    /**
     * RestartServerAction 
     * @description A job that restarts the server.
     */
    RestartServer: {
      /**
       * @description The action to take. 
       * @enum {string}
       */
      action: "restart";
    };
    /**
     * RestartComputeServiceAction 
     * @description A job that restarts compute service on a given server.
     */
    RestartCompute: {
      /**
       * @description The action to take. 
       * @enum {string}
       */
      action: "compute.restart";
    };
    /**
     * ServerTags 
     * @description Tags for a given server.
     */
    ServerTags: {
      /** @description An array of server tags. */
      data?: (string)[];
    };
    /**
     * ServerUsageDatum 
     * @description Server usage data.
     */
    UsageDatum: {
      /** @description A timestamp for when the usage data was collected. */
      time: components["schemas"]["DateTime"];
      /** @description The number of nodes the data is pulled from. */
      nodes: number;
      /** @description A number in GB representing memory. */
      memory_gb: number;
    };
    /**
     * PoolIncludes 
     * @description Resources associated with an IP Pool.
     */
    PoolIncludes: {
      creators: components["schemas"]["CreatorInclude"];
      servers: components["schemas"]["ServersIncludes"];
      providers: components["schemas"]["ProvidersIncludes"];
      locations: components["schemas"]["LocationsIncludes"];
    };
    /**
     * DeploymentStrategy 
     * @description Information about supported container deployment strategies.
     */
    DeploymentStrategy: {
      /** @description The human-friendly name of the deployment strategy. */
      name: string;
      /** @description A boolean where true signifies a strategy is either not yet or no longer available. */
      disabled: boolean;
      /** @description A description for the deployment strategy. */
      description: string;
    };
    /**
     * TaskStep 
     * @description A step for a given job task.
     */
    TaskStep: {
      /** @description A short description of the step. */
      caption: string;
      /** @description A more verbose description. */
      description: string;
      /** @description A timestamp for when the step started. */
      started: components["schemas"]["DateTime"];
      /** @description A timestamp for when the step completed. */
      completed: components["schemas"]["DateTime"];
    };
    /** TaskState */
    TaskState: ({
      /**
       * @description The current state of the task. 
       * @enum {string}
       */
      current: "pending" | "error" | "running" | "completed";
    }) & components["schemas"]["State"];
    /**
     * JobTasks 
     * @description Information about a job task.
     */
    JobTasks: {
      id: components["schemas"]["ID"];
      /** @description A short description of the task. */
      caption: string;
      /** @description The API function called. */
      header: string;
      /** @description The action being handled by the job. */
      action: string;
      /**
       * JobEvents 
       * @description A collection of timestamps for each event in the job's lifetime.
       */
      events: {
        /** @description The timestamp of when the job was queued. */
        queued: components["schemas"]["DateTime"];
        /** @description The timestamp of when the job was completed. */
        completed: components["schemas"]["DateTime"];
        /** @description The timestamp of when the job was started. */
        started: components["schemas"]["DateTime"];
      };
      /** @description An array of job task steps. */
      steps: (components["schemas"]["TaskStep"])[];
      state: components["schemas"]["TaskState"];
      /** @description A boolean where true indicates the job is failable. */
      failable: boolean;
      /** @description Input information used for the job tasks. */
      input: {
        [key: string]: string | undefined;
      };
      /** @description Output informaiton used for the job tasks. */
      output: {
        [key: string]: string | undefined;
      };
      /** @description An error object describing issues with the job. */
      error: {
        /** @description An error message */
        message: string | null;
      };
    };
    /** JobState */
    JobState: ({
      /**
       * @description The current state of the job. 
       * @enum {string}
       */
      current: "new" | "queued" | "error" | "scheduled" | "expired" | "running" | "completed";
    }) & components["schemas"]["State"];
    /**
     * Job 
     * @description A job resource.
     */
    Job: {
      id: components["schemas"]["ID"];
      hub_id: components["schemas"]["HubID"];
      /** @description A dash separated string showing the environment_id where the job is taking place. */
      queue: string;
      /** @description A short description of the job. */
      caption: string;
      /**
       * JobEvents 
       * @description A collection of timestamps for each event in the job's lifetime.
       */
      events: {
        /** @description The timestamp of when the job was queued. */
        queued: components["schemas"]["DateTime"];
        /** @description The timestamp of when the job was completed. */
        completed: components["schemas"]["DateTime"];
        /** @description The timestamp of when the job was started. */
        started: components["schemas"]["DateTime"];
      };
      /** @description A timestamp of when the job was scheduled. */
      schedule: components["schemas"]["DateTime"];
      /** @description An array of job tasks. */
      tasks: (components["schemas"]["JobTasks"])[];
      /** @description A timestamp for when the job expires. */
      expires: components["schemas"]["DateTime"];
      /** @description A combination of the individual task details and job details. */
      hash: string;
      /** @description A boolean where true represents the job is set to prevent duplicates of itself quickly after creation. */
      limit_duplicates: boolean;
      creator: components["schemas"]["CreatorScope"];
      state: components["schemas"]["JobState"];
    };
    /** JobIncludes */
    JobIncludes: {
      creators?: components["schemas"]["CreatorInclude"];
    };
    /**
     * StackIncludes 
     * @description All includable resources linkable to the given stack.
     */
    StackInclude: {
      creators?: components["schemas"]["CreatorInclude"];
    };
    /**
     * StackBuildIncludes 
     * @description All includable resources linkable to a given stack build.
     */
    StackBuildInclude: {
      /** @description The ID for the stack this build is associated with. */
      stack_id?: string;
      hub_id?: components["schemas"]["HubID"];
      /** @description Information about the stack build. */
      about?: {
        /** @description A user defined version of the build. */
        version: string;
        /** @description A user defined description for the build. */
        description: string;
        git_commit?: components["schemas"]["StackGitCommit"];
      };
      /** @description Git information on where to pull stack resources from. */
      instructions?: {
        /** @description Git information specifics. */
        git?: {
          /**
           * @description The type of information the user is passing. 
           * @enum {string}
           */
          type: "hash" | "tag";
          /** @description The actual value to be passed. */
          value: string;
        };
      };
      /**
       * StackBuildEvents 
       * @description A collection of timestamps for each event in the stack build's lifetime.
       */
      events?: {
        /** @description The timestamp of when the stack build was created. */
        created: components["schemas"]["DateTime"];
        /** @description The timestamp of when the stack build was updated. */
        updated: components["schemas"]["DateTime"];
        /** @description The timestamp of when the stack build was deleted. */
        deleted: components["schemas"]["DateTime"];
      };
      state?: components["schemas"]["StackBuildState"];
    };
    /** GenerateStackBuild */
    GenerateStackBuildAction: {
      /**
       * @description The job to do. 
       * @enum {string}
       */
      action: "generate";
    };
    /** DeployStackBuild */
    DeployStackBuildAction: {
      /**
       * @description The action the job takes. 
       * @enum {string}
       */
      action: "deploy";
      /** @description Additional information needed for the job. */
      contents: {
        /** @description The ID for the environment this stack build will be deployed to. */
        environment_id: string;
        update?: components["schemas"]["StackBuildContainerUpdate"];
      };
    };
    /**
     * NetworkIncludes 
     * @description All includable resource linkable to the given network.
     */
    NetworkIncludes: {
      creators?: components["schemas"]["CreatorInclude"];
      environments?: components["schemas"]["EnvironmentIncludes"];
    };
    /**
     * PipelineIncludes 
     * @description All includable resources linkable to the given pipeline.
     */
    PipelineIncludes: {
      creators?: components["schemas"]["CreatorInclude"];
      /** @description A name value. */
      name?: string;
      /** @description A record of resources that can be associated with the pipeline. */
      components?: {
        [key: string]: (components["schemas"]["Container"] | components["schemas"]["Environment"] | components["schemas"]["Stack"] | components["schemas"]["StackBuild"] | components["schemas"]["Image"] | components["schemas"]["ImageSource"]) | undefined;
      };
    };
    /**
     * PipelineRunEvents 
     * @description A collection of timestamps for each event in the pipeline run's lifetime.
     */
    PipelineRunEvents: {
      /** @description The timestamp of when the pipeline run was started. */
      started: components["schemas"]["DateTime"];
      /** @description The timestamp of when the pipeline run was queued. */
      queued: components["schemas"]["DateTime"];
      /** @description The timestamp of when the pipeline run was finished. */
      finished: components["schemas"]["DateTime"];
    };
    /** PipelineRunState */
    RunState: ({
      /**
       * @description The current state of the pipeline run. 
       * @enum {string}
       */
      current: "new" | "queued" | "running" | "deleting" | "deleted";
    }) & components["schemas"]["State"];
    /**
     * PipelineRun 
     * @description A pipeline run resource.
     */
    Run: {
      id: components["schemas"]["ID"];
      creator: components["schemas"]["CreatorScope"];
      hub_id: components["schemas"]["HubID"];
      /** @description The ID for the pipeline this run belongs to. */
      pipeline_id: string;
      /** @description An array of pipeline stages. */
      stages: ({
          /** @description A stage identifier. */
          identifier: string;
          steps: ({
              identifier: string;
              /** @enum {string} */
              action: "environment.create" | "environment.start" | "environment.stop" | "environment.delete" | "image.source.create" | "image.create" | "image.import" | "images.prune" | "container.create" | "container.reimage" | "container.start" | "container.stop" | "container.restart" | "container.delete" | "stack.build.create" | "stack.build.deploy" | "stack.build.generate" | "sleep" | "webhook.post";
              events: components["schemas"]["PipelineRunEvents"];
              success: boolean;
            })[];
          events: components["schemas"]["PipelineRunEvents"];
        })[];
      state: components["schemas"]["RunState"];
      events: components["schemas"]["PipelineRunEvents"];
    };
    /**
     * HubNotificationPipelineAuthResponse 
     * @description A token resource.
     */
    HubNotificationToken: {
      /** @description A token used for connecting to the hub notification pipeline websocket API. */
      token: string;
    };
    /**
     * InstanceConsoleAuth 
     * @description Resources needed to connect to the instance console websocket.
     */
    InstanceConsoleAuth: {
      /** @description A token used for connecting to the instance console through the websocket API. */
      token: string;
      /** @description The protocol and url for connecting to the console. */
      address: string;
    };
    /**
     * Range 
     * @description A start and end date-time pair indicating a range of time
     */
    Range: {
      start: components["schemas"]["DateTime"];
      end: components["schemas"]["DateTime"];
    };
    /**
     * SecurityIncident 
     * @description Details about a security incident/event that occurred.
     */
    SecurityIncident: {
      /**
       * @description The risk level of the security. 
       * @enum {string}
       */
      risk: "info" | "low" | "medium" | "high" | "critical";
      /**
       * @description The vector of attack. 
       * @enum {string}
       */
      surface: "network" | "service" | "fs" | "api";
      /**
       * @description How the platform handled the event. 
       * @enum {string}
       */
      event: "suggestion" | "notice" | "prevention" | "detection" | "reaction";
      /**
       * @description The type of attack detected. 
       * @enum {string}
       */
      attack: "none" | "auth-failure" | "brute-force" | "exploit-vulnerability" | "social-engineer" | "service-interruption" | "access-elevation";
      count: number;
    };
    /**
     * SecurityReportSummary 
     * @description A summary of the incidents tags accumulated over the report's range.
     */
    SecurityReportSummary: {
      incidents: (components["schemas"]["SecurityIncident"])[];
    };
    /**
     * SecuritySnapshotIncidentBreakdown 
     * @description A breakdown of a snapshot's incidents inside a security report.
     */
    SecuritySnapshotIncidentBreakdown: {
      surface: {
        network?: number;
        service?: number;
        fs?: number;
        api?: number;
      };
      attack: {
        none?: number;
        "auth-failure"?: number;
        "brute-force"?: number;
        "exploit-vulnerability"?: number;
        "social-engineer"?: number;
        "service-interruption"?: number;
        "access-elevation"?: number;
      };
    };
    /**
     * SecurityReportSnapshot 
     * @description A snapshot of security events for the given interval.
     */
    SecurityReportSnapshot: {
      time: components["schemas"]["DateTime"];
      incidents: {
        info?: components["schemas"]["SecuritySnapshotIncidentBreakdown"];
        low?: components["schemas"]["SecuritySnapshotIncidentBreakdown"];
        medium?: components["schemas"]["SecuritySnapshotIncidentBreakdown"];
        high?: components["schemas"]["SecuritySnapshotIncidentBreakdown"];
        critical?: components["schemas"]["SecuritySnapshotIncidentBreakdown"];
      };
      count: number;
    };
    /**
     * SecurityReport 
     * @description A report of all security events captured by the platform over a range of time.
     */
    SecurityReport: {
      hub_id: components["schemas"]["HubID"];
      created: components["schemas"]["DateTime"];
      /** @description The period over which the report was generated. */
      range: components["schemas"]["Range"];
      summary: components["schemas"]["SecurityReportSummary"];
      /** @description The ID of the environment this instnace is in. */
      snapshots: (components["schemas"]["SecurityReportSnapshot"])[];
    };
  };
  responses: {
    /** @description General error response from the platform */
    DefaultError: {
      content: {
        "application/json": components["schemas"]["ErrorEnvelope"];
      };
    };
  };
  parameters: {
    /** @description An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`. */
    SortParam?: (string)[];
    FilterParam?: Record<string, never>;
    /** @description In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2` */
    PageParam?: {
      /** @description The page to jump to */
      number?: number;
      /** @description The number of resources returned per page. */
      size?: number;
    };
    /** @description The option field is a key-value object, where the key is the option, and the value is a boolean. For example, `?option[force]=true` */
    OptionParam?: {
      [key: string]: string | undefined;
    };
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /**
   * Fetch Account 
   * @description Gets the account associated with the authenticated user token.
   */
  getAccount: {
    responses: {
      /** @description Returns an account. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Account"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Delete Account 
   * @description Deletes the current account
   */
  removeAccount: {
    responses: {
      /** @description Returns a task descriptor. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Account"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Update Account 
   * @description Updates the current account
   */
  updateAccount: {
    /** @description Parameters for updating an account. */
    requestBody?: {
      content: {
        "application/json": {
          /** @description The name for the account. */
          name?: {
            first?: string;
            last?: string;
            allow_support_login?: boolean;
          };
        };
      };
    };
    responses: {
      /** @description Returns the updated account resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Account"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Account Invites 
   * @description Lists invites associated with a given account.
   */
  getAccountInvites: {
    parameters: {
      query: {
        /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
        meta?: ("capabilities")[];
        /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
        include?: ("senders" | "hubs" | "accounts")[];
        sort?: components["parameters"]["SortParam"];
        filter?: components["parameters"]["FilterParam"];
        page?: components["parameters"]["PageParam"];
      };
    };
    responses: {
      /** @description Returns a list of account invites. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["HubMembership"])[];
            includes?: components["schemas"]["HubMembershipIncludes"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Update Account Invite 
   * @description Update a given invite.
   */
  updateAccountInvite: {
    parameters: {
      path: {
        /** @description The ID of the given invite. */
        inviteId: string;
      };
    };
    /** @description Req body for updating account invite */
    requestBody?: {
      content: {
        "application/json": {
          /** @description Set accept to true to accept */
          accept?: boolean;
          /** @description Set decline to true to decline */
          decline?: boolean;
        };
      };
    };
    responses: {
      /** @description Returns an membership resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["HubMembership"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Account Memberships 
   * @description Lists the memberships for a given account.
   */
  getAccountMemberships: {
    responses: {
      /** @description List of membership resources. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["HubMembership"])[];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Account Logins 
   * @description Lists logins associated with a given account.
   */
  getAccountLogins: {
    parameters: {
      query: {
        sort?: components["parameters"]["SortParam"];
        filter?: components["parameters"]["FilterParam"];
        page?: components["parameters"]["PageParam"];
      };
    };
    responses: {
      /** @description Returns a collection of logins. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["EmployeeLogin"] | components["schemas"]["PasswordLogin"])[];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Update Account Invite 
   * @description Update a given invite.
   */
  resetPassword: {
    /** @description Req body for updating account invite */
    requestBody?: {
      content: {
        "application/json": {
          /** @description Current Password */
          current?: string;
          /** @description New Password */
          new?: string;
        };
      };
    };
    responses: {
      /** @description Returns an Account resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Account"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Get TwoFa setup info 
   * @description Get barcode and secret for TwoFa authentication
   */
  getTwoFaInfo: {
    responses: {
      /** @description Returns a TwoFaSetupResponse resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["TwoFaDisableResponse"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Setup TwoFa 
   * @description Setup TwoFa for an account
   */
  setupTwoFa: {
    /** @description Parameters setting up TwoFa */
    requestBody?: {
      content: {
        "application/json": {
          /** @description The token to authenticate TwoFa setup. */
          token: string;
        };
      };
    };
    responses: {
      /** @description Returns a TwoFaSetupResponse resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["TwoFaSetupResponse"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Disable TwoFa 
   * @description Disable TwoFa for an account
   */
  disableTwoFa: {
    /** @description Parameters setting up TwoFa */
    requestBody?: {
      content: {
        "application/json": {
          /** @description The token to authenticate TwoFa Disable. */
          token: string;
        };
      };
    };
    responses: {
      /** @description Returns a TwoFaDisableResponse resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["TwoFaDisableResponse"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Announcements 
   * @description Lists any important updates posted by the Cycle team
   */
  getAnnouncementsList: {
    parameters: {
      query: {
        sort?: components["parameters"]["SortParam"];
        filter?: components["parameters"]["FilterParam"];
        page?: components["parameters"]["PageParam"];
      };
    };
    responses: {
      /** @description List of announcements. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["Announcement"])[];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Billing Orders 
   * @description Requires the `billing-orders-manage` capability.
   */
  getOrders: {
    parameters: {
      query: {
        sort?: components["parameters"]["SortParam"];
        filter?: components["parameters"]["FilterParam"];
        page?: components["parameters"]["PageParam"];
        /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
        meta?: ("due")[];
        /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
        include?: ("promo_codes")[];
      };
    };
    responses: {
      /** @description Returns a collection of billing order resources. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["Order"])[];
            includes?: components["schemas"]["OrderIncludes"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Create order 
   * @description Requires TODO capability.
   */
  createOrder: {
    /** @description Parameters for creating a new order */
    requestBody?: {
      content: {
        "application/json": {
          /** @description Id associated with the tier plan */
          tier_plan_id?: string;
          /** @description Id associated with the support plan */
          support_plan_id?: string;
          /**
           * @description String that defines term length 
           * @enum {string}
           */
          term_length?: "once" | "monthly" | "yearly";
          /** @description String that defines a promo code */
          promo_code?: string;
        };
      };
    };
    responses: {
      /** @description Returns an order resource. */
      201: {
        content: {
          "application/json": {
            data?: components["schemas"]["BillingOrder"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch Billing Order 
   * @description Requires the `billing-orders-manage` capability.
   */
  getBillingOrder: {
    parameters: {
      path: {
        /** @description The ID of the billing order. */
        orderId: string;
      };
    };
    responses: {
      /** @description Returns a billing order resource */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Order"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Update Billing Order 
   * @description Requires the `billing-orders-manage` capability.
   */
  updateBillingOrder: {
    parameters: {
      path: {
        /** @description The ID of the billing order. */
        orderId: string;
      };
    };
    /** @description Parameters for creating a new order */
    requestBody?: {
      content: {
        "application/json": {
          /** @description Id associated with the tier plan */
          tier_plan_id?: string;
          /** @description Id associated with the support plan */
          support_plan_id?: string;
          /**
           * @description String that defines term length 
           * @enum {string}
           */
          term_length?: "once" | "monthly" | "yearly";
          /** @description String that defines a promo code */
          promo_code?: string;
        };
      };
    };
    responses: {
      /** @description Returns a billing order resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Order"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Create Order Job 
   * @description Used to confirm an order
   */
  createOrderJob: {
    parameters: {
      path: {
        /** @description The ID of the requested order */
        orderId: string;
      };
    };
    /** @description Parameters for creating a new order job */
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description The name of the action to perform 
           * @enum {string}
           */
          action: "confirm";
        };
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      202: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Support Plans 
   * @description Doesn't require a specific capability to call.
   */
  getBillingSupportPlans: {
    parameters: {
      query: {
        sort?: components["parameters"]["SortParam"];
        filter?: components["parameters"]["FilterParam"];
        page?: components["parameters"]["PageParam"];
      };
    };
    responses: {
      /** @description Returns a billing support plan. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["SupportPlan"])[];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Tiers 
   * @description Returns list of availiable tiers
   */
  getTiers: {
    responses: {
      /** @description Returns a collection of tier resources. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["TierPlan"])[];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Billing Methods 
   * @description Requires the `billing-methods-manage` capability.
   */
  getBillingMethods: {
    parameters: {
      query: {
        sort?: components["parameters"]["SortParam"];
        filter?: components["parameters"]["FilterParam"];
        page?: components["parameters"]["PageParam"];
      };
    };
    responses: {
      /** @description returns a collection of billing methods. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["Method"])[];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Create Billing Method 
   * @description Requires the `billing-methods-manage` capability.
   */
  createBillingMethod: {
    /** @description Parameters for creating a new billing method. */
    requestBody?: {
      content: {
        "application/json": {
          /** @description A name for the billing method. */
          name: string;
          /** @description A boolean where true represents a billing method being primary. */
          primary: boolean;
          address: components["schemas"]["Address"];
          credit_card: {
            name: string;
            number: string;
            cvv: string;
            expiration: {
              month: number;
              year: number;
            };
          };
        };
      };
    };
    responses: {
      /** @description Returns a billing method resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Method"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch Billing Method 
   * @description Requires the `billing-methods-manage` capability.
   */
  getBillingMethod: {
    parameters: {
      path: {
        /** @description The ID of the billing method. */
        methodId: string;
      };
    };
    responses: {
      /** @description Returns a billing method resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Method"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Delete Biilling Method 
   * @description Requires the `billing-methods-manage` capability.
   */
  removeBillingMethod: {
    parameters: {
      path: {
        /** @description The ID of the billing method. */
        methodId: string;
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Update Billing Invoice 
   * @description Requires the `billing-methods-manage` capability.
   */
  updateBillingMethod: {
    parameters: {
      path: {
        /** @description The ID of the billing method. */
        methodId: string;
      };
    };
    /** @description Parameters for updating a billing method. */
    requestBody?: {
      content: {
        "application/json": {
          /** @description A name for the billing method. */
          name?: string;
          /** @description A boolean where true represents a billing method being primary. */
          primary?: boolean;
          address?: components["schemas"]["Address"];
          credit_card?: components["schemas"]["CreditCard"];
        };
      };
    };
    responses: {
      /** @description Returns a billing method resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Method"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Billing Invoices 
   * @description Requires the `billing-invoices-view` capability.
   */
  getInvoices: {
    parameters: {
      query: {
        sort?: components["parameters"]["SortParam"];
        filter?: components["parameters"]["FilterParam"];
        page?: components["parameters"]["PageParam"];
        /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
        meta?: ("due")[];
      };
    };
    responses: {
      /** @description Returns a collection of invoice resources. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["Invoice"])[];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch Billing Invoice 
   * @description Requires the `billing-invoices-view` capability.
   */
  getInvoice: {
    parameters: {
      path: {
        /** @description The ID of the invoice. */
        invoiceId: string;
      };
    };
    responses: {
      /** @description Returns an invoice resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Invoice"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Create Invoice Job 
   * @description Requires the `billing-invoices-pay` capability.
   */
  createInvoiceJob: {
    parameters: {
      path: {
        /** @description The ID of the invoice. */
        invoiceId: string;
      };
    };
    /** @description Parameters for creating a new invoice job. */
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description The name of the action to perform. 
           * @enum {string}
           */
          action: "pay";
        };
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Billing Services 
   * @description Requries the `billing-services-view` capability.
   */
  getBillingServices: {
    parameters: {
      query: {
        sort?: components["parameters"]["SortParam"];
        filter?: components["parameters"]["FilterParam"];
        page?: components["parameters"]["PageParam"];
      };
    };
    responses: {
      /** @description Returns a collection of billing service resources. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["Service"])[];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch Billing Service 
   * @description Requries the `billing-services-view` capability.
   */
  getBillingService: {
    parameters: {
      path: {
        /** @description The ID of the billing service. */
        servicesId: string;
      };
    };
    responses: {
      /** @description Returns a billing service resources. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Service"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Billing Overages 
   * @description Doesn't require a specific capability.
   */
  getBillingOverages: {
    parameters: {
      query: {
        sort?: components["parameters"]["SortParam"];
        filter?: components["parameters"]["FilterParam"];
        page?: components["parameters"]["PageParam"];
      };
    };
    responses: {
      /** @description Returns a billing overage resource. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["Overage"])[];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Billing Credits 
   * @description Requires the `billing-credits-view` capability.
   */
  getCredits: {
    parameters: {
      query: {
        sort?: components["parameters"]["SortParam"];
        filter?: components["parameters"]["FilterParam"];
        page?: components["parameters"]["PageParam"];
      };
    };
    responses: {
      /** @description Returns a collection of credit resources. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["Credit"])[];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch Billing Credit 
   * @description Requires the `billing-credits-view` capability.
   */
  getCredit: {
    parameters: {
      path: {
        /** @description The ID for a given credit. */
        creditsId: string;
      };
    };
    responses: {
      /** @description Returns a credit resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Credit"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Environments 
   * @description Requires the `environments-view` capability.
   */
  getEnvironments: {
    parameters: {
      query: {
        /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
        meta?: ("containers" | "containers_count" | "instances_count")[];
        /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
        include?: ("creators" | "stacks")[];
        /**
         * @description ## Filter Field 
         * The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
         */
        filter?: {
          /** @description `filter[identifier]=value` List only those environments matching this identifier. May return multiple results. */
          identifier?: string;
          /** @description `filter[search]=value` search for a value associated with a field on the given environment(s). */
          search?: string;
          /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the environment's current state. */
          state?: string;
          /** @description `filter[stack_build]=ID` stack build filtering by ID.  Submit the ID of the stack build you wish to filter for and the return sill be any environments that have the stack build deployed to them. */
          stack_build?: string;
        };
        sort?: components["parameters"]["SortParam"];
        page?: components["parameters"]["PageParam"];
      };
    };
    responses: {
      /** @description Returns a collection of environment resources. */
      200: {
        content: {
          "application/json": {
            data: (components["schemas"]["Environment"])[];
            includes?: {
              creators?: components["schemas"]["CreatorInclude"];
            };
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Create Environment 
   * @description Requires the `environments-create` capability.
   */
  createEnvironment: {
    requestBody?: {
      content: {
        "application/json": {
          /** @description A user defined name for the environment resource. */
          name: string;
          identifier?: components["schemas"]["Identifier"];
          /** @description The cluster this environment is associated with. */
          cluster: string;
          /** @description Contains details regarding the environment. */
          about: {
            /** @description A custom description for this environment. */
            description: string;
          };
          features: components["schemas"]["Features"];
          /** @description An object representing the associated stack. */
          stack: {
            id: components["schemas"]["ID"];
            build_id: components["schemas"]["ID"];
          } | null;
        };
      };
    };
    responses: {
      /** @description Returns an environment resource. */
      201: {
        content: {
          "application/json": {
            data?: components["schemas"]["Environment"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch Environment 
   * @description Requires the `environments-view` capability.
   */
  getEnvironmentById: {
    parameters: {
      query: {
        /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
        meta?: ("containers" | "containers_count" | "instances_count")[];
        /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
        include?: ("creators" | "stacks")[];
      };
      path: {
        /** @description The ID of the requested environment. */
        environmentId: string;
      };
    };
    responses: {
      /** @description Returns an environment resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Environment"];
            includes?: {
              creators?: components["schemas"]["CreatorInclude"];
            };
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Remove Environment 
   * @description Requires the `environments-update` capability.
   */
  removeEnvironment: {
    parameters: {
      path: {
        /** @description The ID of the requested environment. */
        environmentId: string;
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      202: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Update Environment 
   * @description Updates the specificed environment, setting the values of the parameters passed. If any parameters are omitted, they will be left unchanged. Requires the `environments-update` capability.
   */
  updateEnvironment: {
    parameters: {
      path: {
        /** @description The ID of the requested environment. */
        environmentId: string;
      };
    };
    /** @description Parameters for updating an environment. */
    requestBody?: {
      content: {
        "application/json": {
          name?: string;
          about?: components["schemas"]["EnvironmentAbout"];
        };
      };
    };
    responses: {
      /** @description Returns an environment resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Environment"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Create Environment Job 
   * @description Used to `start`, `stop`, or `delete` an environment. Requires the `environments-state` capability.
   */
  createEnvironmentJob: {
    parameters: {
      path: {
        /** @description The ID of the requested environment. */
        environmentId: string;
      };
    };
    /** @description Parameters for creating a new environment job. */
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description The name of the action to perform. 
           * @enum {string}
           */
          action: "start" | "stop" | "initialize";
        };
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      202: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch Environment Summary 
   * @description Fetches a single summary object for a specific environment. Contains useful and relevant data/statistics that would otherwise be several separate API calls.  Requires the `environments-view` capability.
   */
  getEnvironmentSummary: {
    parameters: {
      path: {
        /** @description The ID of the requested environment. */
        environmentId: string;
      };
    };
    responses: {
      /** @description Returns an environment summary object. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["EnvironmentSummary"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch LB Info 
   * @description Requires the `environments-view` capability.
   */
  getLoadBalancerInfo: {
    parameters: {
      path: {
        /** @description The environmentId where the load balancer resides. */
        environmentId: string;
      };
    };
    responses: {
      /** @description Returns a load balancer info resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["LoadBalancerInfoReturn"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Reconfigure LB 
   * @description Creates a task that will update the load balancer's configuration.
   */
  reconfigureLoadBalancer: {
    parameters: {
      path: {
        /** @description The ID of the environment where this load balancer resides. */
        environmentId: string;
      };
    };
    /** @description Parameters for reconfiguring a load balancer. */
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description The name of the action to perform. 
           * @enum {string}
           */
          action: "reconfigure";
          contents: {
            /** @description Boolean that sets custom vs default VPN configuration */
            customize?: boolean;
            /** @description A boolean where `true` represents the desire to run the environment load balancer service in high availability mode. */
            high_availability?: boolean;
            /** @description The config object for the loadbalancer service. */
            config?: ({
              version?: string;
              /** @description Allow / disallow traffic to be routed via IPv4. */
              ipv4?: boolean | null;
              /** @description Allow / disallow traffic to be routed via IPv6. */
              ipv6?: boolean | null;
              /** @description Describes settings that are passed to HAProxy within the load balancer. */
              haproxy: ({
                default: components["schemas"]["HAProxyConfig"];
                ports: {
                  [key: string]: components["schemas"]["HAProxyConfig"] | undefined;
                };
              }) | null;
            }) | null;
          };
        };
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      202: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Reconfigure Discovery 
   * @description Creates a task that will update the discovery service's configuration.
   */
  reconfigureDiscovery: {
    parameters: {
      path: {
        /** @description The ID of the environment where this discovery service resides. */
        environmentId: string;
      };
    };
    /** @description Parameters for reconfiguring a discovery service. */
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description The name of the action to perform. 
           * @enum {string}
           */
          action: "reconfigure";
          contents: {
            /** @description A boolean where `true` represents the desire to run the environment discovery service in high availability mode. */
            high_availability?: boolean;
          };
        };
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      202: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch VPN Info 
   * @description Requires the `environments-vpn` capability.
   */
  getVPNInfo: {
    parameters: {
      path: {
        /** @description The environmentId where the VPN resides. */
        environmentId: string;
      };
    };
    responses: {
      /** @description Returns a VPNInfo resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["VPNInfoReturn"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch VPN Info 
   * @description Requires the `environments-vpn` capability.
   */
  getVpnLogins: {
    parameters: {
      query: {
        sort?: components["parameters"]["SortParam"];
        page?: components["parameters"]["PageParam"];
      };
      path: {
        /** @description The environmentId where the VPN resides. */
        environmentId: string;
      };
    };
    responses: {
      /** @description Returns a VPNInfo resource. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["VPNLogin"])[];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List VPN Users 
   * @description Requires the `environments-vpn-manage` capability.
   */
  getVPNUsers: {
    parameters: {
      path: {
        /** @description The environmentId where the VPN service resides. */
        environmentId: string;
      };
    };
    responses: {
      /** @description Returns a list of VPN users for the given VPN. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["VPNUsers"])[];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Create VPN User 
   * @description Requires the `environments-vpn-manage` capability.
   */
  createVPNUser: {
    parameters: {
      path: {
        /** @description The environmentId where the VPN service resides. */
        environmentId: string;
      };
    };
    /** @description Parameters for creating a new VPN user. */
    requestBody?: {
      content: {
        "application/json": {
          username: string;
          password: string;
        };
      };
    };
    responses: {
      /** @description Returns a VPN user resource. */
      201: {
        content: {
          "application/json": {
            data?: components["schemas"]["VPNUsers"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Remove VPN user 
   * @description Requires the `environments-vpn-manage` capability.
   */
  removeVPNUser: {
    parameters: {
      path: {
        /** @description The environmentId where the VPN service the given user belongs to resides. */
        environmentId: string;
        /** @description The userId of the user to be deleted. */
        userId: string;
      };
    };
    responses: {
      /** @description Returns a null data object. */
      200: {
        content: {
          "application/json": {
            data?: string;
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Reconfigure VPN 
   * @description Requires the `environments-vpn-manage` capability.
   */
  reconfigureVPN: {
    parameters: {
      path: {
        /** @description The ID of the environment the VPN service resides in. */
        environmentId: string;
      };
    };
    /** @description An object to be submitted when reconfiguring a VPN service. */
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description The action to take. 
           * @enum {string}
           */
          action: "reconfigure";
          /** @description Additional information the platform needs to create this job. */
          contents: {
            /** @description A boolean where true means the VPN service is enabled. */
            enable?: boolean;
            /** @description The config object for the VPN service, in this case without the required fields normally found in a VPN config object. */
            config?: ({
              /** @description If true, routes all traffic through the VPN, even non-Cycle traffic. */
              allow_internet?: boolean;
              /** @description Auth configuration for the VPN. */
              auth?: {
                /** @description A webhook endpoint to hit. Will be passed the login credentials provided to the user, and should return a 200 status if the login is permitted. */
                webhook: string | null;
                /** @description If true, allows any Cycle account with access to the environment to log in to the VPN using their Cycle email and password. */
                cycle_accounts: boolean;
                /** @description If true, allows the custom VPN accounts to log in to the VPN. */
                vpn_accounts?: boolean;
              };
            }) | null;
          };
        };
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      202: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Telemetry Data 
   * @description Requires the `environments-view` capability.
   */
  getEnvironmentInstancesTelemetry: {
    parameters: {
      query: {
        /**
         * @description ## Filter Field 
         * The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
         */
        filter?: {
          /** @description The start date from when to pull instance telemetry data */
          "range-start"?: components["schemas"]["DateTime"];
          /** @description The end date from when to pull instance telemetry data */
          "range-end"?: components["schemas"]["DateTime"];
        };
      };
      path: {
        /** @description The ID of the desired environment */
        environmentId: string;
      };
    };
    responses: {
      /** @description Returns a collection of telemetry data points. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["InstanceTelemetryPoint"])[];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Scoped Variables 
   * @description Requires the `scoped-variables-view` capability.
   */
  listScopedVariables: {
    parameters: {
      query: {
        /**
         * @description ## Filter Field 
         * The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
         */
        filter?: {
          /** @description `filter[identifier]=value` List only those environments matching this identifier. May return multiple results. */
          identifier?: string;
          /** @description `filter[search]=value` search for a value associated with a field on the given scoped variable(s). */
          search?: string;
          /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the scoped variable's current state. */
          state?: string;
        };
        sort?: components["parameters"]["SortParam"];
        page?: components["parameters"]["PageParam"];
      };
      path: {
        /** @description The ID of the requested environment. */
        environmentId: string;
      };
    };
    responses: {
      /** @description Returns a collection of scoped variable resources. */
      200: {
        content: {
          "application/json": {
            data: (components["schemas"]["ScopedVariable"])[];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Create Scoped Variable 
   * @description Requires the `scoped-variables-manage` capability.
   */
  createScopedVariable: {
    parameters: {
      path: {
        /** @description The ID of the requested environment. */
        environmentId: string;
      };
    };
    /** @description Parameters for creating a scoped variable. */
    requestBody?: {
      content: {
        "application/json": {
          /** @description An identifier, similar to a key in an environment variable.  Its used when envoking the scoped variable. */
          identifier: string;
          /** @description An object with information about the encryption of the scoped variable. */
          secret?: {
            /** @description A boolean where true means the scoped variables value is encrypted. */
            encrypted: boolean;
            /** @description A hint for the decryption password. */
            hint?: string;
          } | null;
          scope: components["schemas"]["ScopedVariableScope"];
          /** @description The source or value of the scoped variable. */
          source: components["schemas"]["RawSource"] | components["schemas"]["URLSource"];
        };
      };
    };
    responses: {
      /** @description Returns a scoped variable resource. */
      201: {
        content: {
          "application/json": {
            data?: components["schemas"]["ScopedVariable"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch Scoped Variable 
   * @description Requires the `scoped-variables-view` capability.
   */
  fetchScopedVariable: {
    parameters: {
      path: {
        /** @description The ID of the requested environment. */
        environmentId: string;
        /** @description The ID of the requested scoped variable. */
        scopedVariableId: string;
      };
    };
    responses: {
      /** @description Returns a scoped variable resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ScopedVariable"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Remove Scoped Variable 
   * @description Requires the `scoped-variables-manage` capability.
   */
  removeScopedVariableById: {
    parameters: {
      path: {
        /** @description The ID of the requested environment. */
        environmentId: string;
        /** @description The ID of the requested scoped variable. */
        scopedVariableId: string;
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      202: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Update Scoped Variable 
   * @description Requires the `scoped-variables-manage` capability.
   */
  updateScopedVariable: {
    parameters: {
      path: {
        /** @description The ID of the requested environment. */
        environmentId: string;
        /** @description The ID of the requested scoped variable. */
        scopedVariableId: string;
      };
    };
    /** @description Parameters for updating a scoped variable. */
    requestBody?: {
      content: {
        "application/json": {
          /** @description An identifier, similar to a key in an environment variable.  Its used when envoking the scoped variable. */
          identifier?: string;
          /** @description An object with information about the encryption of the scoped variable. */
          secret?: {
            /** @description A boolean where true means the scoped variables value is encrypted. */
            encrypted: boolean;
            /** @description A hint for the decryption password. */
            hint?: string;
          } | null;
          scope?: components["schemas"]["ScopedVariableScope"];
          /** @description The source or value of the scoped variable. */
          source?: components["schemas"]["RawSource"] | components["schemas"]["URLSource"];
        };
      };
    };
    responses: {
      /** @description Returns a scoped variable resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ScopedVariable"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Containers 
   * @description Requires the `containers-view` capability.
   */
  getContainers: {
    parameters: {
      query: {
        /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
        meta?: ("instances_count" | "domain" | "domains" | "ips")[];
        /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
        include?: ("creators" | "images" | "stack_builds" | "stacks" | "environments")[];
        /**
         * @description ## Filter Field
         * The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
         */
        filter?: {
          /** @description `filter[identifier]=value` List only those containers matching this identifier. May return multiple results. */
          identifier?: string;
          /** @description `filter[search]=value` search containers for a value associated with a field on the given container(s). */
          search?: string;
          /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the container's current state. */
          state?: string;
          /** @description `filter[service]=value` service filtering will allow you to filter by service type: `loadbalancer`, `discovery`, `vpn`. */
          service?: string;
          /** @description `filter[public_network]=value` public network filtering will allow you to filter by the containers network settings: `enabled`, `disabled`, `egress-only`. */
          public_network?: string;
          /** @description `filter[image]=ID` image filtering by ID.  Submit the ID of the image you wish to filter for and the return will be any containers currently using the image. */
          image?: string;
          /** @description `filter[environment]=ID` environment filtering by ID.  Submit the ID of the environment you wish to filter for and the return will be any containers in that environment. */
          environment?: string;
          /** @description `filter[tags]=tagone,tagtwo,tagthree` container filtering using server tags. If the container has the tags you submit it will be part of the return. */
          tags?: string;
          /** @description `filter[stack]=ID` stack filtering by ID.  Submit the ID of the stack you wish to filter for and the return will be any containers deployed associated with 'containers' from the stack. */
          stack?: string;
        };
        sort?: components["parameters"]["SortParam"];
        page?: components["parameters"]["PageParam"];
      };
    };
    responses: {
      /** @description Returns a collection of container resources. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["Container"])[];
            includes?: components["schemas"]["ContainerIncludes"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Create Container 
   * @description Requires the `containers-deploy` capability.
   */
  createContainer: {
    /** @description Parameters for creating a new container. */
    requestBody?: {
      content: {
        "application/json": {
          /** @description A user defined name for the container. */
          name: string;
          identifier?: components["schemas"]["Identifier"];
          /** @description An identifier for the environment this container will be deployed to. */
          environment_id: string;
          /** @description An identifier for the image used to create this container. */
          image_id: string;
          /** @description A boolean where true represents this container is stateful. */
          stateful: boolean;
          config: components["schemas"]["Config"];
          volumes?: (components["schemas"]["ContainerVolume"])[];
          /** @description User defined meta data for the container. */
          annotations?: {
            [key: string]: string | undefined;
          };
        };
      };
    };
    responses: {
      /** @description Returns a container resource. */
      201: {
        content: {
          "application/json": {
            data?: components["schemas"]["Container"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch Container 
   * @description Requires the `containers-view` capability.
   */
  getContainerById: {
    parameters: {
      query: {
        /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
        meta?: ("instances_count" | "domain" | "domains" | "ips")[];
        /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
        include?: ("creators" | "images" | "stack_builds" | "stacks" | "environments")[];
      };
      path: {
        /** @description The ID of the requested container. */
        containerId: string;
      };
    };
    responses: {
      /** @description Returns an container resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Container"];
            includes?: components["schemas"]["InstanceIncludes"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Delete Container 
   * @description Requires the `contianers-update` capability.
   */
  removeContainer: {
    parameters: {
      path: {
        /** @description The ID of the requested container. */
        containerId: string;
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Update Container 
   * @description Updates the specified container, setting the values of the parameters passed.  If any parameters are omitted, they will be left unchanged. Requires the `contianers-update` capability.
   */
  updateContainer: {
    parameters: {
      path: {
        /** @description The ID of the container. */
        containerId: string;
      };
    };
    /** @description Parameters for updating a container. */
    requestBody?: {
      content: {
        "application/json": {
          /** @description The name for the container. */
          name?: string;
          /** @description The name for the identifier. */
          identifier?: string;
          /** @description Sets whether container should be deprecated. */
          deprecate?: boolean;
          /** @description User meta data for the container. */
          annotation?: {
            [key: string]: string | undefined;
          };
        };
      };
    };
    responses: {
      /** @description Returns the updated container resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Container"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch Container Summary 
   * @description Requires the `containers-view` capability.
   */
  getContainerSummary: {
    parameters: {
      path: {
        /** @description The ID of the requested container. */
        containerId: string;
      };
    };
    responses: {
      /** @description Returns an container summary resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ContainerSummary"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Create Container Job 
   * @description Used to perform different actions on a given container. Requires the `containers-state`, `containers-update`, or `containers-volumes-manage` capability (respectively).
   */
  createContainerJob: {
    parameters: {
      path: {
        /** @description The ID of the requested container. */
        containerId: string;
      };
    };
    /** @description Parameters for creating a new container job. */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ContainerStartAction"] | components["schemas"]["ContainerStopAction"] | components["schemas"]["ReconfigureContainer"] | components["schemas"]["ReconfigureVolumes"] | components["schemas"]["Reimage"] | components["schemas"]["Scale"];
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      202: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Instances 
   * @description Requires the `containers-view` capability.
   */
  getInstances: {
    parameters: {
      query: {
        /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
        include?: ("creators" | "servers" | "locations" | "providers" | "containers" | "environments")[];
        /**
         * @description ## Filter Field 
         * The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
         */
        filter?: {
          /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the instance's current state. */
          state?: string;
          /** @description `filter[search]=value` search instances for a value associated with a field on the given instance(s). */
          search?: string;
          /** @description `filter[server]=ID` server filtering by ID. Submit the ID of the server you wish to filter for and the return will be any instances of the container currently deployed to the given server. */
          server?: string;
        };
        sort?: components["parameters"]["SortParam"];
        page?: components["parameters"]["PageParam"];
      };
      path: {
        /** @description The ID of the container this instance is created from. */
        containerId: string;
      };
    };
    responses: {
      /** @description Returns a collection of contianer instance resources. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["Instance"])[];
            includes?: components["schemas"]["InstanceIncludes"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Create Instance(s) 
   * @description Requires the `containers-update` capability.
   */
  createContainerInstance: {
    parameters: {
      path: {
        /** @description The ID of the container this instance is created from. */
        containerId: string;
      };
    };
    /** @description Parameters for creating a container instance. */
    requestBody?: {
      content: {
        "application/json": ({
            /** @description The ID of the server the new instance(s) should be deployed to. */
            server_id: string;
            /** @description The number of new instances to be created on the given server. */
            new_instances: number;
          })[];
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      202: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Delete Instance(s) 
   * @description Requires the `containers-update` capability.
   */
  removeMultipleContainerInstances: {
    parameters: {
      path: {
        /** @description The ID of the container the instance(s) were created from. */
        containerId: string;
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch Instance 
   * @description Requires the `containers-view` capability.
   */
  getContainerInstance: {
    parameters: {
      query: {
        /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
        include?: ("creators" | "servers" | "locations" | "providers" | "containers" | "environments")[];
      };
      path: {
        /** @description The ID of the requested container. */
        containerId: string;
        /** @description The ID for the container instance. */
        instanceId: string;
      };
    };
    responses: {
      /** @description Returns a container instance resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Instance"];
            includes?: components["schemas"]["InstanceIncludes"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Delete Instance 
   * @description Requires the `containers-update` capability.
   */
  removeContainerInstance: {
    parameters: {
      path: {
        /** @description The ID of the requested container. */
        containerId: string;
        /** @description The ID for the container instance. */
        instanceId: string;
      };
    };
    responses: {
      /** @description Returns a task descriptor */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch SSH Credentials 
   * @description Requires the `containers-ssh` capability.
   */
  getSSHConnection: {
    parameters: {
      path: {
        /** @description The ID of the requested container. */
        containerId: string;
        /** @description The ID for the container instance. */
        instanceId: string;
      };
    };
    responses: {
      /** @description Returns a SSH connection response. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["SSHResponse"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Expire SSH Credentials 
   * @description Requires the `containers-ssh` capability.
   */
  expireInstanceSSHTokens: {
    parameters: {
      path: {
        /** @description The ID of the requested container. */
        containerId: string;
        /** @description The ID for the container instance. */
        instanceId: string;
      };
    };
    responses: {
      /** @description Returns a data object holding the amount of tokens removed. */
      200: {
        content: {
          "application/json": {
            /** @description The number of tokens expired. */
            data?: {
              /** @description The number of tokens expired. */
              tokens: number;
            };
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Create Instance Task 
   * @description Used to perform different actions on a given container instance, requries `containers-instance-migrate` capability.
   */
  createContainerInstanceJob: {
    parameters: {
      path: {
        /** @description The ID of the requested container. */
        containerId: string;
        /** @description The ID for the container instance. */
        instanceId: string;
      };
    };
    /** @description Parameters for creating a new container instance job. */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["RevertMigration"] | components["schemas"]["Migrate"];
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      202: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch Instance Volume(s) 
   * @description Requires the `containers-view` capability.
   */
  getContainerInstanceVolumes: {
    parameters: {
      query: {
        sort?: components["parameters"]["SortParam"];
        page?: components["parameters"]["PageParam"];
      };
      path: {
        /** @description The ID of the requested container. */
        containerId: string;
        /** @description The ID for the container instance. */
        instanceId: string;
      };
    };
    responses: {
      /** @description Returns an array of container instance volume resources. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["InstanceVolume"])[];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch Instance Telemetry Report 
   * @description Requires the `containers-view` capability.
   */
  getInstanceResourcesTelemetryReport: {
    parameters: {
      query: {
        /**
         * @description ## Filter Field 
         * The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
         */
        filter?: {
          /** @description The start date from when to pull instance telemetry data */
          "range-start"?: components["schemas"]["DateTime"];
          /** @description The end date from when to pull instance telemetry data */
          "range-end"?: components["schemas"]["DateTime"];
        };
      };
      path: {
        /** @description The ID of the requested container. */
        containerId: string;
        /** @description The ID for the container instance. */
        instanceId: string;
      };
    };
    responses: {
      /** @description Returns an instance telemetry report. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["InstanceTelemetryReport"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Container Servers 
   * @description Requires the `containers-view` capability.
   */
  ContainersListServers: {
    parameters: {
      query: {
        /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
        meta?: ("primary_ip")[];
        sort?: components["parameters"]["SortParam"];
        page?: components["parameters"]["PageParam"];
      };
      path: {
        /** @description The ID of the requested container. */
        containerId: string;
      };
    };
    responses: {
      /** @description Returns a list of server instance resources. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ServersList"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Usable Servers 
   * @description Requires the `containers-view` capability.
   */
  getUsableServers: {
    parameters: {
      query: {
        /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
        meta?: ("node" | "instances_count")[];
        /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
        include?: ("location" | "models" | "providers")[];
        sort?: components["parameters"]["SortParam"];
        page?: components["parameters"]["PageParam"];
      };
      path: {
        /** @description The ID of the requested container. */
        containerId: string;
      };
    };
    responses: {
      /** @description Returns a list of server resources. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["Server"])[];
            includes?: components["schemas"]["ServerIncludes"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch Compatible Images 
   * @description Requires the `containers-view` capability.
   */
  getCompatibleImages: {
    parameters: {
      query: {
        sort?: components["parameters"]["SortParam"];
        page?: components["parameters"]["PageParam"];
      };
      path: {
        /** @description The ID of the requested container. */
        containerId: string;
      };
    };
    responses: {
      /** @description Returns a collection of image resources. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["Image"])[];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Backups 
   * @description Requires the `containers-backups-view` capability.
   */
  getBackupsCollection: {
    parameters: {
      query: {
        sort?: components["parameters"]["SortParam"];
        page?: components["parameters"]["PageParam"];
      };
      path: {
        /** @description The ID of the requested container. */
        containerId: string;
      };
    };
    responses: {
      /** @description Returns a list of container backup resources. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["Backup"])[];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch Backup 
   * @description Requires the `containers-backups-view` capability.
   */
  getBackup: {
    parameters: {
      path: {
        /** @description The ID of the requested container. */
        containerId: string;
        /** @description The ID for the container backup. */
        backupId: string;
      };
    };
    responses: {
      /** @description Returns a backup resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Backup"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Delete Backup 
   * @description Requires the `containers-backups-manage` capability.
   */
  removeBackup: {
    parameters: {
      path: {
        /** @description The ID of the requested container. */
        containerId: string;
        /** @description The ID for the container backup. */
        backupId: string;
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      202: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Create Backup Job 
   * @description Used to restore a backup for a given container instance. Requires the `containers-backups-manage` capability.
   */
  restoreBackupJob: {
    parameters: {
      path: {
        /** @description The ID of the requested container. */
        containerId: string;
        /** @description The ID of the backup. */
        backupId: string;
      };
    };
    /** @description Parameters for creating a new backup job. */
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description The action to take. 
           * @enum {string}
           */
          action: "restore";
          /** @description Additional information the platform needs to create this job. */
          contents: {
            /** @description The ID of the instance this backup is being restored to. */
            instance_id: string;
          };
        };
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      202: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Backup Logs 
   * @description Requires the `containers-backups-view` capability.
   */
  getBackupLogs: {
    parameters: {
      path: {
        /** @description The ID of the requested container. */
        containerId: string;
        /** @description The ID for the container backup. */
        backupId: string;
      };
    };
    responses: {
      /** @description Returns a collection of backup logs. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["Logs"])[];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Telemetry Data 
   * @description Requires the `containers-view` capability.
   */
  getContainerInstancesTelemetry: {
    parameters: {
      query: {
        /**
         * @description ## Filter Field 
         * The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
         */
        filter?: {
          /** @description The start date from when to pull instance telemetry data */
          "range-start"?: components["schemas"]["DateTime"];
          /** @description The end date from when to pull instance telemetry data */
          "range-end"?: components["schemas"]["DateTime"];
        };
      };
      path: {
        /** @description The ID of the desired container */
        containerId: string;
      };
    };
    responses: {
      /** @description Returns a collection of telemetry data points. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["InstanceTelemetryPoint"])[];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List DNS Zones 
   * @description Requires the `dns-view` capability.
   */
  getZonesCollection: {
    parameters: {
      query: {
        /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
        include?: ("creators")[];
        /**
         * @description ## Filter Field 
         * The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
         */
        filter?: {
          /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the DNS zone's current state. */
          state?: string;
        };
        sort?: components["parameters"]["SortParam"];
        page?: components["parameters"]["PageParam"];
      };
    };
    responses: {
      /** @description Returns a collection of DNS zone resources. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["Zone"])[];
            includes?: components["schemas"]["ZoneIncludes"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Create DNS Zone 
   * @description Requires the `dns-manage` capability.
   */
  createDNSZone: {
    /** @description Parameters for creating a new DNS zone. */
    requestBody?: {
      content: {
        "application/json": {
          /** @description A boolean where true represents the desire for the origin to be of the type `hosted`. */
          hosted: boolean;
          /** @description The origin that will be created. */
          origin: string;
        };
      };
    };
    responses: {
      /** @description Returns the DNS zone resource. */
      201: {
        content: {
          "application/json": {
            data?: components["schemas"]["Zone"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch DNS Zone 
   * @description Requires the `dns-view` capability.
   */
  getDNSZone: {
    parameters: {
      path: {
        /** @description The ID of the zone. */
        zoneId: string;
      };
    };
    responses: {
      /** @description Returns a DNS zone resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Zone"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Remove DNS Zone 
   * @description Requires the `dns-manage` capability.
   */
  removeDNSZone: {
    parameters: {
      path: {
        /** @description The ID of the zone. */
        zoneId: string;
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Update DNS Zone 
   * @description Requires the `dns-manage` capability.
   */
  updateDNSZone: {
    parameters: {
      query: {
        /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
        include?: ("creators")[];
      };
      path: {
        /** @description The ID of the zone. */
        zoneId: string;
      };
    };
    /** @description Parameters for updating a DNS Zone. */
    requestBody?: {
      content: {
        "application/json": {
          /** @description A boolean where true represents the desire for the origin to be of the type `hosted`. */
          hosted: boolean;
        };
      };
    };
    responses: {
      /** @description Returns a DNS zone resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Zone"];
            includes?: components["schemas"]["ZoneIncludes"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Create DNS Zone Job 
   * @description Used to perform different actions on a given DNS zone, requires the `dns-manage` capability.
   */
  DNSZoneTask: {
    parameters: {
      path: {
        /** @description The ID of the zone. */
        zoneId: string;
      };
    };
    /** @description Parameters for creating a new DNS zone job. */
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description The action that the job will take. 
           * @enum {string}
           */
          action: "verify";
        };
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      202: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Records 
   * @description Requires the `dns-view` capability.
   */
  getRecordsCollection: {
    parameters: {
      query: {
        /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
        include?: ("creators" | "containers")[];
        /**
         * @description ## Filter Field 
         * The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
         */
        filter?: {
          /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the DNS record's current state. */
          state?: string;
        };
        sort?: components["parameters"]["SortParam"];
        page?: components["parameters"]["PageParam"];
      };
      path: {
        /** @description The ID of the zone. */
        zoneId: string;
      };
    };
    responses: {
      /** @description Returns a collection of DNS zone resources. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["Record"])[];
            includes?: components["schemas"]["RecordIncludes"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Create Record 
   * @description Requires the `dns-manage` capability.
   */
  createDNSRecord: {
    parameters: {
      path: {
        /** @description The ID of the zone. */
        zoneId: string;
      };
    };
    /** @description Parameters for creating a new DNS record. */
    requestBody?: {
      content: {
        "application/json": {
          type: components["schemas"]["RecordTypes"];
          /** @description A name for the given record where `@` represents the desire to use the root of the origin. */
          name: string;
        };
      };
    };
    responses: {
      /** @description Returns the DNS zone resource. */
      201: {
        content: {
          "application/json": {
            data?: components["schemas"]["Record"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Delete Record 
   * @description Requires the `dns-manage` capability.
   */
  removeDNSRecord: {
    parameters: {
      path: {
        /** @description The ID of the zone. */
        zoneId: string;
        /** @description The ID of the record. */
        recordId: string;
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Update DNS Record 
   * @description Requires the `dns-manage` capability.
   */
  updateDNSRecord: {
    parameters: {
      path: {
        /** @description The ID of the zone. */
        zoneId: string;
        /** @description The ID of the record. */
        recordId: string;
      };
    };
    /** @description Parameters for updateing a DNS record. The name value cannot be updated and is ommitted from the properties. */
    requestBody?: {
      content: {
        "application/json": {
          type: components["schemas"]["RecordTypes"];
        };
      };
    };
    responses: {
      /** @description Returns a DNS record resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Record"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Create a DNS record Job 
   * @description Used to perform different actionson a given DNS record, requires the `dns-manage` capability.
   */
  DNSRecordTask: {
    parameters: {
      path: {
        /** @description The ID of the zone. */
        zoneId: string;
        /** @description The ID of the record. */
        recordId: string;
      };
    };
    /** @description Parameters for creating a new DNS zone job. */
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description The action that the job will take. 
           * @enum {string}
           */
          action: "generateCert";
        };
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      202: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List TLS Generate Attempts 
   * @description Requires the `dns-view` capability.
   */
  DNSTLSAttempts: {
    parameters: {
      query: {
        /**
         * @description ## Filter Field 
         * The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
         */
        filter?: {
          /** @description `filter[domain]=value` filter the return for TLS attempts by domain. */
          domain?: string;
        };
        sort?: components["parameters"]["SortParam"];
        page?: components["parameters"]["PageParam"];
      };
    };
    responses: {
      /** @description Returns a list of TLS certificate generation attempt resources. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["Attempt"])[];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch Domain TLS Certificate 
   * @description Requires the `dns-view` capability.
   */
  lookupDnsCertificate: {
    parameters: {
      query: {
        /** @description The domain to lookup. */
        domain: string;
        /** @description Whether or not to lookup a *. wildcard certificate that would be applicable for this domain. For example, if you are looking for a certificate for x.test.com, setting this to true will identify a *.test.com certificate that would also be applicable. */
        wildcard?: boolean;
      };
    };
    responses: {
      /** @description Returns a TLS certificate bundle resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["DnsTlsCertificate"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Hubs 
   * @description Lists all associated hubs.
   */
  getHubs: {
    parameters: {
      query: {
        /**
         * @description ## Filter Field
         * The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
         */
        filter?: {
          /** @description `filter[identifier]=value` List only those environments matching this identifier. May return multiple results. */
          identifier?: string;
          /** @description `filter[search]=value` search hubs for a value associated with a field on the given hub(s). */
          search?: string;
          /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the hub's current state. */
          state?: string;
        };
      };
    };
    responses: {
      /** @description Returns a list of hub resources. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["Hub"])[];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Create Hub 
   * @description Create a hub resource.
   */
  createHub: {
    /** @description Parameters for creating a hub. */
    requestBody?: {
      content: {
        "application/json": {
          /** @description A name for the hub. */
          name?: string;
          identifier?: components["schemas"]["Identifier"];
          integrations?: components["schemas"]["HubIntegrations"];
          /** @description All hub webhooks for the given hub. */
          webhooks?: {
            /** @description A webhook to report information to each time a server is deployed on the given hub. */
            server_deployed: string | null;
          };
        };
      };
    };
    responses: {
      /** @description Returns a hub resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Hub"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch Hub 
   * @description Requires the `hubs-view` capability.
   */
  getHub: {
    parameters: {
      query: {
        /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
        meta?: ("memberships")[];
      };
    };
    responses: {
      /** @description Returns an hub resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Hub"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Remove Hub 
   * @description Requires the `hubs-delete` capability. This can only be aquired by being the hub owner.
   */
  removeHub: {
    responses: {
      /** @description Returns a task descriptor. */
      202: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Update Hub 
   * @description Updates the specified hub, setting the values of the parameters passed.
   */
  updateHub: {
    /** @description Parameters for updating a hub. */
    requestBody?: {
      content: {
        "application/json": {
          /** @description A name for the hub. */
          name?: string;
          integrations?: components["schemas"]["HubIntegrations"];
          /** @description All hub webhooks for the given hub. */
          webhooks?: {
            /** @description A webahook to report information to each time a server is deployed on the given hub. */
            server_deployed: string | null;
          };
        };
      };
    };
    responses: {
      /** @description Returns the updated Hub resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Hub"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Activity 
   * @description Doesn't require a specific capability.
   */
  getHubActivity: {
    parameters: {
      query: {
        /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
        include?: ("users" | "components" | "creators" | "images" | "stack_builds" | "stacks" | "environments")[];
        /**
         * @description ## Filter Field
         * The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
         */
        filter?: {
          /** @description `filter[search]=value` search activities for a value associated with a field on the given activity(s). */
          search?: string;
          /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the activity's current state. */
          state?: string;
          /** @description `filter[user]=ID` user filtering by ID. Submit the ID of the user you wish to filter for and the return will be any activity from that user. */
          user?: string;
          /** @description `filter[environment]=ID` environment filtering by ID. Submit the ID of the environment you wish to filter for and the return will be any activity from that environment. */
          environment?: string;
          /** @description `filter[container]=ID` container filtering by ID. Submit the ID of the container you wish to filter for and the return will be any activity from that container. */
          container?: string;
          /** @description `filter[instance]=ID` instance filtering by ID. Submit the ID of the instance you wish to filter for and the return will be any activity from that instance. */
          instance?: string;
          /** @description `filter[server]=ID` server filtering by ID. Submit the ID of the server you wish to filter for and the return will be any activity from that server. */
          server?: string;
          /** @description `filter[event]=value` filter by event occurrence. Example: `filter[event]=environment.services.vpn.login` */
          event?: string;
          /**
           * @description `filter[verbosity]=integer` filter the activity return by verbosity. The verbosity can be:
           *   `0` - Activity that users would find useful.
           *   `1` - Activity that can be useful when tracking down how something happened. 
           *   `2` - Full activity, can be useful in debugging problems.
           */
          verbosity?: number;
        };
        sort?: components["parameters"]["SortParam"];
        page?: components["parameters"]["PageParam"];
      };
    };
    responses: {
      /** @description Returns a collection of activity resources. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["Activity"])[];
            includes?: components["schemas"]["ActivityIncludes"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Hub Capabilities 
   * @description Does not require a capability.
   */
  getHubCapabilities: {
    responses: {
      /** @description Returns a list of capabilities. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["Capability"])[];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch Hub 
   * @description Requires the `hubs-view` capability.
   */
  getHubUsage: {
    parameters: {
      query: {
        filter?: components["parameters"]["FilterParam"];
      };
    };
    responses: {
      /** @description Returns an hubUsageResults resource. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["HubUsageDatum"])[];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Remove Hub Invite 
   * @description Requires the `hub-invites-manage` capability.
   */
  removeHubInvite: {
    parameters: {
      path: {
        /** @description The ID of the hub invite. */
        inviteId: string;
      };
    };
    responses: {
      /** @description Returns a hub membership resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["HubMembership"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Hub Invites 
   * @description Requires the `hubs-invites-manage` capability.
   */
  getHubInvites: {
    parameters: {
      query: {
        /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
        meta?: ("capabilities")[];
        /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
        include?: ("senders" | "hubs" | "accounts")[];
        sort?: components["parameters"]["SortParam"];
        filter?: components["parameters"]["FilterParam"];
        page?: components["parameters"]["PageParam"];
      };
    };
    responses: {
      /** @description Returns a list of membership resources. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["HubMembership"])[];
            includes?: components["schemas"]["HubMembershipIncludes"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Create Hub Invite 
   * @description Requires the `hubs-invites-send` capability.
   */
  createHubInvite: {
    /** @description Parameters for creating a hub invite. */
    requestBody?: {
      content: {
        "application/json": {
          /** @description The email address of the invitee. */
          recipient?: string;
          /**
           * @description The account role. 
           * @enum {string}
           */
          role?: "owner" | "admin" | "developer" | "analyst";
          /** @description The environment permissions the invitee will have */
          permissions?: {
            /** @description Boolean value that indicates the user has access to all environments */
            all_environments: boolean;
            /** @description A list of objects that describe the specific environments the invitee will have access to */
            environments: ({
                /** @description The ID of the environment */
                id: string;
                /** @description Boolean indicating the invitee has manage rights to environment */
                manage: boolean;
              })[];
          };
        };
      };
    };
    responses: {
      /** @description Returns a hub membership resource. */
      201: {
        content: {
          "application/json": {
            data?: components["schemas"]["HubMembership"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Hub Memberships 
   * @description Requires the `hubs-members-view` capability.
   */
  getHubMembers: {
    parameters: {
      query: {
        /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
        meta?: ("capabilities")[];
        /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
        include?: ("senders" | "hubs" | "accounts")[];
        sort?: components["parameters"]["SortParam"];
        filter?: components["parameters"]["FilterParam"];
        page?: components["parameters"]["PageParam"];
      };
    };
    responses: {
      /** @description Returns a list of memebership resources. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["HubMembership"])[];
            includes?: components["schemas"]["HubMembershipIncludes"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch Hub Member 
   * @description Requires the `hubs-members-view` capability.
   */
  getHubMember: {
    parameters: {
      query: {
        /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
        include?: ("senders" | "hubs" | "accounts")[];
      };
      path: {
        /** @description The ID for the given member. */
        memberId: string;
      };
    };
    responses: {
      /** @description Returns a membership resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["HubMembership"];
            includes?: components["schemas"]["HubMembershipIncludes"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Remove Hub Member 
   * @description Requires the `hubs-members-manage` capability.
   */
  removeHubMember: {
    parameters: {
      path: {
        /** @description The ID for the given member. */
        memberId: string;
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      202: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /** Update a Hub Member */
  updateHubMember: {
    parameters: {
      path: {
        /** @description The ID for the given member. */
        memberId: string;
      };
    };
    /** @description Parameters for updating a hub membership. */
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description The account role. 
           * @enum {string}
           */
          role?: "owner" | "admin" | "developer" | "analyst";
          permissions?: components["schemas"]["Permissions"];
        };
      };
    };
    responses: {
      /** @description Returns a hub membership resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["HubMembership"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch Members Account 
   * @description Requires the `hubs-members-view` capability.
   */
  getHubMembersAccount: {
    parameters: {
      query: {
        /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
        meta?: ("capabilities")[];
        /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
        include?: ("senders" | "hubs" | "accounts")[];
      };
      path: {
        /** @description The ID of the member account. */
        accountId: string;
      };
    };
    responses: {
      /** @description Returns a membership resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["HubMembership"];
            includes?: components["schemas"]["HubMembershipIncludes"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List API Keys 
   * @description Requires the `api-keys-manage` capability.
   */
  getApiKeys: {
    parameters: {
      query: {
        sort?: components["parameters"]["SortParam"];
        filter?: components["parameters"]["FilterParam"];
        page?: components["parameters"]["PageParam"];
      };
    };
    responses: {
      /** @description Returns a collection of API Key resources. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["ApiKey"])[];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Create API Key 
   * @description Requires the `api-keys-manage` capability.
   */
  createApiKey: {
    /** @description Parameters for creating an API Key. */
    requestBody?: {
      content: {
        "application/json": {
          /** @description A name given to the API Key. */
          name?: string;
          permissions?: components["schemas"]["Permissions"];
          /** @description An object defining the capabilities of the given API key. */
          capabilities?: {
            /** @description A boolean where true is giving the key all grantable capabilities. */
            all: boolean;
            /** @description An array of capabilites. */
            specific: (components["schemas"]["Capability"])[];
          };
          /** @description An array of approved IPs from which this API Key can be used. */
          ips?: (string)[] | null;
        };
      };
    };
    responses: {
      /** @description Returns an API Key resource. */
      201: {
        content: {
          "application/json": {
            data?: components["schemas"]["ApiKey"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch API Key 
   * @description Requries the `api-keys-manage` capability.
   */
  getApiKey: {
    parameters: {
      path: {
        /** @description The ID of the API Key. */
        apikeyId: string;
      };
    };
    responses: {
      /** @description Returns an API Key resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ApiKey"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * remove Api Key 
   * @description Requires the 'api-keys-delete' capability.
   */
  removeApiKey: {
    parameters: {
      path: {
        /** @description The ID of the API Key. */
        apikeyId: string;
      };
    };
    responses: {
      /** @description Returns an API Key resource */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ApiKey"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Update API Key 
   * @description Requires the `api-keys-manage` capability.
   */
  updateApiKey: {
    parameters: {
      path: {
        /** @description The ID of the API Key. */
        apikeyId: string;
      };
    };
    /** @description Parameters for updating an API Key. */
    requestBody?: {
      content: {
        "application/json": {
          /** @description A name given to the API Key. */
          name?: string;
          permissions?: components["schemas"]["Permissions"];
          capabilities?: {
            all: boolean;
            specific: (components["schemas"]["Capability"])[];
          };
          /** @description An array of approved IPs from which this API Key can be used. */
          ips?: (string)[] | null;
        };
      };
    };
    responses: {
      /** @description Returns and API Key resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ApiKey"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Get Search Index 
   * @description Requires the view capability for each returned segment
   */
  getSearchIndex: {
    responses: {
      /** @description Returns the index resources. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Index"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Images 
   * @description Requires the `images-view` capability.
   */
  getImages: {
    parameters: {
      query: {
        /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
        meta?: ("containers_count")[];
        /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
        include?: ("creators" | "stack_builds" | "stacks" | "sources")[];
        /**
         * @description ## Filter Field 
         * The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
         */
        filter?: {
          /** @description `filter[identifier]=value` List only those images matching this identifier. May return multiple results. */
          identifier?: string;
          /** @description `filter[search]=value` search for a value associated with a field on the given image(s). */
          search?: string;
          /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the image's current state. */
          state?: string;
          /** @description `filter[source_type]=value` filter images by the image source's type.  Can be: `direct` or `stack_build` */
          source_type?: string;
          /** @description `filter[source_id]=ID` image filtering by source ID.  Submit the ID of the image source you wish to filter for and the return will be any images created from that source. */
          source_id?: string;
        };
        sort?: components["parameters"]["SortParam"];
        page?: components["parameters"]["PageParam"];
      };
    };
    responses: {
      /** @description Returns a collection of image resources. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["Image"])[];
            includes?: components["schemas"]["ImageIncludes"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Create Image 
   * @description Requires the `images-import` capability.
   */
  createImage: {
    /** @description Parameters for creating a new image. */
    requestBody?: {
      content: {
        "application/json": {
          /** @description A name for the image. */
          name?: string;
          /** @description The ID for the image source to be used. */
          source_id: string;
          /** @description A build object, holding information important to the image build. */
          build?: {
            /** @description An object holding key value build time arguments needed for the image during build time. */
            args?: {
              [key: string]: string | undefined;
            };
          };
          /** @description An override object to be used for a single image create request. */
          override?: {
            /** @description A target to be used for overridding the default target. */
            target: string;
          };
        };
      };
    };
    responses: {
      /** @description Returns an image resource. */
      201: {
        content: {
          "application/json": {
            data?: components["schemas"]["Image"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch Image 
   * @description Requires the `images-view` capability.
   */
  getImage: {
    parameters: {
      query: {
        /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
        meta?: ("containers_count")[];
        /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
        include?: ("creators" | "stack_builds" | "stacks" | "sources")[];
        sort?: components["parameters"]["SortParam"];
        page?: components["parameters"]["PageParam"];
      };
      path: {
        /** @description The ID of the image. */
        imageId: string;
      };
    };
    responses: {
      /** @description Returns a image resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Image"];
            includes?: components["schemas"]["ImageIncludes"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Delete Image 
   * @description Requires the `images-updae` capability.
   */
  removeImage: {
    parameters: {
      path: {
        /** @description The ID of the image. */
        imageId: string;
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Update Image 
   * @description Requires the `images-updae` capability.
   */
  updateImage: {
    parameters: {
      path: {
        /** @description The ID of the image. */
        imageId: string;
      };
    };
    /** @description Parameters for creating a new image. */
    requestBody?: {
      content: {
        "application/json": {
          /** @description A name for the image. */
          name?: string;
        };
      };
    };
    responses: {
      /** @description Returns an image resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Image"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch Build Log 
   * @description Requires the `images-view` capability.
   */
  getImageBuildLog: {
    parameters: {
      path: {
        /** @description The ID of the image. */
        imageId: string;
      };
    };
    responses: {
      /** @description Returns a build log resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["BuildLog"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Images Prune 
   * @description Used to perform different actions on a given image. Requires the `images-delete` capability.
   */
  createImageCollectionJob: {
    /** @description Parameters for creating a new images collection job. */
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description The action is the job type to create. 
           * @enum {string}
           */
          action: "prune";
          /** @description Additional contents needed by the platform to create the job. */
          contents: {
            /** @description A list of source_ids to be pruned. */
            source_ids: (string)[];
          };
        };
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      202: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Image Jobs 
   * @description Used to perform different actions on a given image.  Requires the `images-import` capabiltiy.
   */
  createImageJob: {
    parameters: {
      path: {
        /** @description The ID of the requested image. */
        imageId: string;
      };
    };
    /** @description Parameters for creating a new image job. */
    requestBody?: {
      content: {
        "application/json": {
          /** @enum {string} */
          action: "import";
        };
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Sources 
   * @description Requires the `images-view` capability.
   */
  getSourcesCollection: {
    parameters: {
      query: {
        /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
        meta?: ("images_count")[];
        /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
        include?: ("creators")[];
        /**
         * @description ## Filter Field 
         * The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
         */
        filter?: {
          /** @description `filter[identifier]=value` List only those image sources matching this identifier. May return multiple results. */
          identifier?: string;
          /** @description `filter[search]=value` search for a value associated with a field on the given image source(s). */
          search?: string;
          /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the image source's current state. */
          state?: string;
        };
        sort?: components["parameters"]["SortParam"];
        page?: components["parameters"]["PageParam"];
      };
    };
    responses: {
      /** @description Returns a collection of image source resources. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["ImageSource"])[];
            includes?: components["schemas"]["SourceIncludes"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Create Source 
   * @description requires the `images-import` capability.
   */
  createImageSource: {
    /** @description Parameters for creating an image source. */
    requestBody?: {
      content: {
        "application/json": {
          /** @description A name for the image source. */
          name?: string;
          identifier?: components["schemas"]["Identifier"];
          /**
           * @description A value identifiying the type of image. 
           * @enum {string}
           */
          type: "stack_build" | "direct";
          origin: components["schemas"]["ImageSourceOrigin"];
          /** @description User defined information about the image source. */
          about?: {
            /** @description A description of the image source. */
            description: string | null;
          };
        };
      };
    };
    responses: {
      /** @description Returns an image source resource. */
      201: {
        content: {
          "application/json": {
            data?: components["schemas"]["ImageSource"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch Source 
   * @description Requires the `images-view` capability.
   */
  getSource: {
    parameters: {
      query: {
        /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
        meta?: ("images_count")[];
        /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
        include?: ("creators")[];
      };
      path: {
        /** @description The ID of the image source. */
        sourceId: string;
      };
    };
    responses: {
      /** @description Returns a single image source. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ImageSource"];
            includes?: components["schemas"]["SourceIncludes"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Remove a given image source 
   * @description Requires the `images-import` capability.
   */
  removeImageSource: {
    parameters: {
      path: {
        /** @description The ID of the image source. */
        sourceId: string;
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      202: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Update Source 
   * @description Requires the `images-import` capability.
   */
  updateImageSource: {
    parameters: {
      path: {
        /** @description The ID of the image source. */
        sourceId: string;
      };
    };
    /** @description Parameters for updating an image source. */
    requestBody?: {
      content: {
        "application/json": {
          /** @description A name for the image source. */
          name?: string;
          origin?: components["schemas"]["ImageSourceOrigin"];
          /** @description User defined information about the image source. */
          about?: {
            /** @description A description of the image source. */
            description: string | null;
          };
        };
      };
    };
    responses: {
      /** @description Returns an image source resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ImageSource"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch Infrastructure Summary 
   * @description Requires the `infrastructure-servers-view` capability.
   */
  getInfrastructureSummary: {
    parameters: {
      query: {
        /**
         * @description ## Filter Field 
         * The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
         */
        filter?: {
          /** @description `filter[cluster]=value` return an infrastructure summary only for the specified cluster. */
          cluster?: string;
        };
      };
    };
    responses: {
      /** @description Returns an infrastructure summary. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["InfrastructureSummary"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Native Providers 
   * @description No capability required, public information.
   */
  getNativeProviders: {
    parameters: {
      query: {
        /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
        meta?: ("locations")[];
        /**
         * @description ## Filter Field 
         * The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
         */
        filter?: {
          /** @description `filter[search]=value` search for a value associated with a field on the given native provider(s). */
          search?: string;
        };
        sort?: components["parameters"]["SortParam"];
        page?: components["parameters"]["PageParam"];
      };
    };
    responses: {
      /** @description Returns a list of natively supported providers. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["NativeProvider"])[];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Provider Servers 
   * @description Requires the `infrastructure-providers-view` capability.
   */
  getProviderServers: {
    parameters: {
      query: {
        sort?: components["parameters"]["SortParam"];
        page?: components["parameters"]["PageParam"];
      };
      path: {
        /** @description The ID for the given provider. */
        providerId: string;
      };
    };
    responses: {
      /** @description A list of currently provisioned servers from a provider. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["ProviderServer"])[];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Provider Locations 
   * @description No capability required, public information (datacenter locations).
   */
  getProviderLocations: {
    parameters: {
      query: {
        sort?: components["parameters"]["SortParam"];
        page?: components["parameters"]["PageParam"];
      };
      path: {
        /** @description The ID for the given provider. */
        providerId: string;
      };
    };
    responses: {
      /** @description Returns a list of provider locations. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["InfrastructureProviderLocation"])[];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Providers 
   * @description Requires the `infrastructure-providers-view` capability.
   */
  getProviders: {
    parameters: {
      query: {
        /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
        meta?: ("node" | "instances_count" | "locations")[];
        /**
         * @description ## Filter Field 
         * The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
         */
        filter?: {
          /** @description `filter[search]=value` search for a value associated with a field on the given provider(s). */
          search?: string;
          /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the provider's current state. */
          state?: string;
        };
        sort?: components["parameters"]["SortParam"];
        page?: components["parameters"]["PageParam"];
      };
    };
    responses: {
      /** @description A collection of providers. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["Provider"])[];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Create Provider 
   * @description Requires the `infrastructure-providers-manage` capability.
   */
  createProvider: {
    /** @description Parameters for creating a provider. */
    requestBody?: {
      content: {
        "application/json": {
          /** @description An integration object defining the provider integration assets and endpoints. */
          integration: {
            /** @description Nativly supported IAL provider integration. */
            native?: {
              /** @description An identifier for the provider. */
              identifier: string;
              auth: components["schemas"]["IALAuth"];
            };
            /** @description Custom provider information. */
            abstraction?: {
              /** @description A name for the custom provider abstraction. */
              name: string;
              /** @description The url to use when making calls to the abstraction for provision events. */
              base_url: string;
              auth?: components["schemas"]["IALAuth"];
            };
          };
        };
      };
    };
    responses: {
      /** @description Returns a provider resource. */
      201: {
        content: {
          "application/json": {
            data?: components["schemas"]["Provider"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch Provider 
   * @description Requires the `infrastructure-providers-view` capability.
   */
  getProvider: {
    parameters: {
      path: {
        /** @description The ID for the given provider. */
        providerId: string;
      };
    };
    responses: {
      /** @description A single provider resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Provider"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Remove Provider 
   * @description Requires the `infrastructure-providers-manage` capability.
   */
  removeProvider: {
    parameters: {
      path: {
        /** @description The ID for the given provider. */
        providerId: string;
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      202: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Update Provider 
   * @description Requires the `infrastructure-providers-manage` capability.
   */
  updateProvider: {
    parameters: {
      path: {
        /** @description The ID for the given provider. */
        providerId: string;
      };
    };
    /** @description Parameters for updating a provider. */
    requestBody?: {
      content: {
        "application/json": {
          /** @description An integration object defining the provider integration assets and endpoints. */
          integration: {
            /** @description Nativly supported IAL provider integration. */
            native?: {
              /** @description An identifier for the provider. */
              identifier: string;
              auth: components["schemas"]["IALAuth"];
            };
            /** @description Custom provider information. */
            abstraction?: {
              /** @description A name for the custom provider abstraction. */
              name: string;
              /** @description The url to use when making calls to the abstraction for provision events. */
              base_url: string;
              auth?: components["schemas"]["IALAuth"];
            };
          };
        };
      };
    };
    responses: {
      /** @description Returns a provider resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Provider"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Providers Jobs 
   * @description Requires the `infrastructure-providers-manage` capability.
   */
  createProviderJob: {
    parameters: {
      path: {
        /** @description The ID for the given provider. */
        providerId: string;
      };
    };
    /** @description Parameters for creating a provider job. */
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description The action the job takes. 
           * @enum {string}
           */
          action: "verify";
        };
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      202: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Servers 
   * @description Requires the `servers-view` capability.
   */
  getServersCollection: {
    parameters: {
      query: {
        /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
        meta?: ("node" | "instances_count")[];
        /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
        include?: ("locations" | "models" | "providers")[];
        /**
         * @description ## Filter Field 
         * The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
         */
        filter?: {
          /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the provider's current state. */
          state?: string;
          /** @description `filter[tags]=tagone,tagtwo,tagthree` filtering by server tag.  Enter one or more tags (comma separated) and the return will include servers that match any tags in the list. */
          tags?: string;
          /** @description `filter[clusters]=clusterone,clustertwo` filtering by cluster.  Enter one or more clusters (commas separated) and the return will include servers that match any clusters in the list. */
          clusters?: string;
          /** @description `filter[providers]=providerone,providertwo` filtering by provider.  Enter one or more providers (commas separated) and the return will include servers that match any providers in the list. */
          providers?: string;
        };
        sort?: components["parameters"]["SortParam"];
        page?: components["parameters"]["PageParam"];
      };
    };
    responses: {
      /** @description A collection of server resources. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["Server"])[];
            includes?: components["schemas"]["ServerIncludes"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Create Server 
   * @description Requires the `servers-provision` capability.
   */
  createServer: {
    /** @description Parameters for creating a server. */
    requestBody?: {
      content: {
        "application/json": {
          /** @description The existing or new cluster this infrastructure should be provisioned in. */
          cluster: string;
          /** @description An array of servers to provision. */
          servers: ({
              /** @description The provider this server is from. */
              provider: string;
              /** @description The model ID of the server. */
              model_id: string;
              /** @description The location ID of the server. */
              location_id: string;
              /** @description The number of this server at this location to deploy. */
              quantity: number;
              /** @description An array of hostnames for the given servers. */
              hostnames?: (string)[];
              advanced?: ({
                  provision_options?: {
                    attached_storage_size?: number;
                    reservation_id?: string;
                  };
                  zone?: string;
                })[];
            })[];
        };
      };
    };
    responses: {
      /** @description Returns a single server resource. */
      201: {
        content: {
          "application/json": {
            data?: components["schemas"]["Server"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch Server 
   * @description Requires the `servers-view` capability.
   */
  getSingleServer: {
    parameters: {
      query: {
        /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
        include?: ("locations" | "models" | "providers")[];
        /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
        meta?: ("node" | "instances_count")[];
      };
      path: {
        /** @description The ID for the given server. */
        serverId: string;
      };
    };
    responses: {
      /** @description A single server resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Server"];
            includes?: components["schemas"]["ServerIncludes"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Remove Server 
   * @description Requires the `servers-update` capability.
   */
  removeServer: {
    parameters: {
      query: {
        options?: components["parameters"]["OptionParam"];
      };
      path: {
        /** @description The ID for the given server. */
        serverId: string;
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Update Server 
   * @description Requires the `servers-update` capability.
   */
  updateServer: {
    parameters: {
      path: {
        /** @description The ID for the given server. */
        serverId: string;
      };
    };
    /** @description Parameters for updating a server. */
    requestBody?: {
      content: {
        "application/json": {
          /** @description Server constriants. */
          constraints: {
            /** @description A list of server tags. */
            tags?: (string)[];
            /** @description Server constraints for the given server. */
            allow?: {
              /** @description A boolean where true represents the server can accept containers with no tags set. */
              pool: boolean;
              /** @description A boolean where true represents the server being a target for service containers. */
              services: boolean;
              /** @description A boolean where true represents the desire for the server to allow the overcommitting of shares. */
              overcommit: boolean;
            };
          };
        };
      };
    };
    responses: {
      /** @description A server resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Server"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Server Telemetry 
   * @description Requires the `servers-view` capability. This call requires the filter query be used.
   */
  getServerTelemetery: {
    parameters: {
      query: {
        /**
         * @description ## Filter Field 
         * The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
         */
        filter?: {
          /** @description The start date from when to pull server telemetry data */
          "range-start"?: components["schemas"]["DateTime"];
          /** @description The end date from when to pull server telemetry data */
          "range-end"?: components["schemas"]["DateTime"];
        };
        sort?: components["parameters"]["SortParam"];
        page?: components["parameters"]["PageParam"];
      };
      path: {
        /** @description The ID for the given server. */
        serverId: string;
      };
    };
    responses: {
      /** @description A list of telemetry points. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["ServerStatsTelemetry"])[];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Server Instances 
   * @description Requires the `containers-view` capability.
   */
  getServerInstances: {
    parameters: {
      query: {
        page?: components["parameters"]["PageParam"];
        /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
        include?: ("creator" | "servers" | "locations" | "providers" | "containers" | "environments")[];
      };
      path: {
        /** @description The ID for the given server. */
        serverId: string;
      };
    };
    responses: {
      /** @description A list of instance resources. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["Instance"])[];
            includes?: components["schemas"]["InstanceIncludes"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Create Server Job 
   * @description Used to perform different actions on a given server. Requires the `servers-state` capability.
   */
  createServerJob: {
    parameters: {
      path: {
        /** @description The ID for the given server. */
        serverId: string;
      };
    };
    /** @description Parameters for creating the new server job. */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ReconfigureServer"] | components["schemas"]["RestartServer"] | components["schemas"]["RestartCompute"];
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Server Tags 
   * @description Requires the `servers-view` capability.
   */
  getServerTags: {
    parameters: {
      query: {
        /**
         * @description ## Filter Field 
         * The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
         */
        filter?: {
          /** @description `filter[cluster]=clusterone,clustertwo` filtering by cluster.  Enter one or more clusters (commas separated) and the return will include tags from servers that match any cluster(s) in the list. */
          cluster?: string;
        };
      };
    };
    responses: {
      /** @description Returns a list of server tags. */
      200: {
        content: {
          "application/json": components["schemas"]["ServerTags"];
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Servers Clusters 
   * @description Requires the `servers-view` capability.
   */
  GetServersClusters: {
    responses: {
      /** @description A collection of cluster identifiers. */
      200: {
        content: {
          "application/json": {
            data?: (string)[];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch Server Usage 
   * @description Requires the `servers-view` capability.
   */
  GetServerUsage: {
    parameters: {
      path: {
        /** @description The ID for the given server. */
        serverId: string;
      };
    };
    responses: {
      /** @description Server data usage collection. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["UsageDatum"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Pools 
   * @description Requires the `infrastructure-ips-manage` capability.
   */
  getInfrastructureIPPools: {
    parameters: {
      query: {
        /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
        include?: ("creators" | "servers" | "providers" | "locations")[];
        page?: components["parameters"]["PageParam"];
      };
    };
    responses: {
      /** @description A collection of pool resources. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["Pool"])[];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch Pool IP 
   * @description Requires the `infrastructure-ips-manage` capability.
   */
  getInfrastructureIPPool: {
    parameters: {
      query: {
        /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
        include?: ("creators" | "servers" | "providers" | "locations")[];
      };
      path: {
        /** @description The ID for the given pool. */
        poolId: string;
      };
    };
    responses: {
      /** @description A single pool resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Pool"];
            includes?: components["schemas"]["PoolIncludes"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Remove Pool IP 
   * @description Requires the `infrastructure-ips-manage` capability.
   */
  removeIpPool: {
    parameters: {
      path: {
        /** @description The ID for the given pool. */
        poolId: string;
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      202: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Pool IP's 
   * @description Requires the `infrastructure-ips-manage` capability.
   */
  getPoolsIPs: {
    parameters: {
      path: {
        /** @description The ID for the given pool. */
        poolId: string;
      };
    };
    responses: {
      /** @description A collection of IPs. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["Ip"])[];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch Deployment Strategies 
   * @description This endpoint returns available container deployment strategies.
   */
  getDeploymentStrategies: {
    responses: {
      /** @description Deployment strategies. */
      200: {
        content: {
          "application/json": {
            data?: {
              "resource-density"?: components["schemas"]["DeploymentStrategy"];
              "high-availability"?: components["schemas"]["DeploymentStrategy"];
              "first-available"?: components["schemas"]["DeploymentStrategy"];
              node?: components["schemas"]["DeploymentStrategy"];
              edge?: components["schemas"]["DeploymentStrategy"];
              manual?: components["schemas"]["DeploymentStrategy"];
            };
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Jobs. 
   * @description Requires the `jobs-view` permission.
   */
  getJobs: {
    parameters: {
      query: {
        /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
        include?: ("creators")[];
        /**
         * @description ## Filter Field 
         * The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
         */
        filter?: {
          /** @description The start date from when to fetch jobs */
          "range-start"?: components["schemas"]["DateTime"];
          /** @description The end date from when to fetch jobs */
          "range-end"?: components["schemas"]["DateTime"];
          /** @description `filter[search]=value` search jobs for a value associated with a field on the given job(s). */
          search?: string;
          /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the job's current state. */
          state?: string;
        };
        sort?: components["parameters"]["SortParam"];
        page?: components["parameters"]["PageParam"];
      };
    };
    responses: {
      /** @description A collection of job resources. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["Job"])[];
            includes?: components["schemas"]["JobIncludes"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch Job 
   * @description Requires the `jobs-view` permission.
   */
  getJob: {
    parameters: {
      path: {
        /** @description The ID for the given job. */
        jobId: string;
      };
    };
    responses: {
      /** @description A job resources. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Job"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Latest Jobs 
   * @description Requires the `jobs-view` permission.
   */
  getLatestJobs: {
    responses: {
      /** @description A collection of job resources. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["Job"])[];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Stacks 
   * @description Requires the `stacks-view` permission.
   */
  getStacks: {
    parameters: {
      query: {
        /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
        meta?: ("containers_count" | "builds_count")[];
        /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
        include?: ("creators")[];
        /**
         * @description ## Filter Field 
         * The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
         */
        filter?: {
          /** @description `filter[identifier]=value` List only those stacks matching this identifier. May return multiple results. */
          identifier?: string;
          /** @description `filter[search]=value` search for a value associated with a field on the given stack(s). */
          search?: string;
          /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the stack's current state. */
          state?: string;
        };
        sort?: components["parameters"]["SortParam"];
        page?: components["parameters"]["PageParam"];
      };
    };
    responses: {
      /** @description A collection of stack resources. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["Stack"])[];
            includes?: components["schemas"]["StackInclude"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Create Stack 
   * @description Requires the `stacks-manage` capability.
   */
  createStack: {
    /** @description Parameters for creating a new stack. */
    requestBody?: {
      content: {
        "application/json": {
          /** @description A name for the stack. */
          name: string;
          identifier?: components["schemas"]["Identifier"];
          source: components["schemas"]["StackSource"];
        };
      };
    };
    responses: {
      /** @description Returns a stack resource. */
      201: {
        content: {
          "application/json": {
            data?: components["schemas"]["Stack"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch Stack 
   * @description Requires the `stacks-view` capability.
   */
  getStack: {
    parameters: {
      path: {
        /** @description The ID of the stack */
        stackId: string;
      };
    };
    responses: {
      /** @description Returns a stack resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Stack"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Remove Stack 
   * @description Requires the `stacks-manage` capability.
   */
  removeStack: {
    parameters: {
      path: {
        /** @description The ID of the stack */
        stackId: string;
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Update Stack 
   * @description Requires the `stacks-manage` capability.
   */
  updateStack: {
    parameters: {
      path: {
        /** @description The ID of the stack */
        stackId: string;
      };
    };
    /** @description Parameters for updating a stack. */
    requestBody?: {
      content: {
        "application/json": {
          /** @description A name for the stack. */
          name?: string;
          source?: components["schemas"]["StackSource"];
        };
      };
    };
    responses: {
      /** @description Returns an updated stack resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Stack"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Create Stack Job 
   * @description Requires the `stacks-manage` capability.
   */
  createStackJob: {
    parameters: {
      path: {
        /** @description The ID of the stack */
        stackId: string;
      };
    };
    /** @description Parameters for creating a new stack job. */
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description The job to do. 
           * @enum {string}
           */
          action: "prune";
        };
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch Stack Build 
   * @description Requires the `stacks-view` capability.
   */
  getStackBuildLookup: {
    parameters: {
      path: {
        /** @description The ID of the build. */
        buildId: string;
      };
    };
    responses: {
      /** @description Returns a stack build resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["StackBuild"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Builds 
   * @description Requires the `stacks-view` capability.
   */
  getStackBuilds: {
    parameters: {
      query: {
        /** @description A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled. */
        meta?: ("containers_count")[];
        /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
        include?: ("stack_id" | "hub_id" | "about" | "instructions" | "events" | "state")[];
        /**
         * @description ## Filter Field 
         * The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
         */
        filter?: {
          /** @description `filter[search]=value` search for a value associated with a field on the given stack build(s). */
          search?: string;
          /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the stack build's current state. */
          state?: string;
        };
        sort?: components["parameters"]["SortParam"];
        page?: components["parameters"]["PageParam"];
      };
      path: {
        /** @description The ID of the stack */
        stackId: string;
      };
    };
    responses: {
      /** @description Returns a collection of stack builds. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["StackBuild"])[];
            includes?: components["schemas"]["StackBuildInclude"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Create Stack Build 
   * @description Requires the `stacks-manage` capability.
   */
  createStackBuild: {
    parameters: {
      path: {
        /** @description The ID of the stack */
        stackId: string;
      };
    };
    /** @description Parameters for creating a new stack build. */
    requestBody?: {
      content: {
        "application/json": {
          about?: components["schemas"]["StackBuildAbout"];
          instructions?: components["schemas"]["StackBuildInstructions"];
        };
      };
    };
    responses: {
      /** @description Returns a stack build resource. */
      201: {
        content: {
          "application/json": {
            data?: components["schemas"]["StackBuild"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch Stack Build 
   * @description Requires the `stacks-view` capability.
   */
  getStackBuild: {
    parameters: {
      path: {
        /** @description The ID of the stack. */
        stackId: string;
        /** @description The ID of the build. */
        buildId: string;
      };
    };
    responses: {
      /** @description Returns a stack build resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["StackBuild"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Remove Stack Build 
   * @description Requires the `stacks-manage` capability.
   */
  removeStackBuild: {
    parameters: {
      path: {
        /** @description The ID of the stack. */
        stackId: string;
        /** @description The ID of the build. */
        buildId: string;
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Create Stack Build Job 
   * @description Requires the `stacks-manage` capability.
   */
  createStackBuildJob: {
    parameters: {
      path: {
        /** @description The ID of the stack. */
        stackId: string;
        /** @description The ID of the build. */
        buildId: string;
      };
    };
    /** @description Parameters for creating a new stack build job. */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["GenerateStackBuildAction"] | components["schemas"]["DeployStackBuildAction"];
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List SDNs 
   * @description Requires the `sdn-networks-view` capability.
   */
  getNetworks: {
    parameters: {
      query: {
        /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
        include?: ("creators" | "environments")[];
        /**
         * @description ## Filter Field 
         * The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
         */
        filter?: {
          /** @description `filter[search]=value` search for a value associated with a field on the given network(s). */
          search?: string;
          /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the network's current state. */
          state?: string;
        };
        sort?: components["parameters"]["SortParam"];
        page?: components["parameters"]["PageParam"];
      };
    };
    responses: {
      /** @description Returns a collection of network resources. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["SDNNetwork"])[];
            includes?: components["schemas"]["NetworkIncludes"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Create SDN 
   * @description Requires the `sdn-networks-manage` capability.
   */
  createSDNNetwork: {
    /** @description Parameters for creating a new network. */
    requestBody?: {
      content: {
        "application/json": {
          /** @description The name of the network. */
          name: string;
          /** @description A network identifier used to construct http calls that specifically use this network over another. */
          identifier: string;
          /** @description The infrastructure cluster the environments belonging to this network belong to. */
          cluster: string;
          /** @description An array of environment Ids */
          environments: (string)[];
        };
      };
    };
    responses: {
      /** @description Returns a network resource. */
      201: {
        content: {
          "application/json": {
            data?: components["schemas"]["SDNNetwork"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch SDN 
   * @description Requires the `sdn-networks-view` capability.
   */
  getNetwork: {
    parameters: {
      path: {
        /** @description The ID of the network. */
        networkId: string;
      };
    };
    responses: {
      /** @description Returns a single network resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["SDNNetwork"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Remove SDN 
   * @description Requires the `sdn-networks-manage` capability.
   */
  removeSDNNetwork: {
    parameters: {
      path: {
        /** @description The ID of the network. */
        networkId: string;
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Update SDN 
   * @description Requires the `sdn-networks-manage` capability.
   */
  updateSDNNetwork: {
    parameters: {
      path: {
        /** @description The ID of the network. */
        networkId: string;
      };
    };
    /** @description Parameters for updating a network. */
    requestBody?: {
      content: {
        "application/json": {
          /** @description The name of the network. */
          name?: string;
          /** @description A network identifier used to construct http calls that specifically use this network over another. */
          identifier?: string;
        };
      };
    };
    responses: {
      /** @description Returns a network resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["SDNNetwork"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Create SDN Job 
   * @description Requires the `sdn-networks-manage` capability.
   */
  createNetworkJob: {
    parameters: {
      path: {
        /** @description The ID of the network. */
        networkId: string;
      };
    };
    /** @description Parameters for creating a new sdn job. */
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description The job to do. 
           * @enum {string}
           */
          action: "reconfigure";
          /** @description Additional information needed for the job. */
          contents: {
            /** @description An array of environment identifiers for the network. */
            environment_ids: (string)[];
          };
        };
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Pipelines 
   * @description Requires the `pipelines-view` capability.
   */
  getPipelines: {
    parameters: {
      query: {
        /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
        include?: ("creators" | "name" | "components")[];
        /**
         * @description ## Filter Field 
         * The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
         */
        filter?: {
          /** @description `filter[identifier]=value` List only those pipelines matching this identifier. May return multiple results. */
          identifier?: string;
          /** @description `filter[search]=value` search for a value associated with a field on the given pipelines(s). */
          search?: string;
          /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the pipeline's current state. */
          state?: string;
        };
        sort?: components["parameters"]["SortParam"];
        page?: components["parameters"]["PageParam"];
      };
    };
    responses: {
      /** @description Returns a collection of pipeline resources. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["Pipeline"])[];
            includes?: components["schemas"]["PipelineIncludes"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Create Pipeline 
   * @description Requires the `pipelines-manage` capability.
   */
  createPipeline: {
    /** @description Parameters for creating a new pipeline. */
    requestBody?: {
      content: {
        "application/json": {
          /** @description A name for the pipeline. */
          name: string;
          identifier?: components["schemas"]["Identifier"];
          /** @description An array of stages. */
          stages?: (components["schemas"]["PipelineStage"])[];
          /** @description A boolean where true signifies the pipeline is disabled. */
          disable?: boolean;
        };
      };
    };
    responses: {
      /** @description Returns a pipeline resource. */
      201: {
        content: {
          "application/json": {
            data?: components["schemas"]["Pipeline"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch Pipeline 
   * @description Requires the `pieplines-view` capability.
   */
  getPipeline: {
    parameters: {
      query: {
        /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
        include?: ("creators" | "name" | "components")[];
      };
      path: {
        /** @description The ID of the pipeline. */
        pipelineId: string;
      };
    };
    responses: {
      /** @description Returns a pipeline resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Pipeline"];
            includes?: components["schemas"]["PipelineIncludes"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Remove Pipeline 
   * @description Requires the `pipelines-manage` capability.
   */
  removePipeline: {
    parameters: {
      path: {
        /** @description The ID of the pipeline. */
        pipelineId: string;
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Create Pipeline 
   * @description Requires the `pipelines-manage` capability.
   */
  updatePipeline: {
    parameters: {
      path: {
        /** @description The ID of the pipeline. */
        pipelineId: string;
      };
    };
    /** @description Parameters for updating a pipeline. */
    requestBody?: {
      content: {
        "application/json": {
          /** @description A name for the pipeline. */
          name?: string;
          /** @description An array of stages. */
          stages?: (components["schemas"]["PipelineStage"])[];
          /** @description A boolean where true signifies the pipeline is disabled. */
          disable?: boolean;
        };
      };
    };
    responses: {
      /** @description Returns a pipeline resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Pipeline"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Pipeline Runs 
   * @description Requires the `pieplines-view` capability.
   */
  getPipelineRuns: {
    parameters: {
      query: {
        sort?: components["parameters"]["SortParam"];
        /** @description A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return. */
        include?: ("creators")[];
      };
      path: {
        /** @description The ID of the pipeline. */
        pipelineId: string;
      };
    };
    responses: {
      /** @description Returns a list of pipeline run resources. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["Run"])[];
            includes?: {
              creators?: components["schemas"]["CreatorInclude"];
            };
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Create Pipeline Job 
   * @description Requires the `pipelines-manage` capability.
   */
  createPipelineJob: {
    parameters: {
      path: {
        /** @description The ID of the pipeline. */
        pipelineId: string;
      };
    };
    /** @description Parameters for creating a new pipeline job. */
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description The job to do. 
           * @enum {string}
           */
          action: "trigger";
        };
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * List Trigger Keys 
   * @description Requires the `pipelines-manage` capability.
   */
  getPipelineTriggerKeys: {
    parameters: {
      query: {
        /**
         * @description ## Filter Field 
         * The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
         */
        filter?: {
          /** @description `filter[search]=value` search for a value associated with a field on the given trigger key(s). */
          search?: string;
          /** @description `filter[state]=value1,value2` state filtering will allow you to filter by the trigger key's current state. */
          state?: string;
        };
        sort?: components["parameters"]["SortParam"];
        page?: components["parameters"]["PageParam"];
      };
      path: {
        /** @description The ID of the pipeline. */
        pipelineId: string;
      };
    };
    responses: {
      /** @description Returns a collection of trigger key resources. */
      200: {
        content: {
          "application/json": {
            data?: (components["schemas"]["TriggerKey"])[];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Create Trigger Key 
   * @description Requires the `pipelines-manage` capability.
   */
  createPipelineTriggerKey: {
    parameters: {
      path: {
        /** @description The ID of the pipeline. */
        pipelineId: string;
      };
    };
    /** @description Parameters for creating a new pipeline trigger key. */
    requestBody?: {
      content: {
        "application/json": {
          /** @description A name for the trigger key. */
          name?: string;
          /** @description An array of ips this trigger key is usable from. */
          ips?: (string)[];
        };
      };
    };
    responses: {
      /** @description Returns a trigger key resource. */
      201: {
        content: {
          "application/json": {
            data?: components["schemas"]["TriggerKey"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Fetch Trigger Key 
   * @description Requires the `pipelines-manage` capability.
   */
  getPipelineTriggerKey: {
    parameters: {
      path: {
        /** @description The ID of the pipeline. */
        pipelineId: string;
        /** @description The ID of the trigger key. */
        triggerKeyId: string;
      };
    };
    responses: {
      /** @description Returns a trigger key resource. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["TriggerKey"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Delete Trigger Key 
   * @description Requires the `pipelines-manage` capability.
   */
  removePipelineTriggerKey: {
    parameters: {
      path: {
        /** @description The ID of the pipeline. */
        pipelineId: string;
        /** @description The ID of the trigger key. */
        triggerKeyId: string;
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Update Trigger Key 
   * @description Requires the `pipelines-manage` capability.
   */
  updatePipelineTriggerKey: {
    parameters: {
      path: {
        /** @description The ID of the pipeline. */
        pipelineId: string;
        /** @description The ID of the trigger key. */
        triggerKeyId: string;
      };
    };
    /** @description Req body for updating trigger key */
    requestBody?: {
      content: {
        "application/json": {
          /** @description Set name of trigger key */
          name?: string;
          /** @description List of Ip Restrictions */
          ips?: (string)[];
        };
      };
    };
    responses: {
      /** @description Returns a task descriptor. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaskDescriptor"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Hub Notification Pipeline Auth 
   * @description Requires the `hubs-notifications-listen` capability.
   */
  pipelineAuth: {
    responses: {
      /** @description Returns a token. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["HubNotificationToken"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Instance Console Auth 
   * @description Requires the `contaiers-console` capability.
   */
  instanceConsoleAuth: {
    parameters: {
      path: {
        /** @description The ID for the container */
        containerId: string;
        /** @description The ID of the instance. */
        instanceId: string;
      };
    };
    responses: {
      /** @description Returns a token and address. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["InstanceConsoleAuth"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Instance Telemetry Stream Credentials 
   * @description Requires the `containers-view` capability. Retrieves an access token and URL to open a websocket to for streaming instance telemetry live. This connects directly to the compute layer on the server the instance is hosted on, and streams telemetry in real time.
   */
  getInstanceResourcesTelemetryStream: {
    parameters: {
      path: {
        /** @description The ID of the requested container. */
        containerId: string;
        /** @description The ID for the container instance. */
        instanceId: string;
      };
    };
    responses: {
      /** @description Returns credentials for connecting to an instance telemetry stream. */
      200: {
        content: {
          "application/json": {
            /**
             * InstanceTelemetryStreamCredentials 
             * @description Credentials for connecting to the instance telemetry stream on compute.
             */
            data?: {
              /** @description The authentication token passed into the address as a URL parameter (?token). */
              token: string;
              /** @description The URL address to open a websocket to for streaming instance telemetry data. */
              address: string;
            };
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
  /**
   * Get Security Report 
   * @description Returns a report detailing incidents logged by the platform around security related events.
   */
  getSecurityReport: {
    parameters: {
      query: {
        /**
         * @description ## Filter Field 
         * The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
         */
        filter?: {
          /** @description `filter[environment]=<Environment ID>` fetch the security report for the specified environment */
          environment?: string;
          /** @description `filter[event]=value` filter by event occurrence. Example: `filter[event]=environment.services.vpn.login` */
          event?: string;
        };
      };
    };
    responses: {
      /** @description Returns the security report. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["SecurityReport"];
          };
        };
      };
      default: components["responses"]["DefaultError"];
    };
  };
}
